module.file_new_tenant.data.azurerm_client_config.this: Reading...
module.file_new_geo["EMEA"].data.azurerm_client_config.current: Reading...
module.file_new_tenant.data.azurerm_client_config.this: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9MTU5Y2M1ZjMtM2UxMi00YmM4LWIzMzEtMzlkOGJkMTdjY2U3O3N1YnNjcmlwdGlvbklkPTRmMDA3ZjJjLTVjOGQtNGE1OS04ZjBjLTlkMTk0YzFlZDE1Mjt0ZW5hbnRJZD1mYzI1NjA3ZC0wYzQ4LTRhZDMtYmU4OC1hOTFlMWYwNTc2NjI=]
module.file_new_geo["EMEA"].data.azurerm_client_config.current: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9MTU5Y2M1ZjMtM2UxMi00YmM4LWIzMzEtMzlkOGJkMTdjY2U3O3N1YnNjcmlwdGlvbklkPTRmMDA3ZjJjLTVjOGQtNGE1OS04ZjBjLTlkMTk0YzFlZDE1Mjt0ZW5hbnRJZD1mYzI1NjA3ZC0wYzQ4LTRhZDMtYmU4OC1hOTFlMWYwNTc2NjI=]
module.file_new_geo["EMEA"].data.azapi_resource_action.resource_provider["Microsoft.Network"]: Reading...
module.file_new_geo["EMEA"].data.azapi_resource_action.resource_provider["Microsoft.Storage"]: Reading...
module.file_new_geo["EMEA"].data.azapi_resource_action.resource_provider["Microsoft.Storage"]: Read complete after 6s [id=/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152/providers/Microsoft.Storage]
module.file_new_geo["EMEA"].data.azapi_resource_action.resource_provider["Microsoft.Network"]: Read complete after 8s [id=/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152/providers/Microsoft.Network]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # azapi_update_resource.security_center_subscription_pricing_api["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_api" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Free"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Api"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_api["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_api" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Free"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Api"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_api["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_api" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Free"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Api"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_app_services["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_app_services" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "AppServices"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_app_services["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_app_services" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "AppServices"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_app_services["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_app_services" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "AppServices"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_arm["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_arm" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerSubscription"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Arm"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_arm["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_arm" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerSubscription"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Arm"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_arm["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_arm" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerSubscription"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Arm"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cloud_posture["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cloud_posture" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "EntraPermissionsManagement"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CloudPosture"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cloud_posture["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cloud_posture" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "EntraPermissionsManagement"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CloudPosture"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cloud_posture["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cloud_posture" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "EntraPermissionsManagement"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CloudPosture"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_containers["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_containers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Containers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_containers["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_containers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Containers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_containers["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_containers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "True"
                      + name      = "ContainerRegistriesVulnerabilityAssessments"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "AgentlessDiscoveryForKubernetes"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "Containers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cosmos_dbs["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cosmos_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CosmosDbs"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cosmos_dbs["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cosmos_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CosmosDbs"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_cosmos_dbs["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_cosmos_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "CosmosDbs"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_key_vaults["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_key_vaults" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerKeyVault"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "KeyVaults"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_key_vaults["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_key_vaults" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerKeyVault"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "KeyVaults"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_key_vaults["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_key_vaults" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = "PerKeyVault"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "KeyVaults"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_open_source_relational_dbs["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_open_source_relational_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "OpenSourceRelationalDatabases"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_open_source_relational_dbs["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_open_source_relational_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "OpenSourceRelationalDatabases"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_open_source_relational_dbs["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_open_source_relational_dbs" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "OpenSourceRelationalDatabases"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_server_virtual_machines["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_server_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServerVirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_server_virtual_machines["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_server_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServerVirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_server_virtual_machines["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_server_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServerVirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_servers["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_servers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_servers["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_servers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_sql_servers["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_sql_servers" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = []
              + pricingTier = "Standard"
              + subPlan     = null
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "SqlServers"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_storage_accounts["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_storage_accounts" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + additionalExtensionProperties = {
                          + CapGBPerMonthPerStorageAccount = "5000"
                        }
                      + isEnabled                     = "True"
                      + name                          = "OnUploadMalwareScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "DefenderForStorageV2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "StorageAccounts"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_storage_accounts["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_storage_accounts" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + additionalExtensionProperties = {
                          + CapGBPerMonthPerStorageAccount = "5000"
                        }
                      + isEnabled                     = "True"
                      + name                          = "OnUploadMalwareScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "DefenderForStorageV2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "StorageAccounts"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_storage_accounts["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_storage_accounts" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + additionalExtensionProperties = {
                          + CapGBPerMonthPerStorageAccount = "5000"
                        }
                      + isEnabled                     = "True"
                      + name                          = "OnUploadMalwareScanning"
                    },
                  + {
                      + isEnabled = "True"
                      + name      = "SensitiveDataDiscovery"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "DefenderForStorageV2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "StorageAccounts"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_virtual_machines["4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "False"
                      + name      = "MdeDesignatedSubscription"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "False"
                      + name      = "FileIntegrityMonitoring"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "P2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "VirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_virtual_machines["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "False"
                      + name      = "MdeDesignatedSubscription"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "False"
                      + name      = "FileIntegrityMonitoring"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "P2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "VirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azapi_update_resource.security_center_subscription_pricing_virtual_machines["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azapi_update_resource" "security_center_subscription_pricing_virtual_machines" {
      + body                    = {
          + properties = {
              + enforce     = "True"
              + extensions  = [
                  + {
                      + isEnabled = "False"
                      + name      = "MdeDesignatedSubscription"
                    },
                  + {
                      + additionalExtensionProperties = {
                          + ExclusionTags = jsonencode([])
                        }
                      + isEnabled                     = "True"
                      + name                          = "AgentlessVmScanning"
                    },
                  + {
                      + isEnabled = "False"
                      + name      = "FileIntegrityMonitoring"
                    },
                ]
              + pricingTier = "Standard"
              + subPlan     = "P2"
            }
        }
      + id                      = (known after apply)
      + ignore_casing           = false
      + ignore_missing_property = false
      + locks                   = []
      + name                    = "VirtualMachines"
      + output                  = (known after apply)
      + parent_id               = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
      + resource_id             = (known after apply)
      + response_export_values  = []
      + sensitive_body          = (write-only attribute)
      + type                    = "Microsoft.Security/pricings@2024-01-01"
    }

  # azurerm_network_manager_deployment.network_manager_mesh_deployment_connectivity["westeurope"] will be created
  + resource "azurerm_network_manager_deployment" "network_manager_mesh_deployment_connectivity" {
      + configuration_ids  = (known after apply)
      + id                 = (known after apply)
      + location           = "westeurope"
      + network_manager_id = (known after apply)
      + scope_access       = "Connectivity"
    }

  # azurerm_network_manager_deployment.network_manager_mesh_deployment_security_admin["westeurope"] will be created
  + resource "azurerm_network_manager_deployment" "network_manager_mesh_deployment_security_admin" {
      + configuration_ids  = (known after apply)
      + id                 = (known after apply)
      + location           = "westeurope"
      + network_manager_id = (known after apply)
      + scope_access       = "SecurityAdmin"
    }

  # azurerm_resource_group.virtual_wan_rgs["vwan"] will be created
  + resource "azurerm_resource_group" "virtual_wan_rgs" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-network-vwan-ADIA"
      + tags     = {
          + "Purpose" = "Virtual-WAN-Infrastructure"
        }
    }

  # time_sleep.sleep_before_network_manager_deployment will be created
  + resource "time_sleep" "sleep_before_network_manager_deployment" {
      + create_duration = "300s"
      + id              = (known after apply)
    }

  # module.file_new_geo["EMEA"].data.azurerm_monitor_diagnostic_categories.diagnostic_categories_log_analytics_workspace will be read during apply
  # (config refers to values not yet known)
 <= data "azurerm_monitor_diagnostic_categories" "diagnostic_categories_log_analytics_workspace" {
      + id                  = (known after apply)
      + log_category_groups = (known after apply)
      + log_category_types  = (known after apply)
      + metrics             = (known after apply)
      + resource_id         = (known after apply)
    }

  # module.file_new_geo["EMEA"].data.azurerm_monitor_diagnostic_categories.diagnostic_categories_network_manager will be read during apply
  # (config refers to values not yet known)
 <= data "azurerm_monitor_diagnostic_categories" "diagnostic_categories_network_manager" {
      + id                  = (known after apply)
      + log_category_groups = (known after apply)
      + log_category_types  = (known after apply)
      + metrics             = (known after apply)
      + resource_id         = (known after apply)
    }

  # module.file_new_geo["EMEA"].azapi_resource.log_analytics_workspace will be created
  + resource "azapi_resource" "log_analytics_workspace" {
      + body                      = {
          + properties = {
              + features                        = {
                  + disableLocalAuth                            = false
                  + enableLogAccessUsingOnlyResourcePermissions = true
                }
              + publicNetworkAccessForIngestion = "Enabled"
              + publicNetworkAccessForQuery     = "Enabled"
              + retentionInDays                 = 30
              + sku                             = {
                  + name = "PerGB2018"
                }
            }
        }
      + id                        = (known after apply)
      + ignore_casing             = false
      + ignore_missing_property   = false
      + ignore_null_property      = false
      + location                  = "westeurope"
      + locks                     = []
      + name                      = "log-adia-emea"
      + output                    = (known after apply)
      + parent_id                 = (known after apply)
      + response_export_values    = [
          + "*",
        ]
      + schema_validation_enabled = true
      + sensitive_body            = (write-only attribute)
      + tags                      = {}
      + type                      = "Microsoft.OperationalInsights/workspaces@2023-09-01"
    }

  # module.file_new_geo["EMEA"].azapi_resource.user_assigned_identity will be created
  + resource "azapi_resource" "user_assigned_identity" {
      + id                        = (known after apply)
      + ignore_casing             = false
      + ignore_missing_property   = false
      + ignore_null_property      = false
      + location                  = "westeurope"
      + locks                     = []
      + name                      = "id-adia-emea"
      + output                    = (known after apply)
      + parent_id                 = (known after apply)
      + response_export_values    = [
          + "*",
        ]
      + schema_validation_enabled = true
      + sensitive_body            = (write-only attribute)
      + tags                      = {}
      + type                      = "Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31"
    }

  # module.file_new_geo["EMEA"].azurerm_management_group.management_group_non_prod will be created
  + resource "azurerm_management_group" "management_group_non_prod" {
      + display_name               = "Non-Prod"
      + id                         = (known after apply)
      + name                       = "non-prod"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)
    }

  # module.file_new_geo["EMEA"].azurerm_management_group.management_group_prod will be created
  + resource "azurerm_management_group" "management_group_prod" {
      + display_name               = "Prod"
      + id                         = (known after apply)
      + name                       = "prod"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_allowed_azure_services will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_allowed_azure_services" {
      + description          = "This policy assignment specifies the allowed Azure Services for Azure Service Enablement."
      + display_name         = "Allowed Azure Services"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "General"
              + version  = "1.0.0"
            }
        )
      + name                 = "Allowed-Azure-Services"
      + not_scopes           = []
      + parameters           = jsonencode(
            {
              + listOfResourceTypesAllowed = {
                  + value = [
                      + "Microsoft.Network/dnszones",
                      + "Microsoft.Network/dnsOperationResults",
                      + "Microsoft.Network/dnsOperationStatuses",
                      + "Microsoft.Network/getDnsResourceReference",
                      + "Microsoft.Network/internalNotify",
                      + "Microsoft.Network/dnszones/A",
                      + "Microsoft.Network/dnszones/AAAA",
                      + "Microsoft.Network/dnszones/CNAME",
                      + "Microsoft.Network/dnszones/PTR",
                      + "Microsoft.Network/dnszones/MX",
                      + "Microsoft.Network/dnszones/TXT",
                      + "Microsoft.Network/dnszones/SRV",
                      + "Microsoft.Network/dnszones/SOA",
                      + "Microsoft.Network/dnszones/NS",
                      + "Microsoft.Network/dnszones/CAA",
                      + "Microsoft.Network/dnszones/DS",
                      + "Microsoft.Network/dnszones/TLSA",
                      + "Microsoft.Network/dnszones/NAPTR",
                      + "Microsoft.Network/dnszones/recordsets",
                      + "Microsoft.Network/dnszones/all",
                      + "Microsoft.Network/dnszones/dnssecConfigs",
                      + "Microsoft.Network/dnsResolvers",
                      + "Microsoft.Network/dnsResolvers/inboundEndpoints",
                      + "Microsoft.Network/dnsResolvers/outboundEndpoints",
                      + "Microsoft.Network/dnsForwardingRulesets",
                      + "Microsoft.Network/dnsForwardingRulesets/forwardingRules",
                      + "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks",
                      + "Microsoft.Network/virtualNetworks/listDnsResolvers",
                      + "Microsoft.Network/virtualNetworks/listDnsForwardingRulesets",
                      + "Microsoft.Network/locations/dnsResolverOperationResults",
                      + "Microsoft.Network/locations/dnsResolverOperationStatuses",
                      + "Microsoft.Network/dnsResolverPolicies",
                      + "Microsoft.Network/dnsResolverPolicies/dnsSecurityRules",
                      + "Microsoft.Network/dnsResolverPolicies/virtualNetworkLinks",
                      + "Microsoft.Network/virtualNetworks/listDnsResolverPolicies",
                      + "Microsoft.Network/dnsResolverDomainLists",
                      + "Microsoft.Network/dnsResolverDomainLists/bulk",
                      + "Microsoft.Network/locations/dnsResolverPolicyOperationResults",
                      + "Microsoft.Network/locations/dnsResolverPolicyOperationStatuses",
                      + "Microsoft.Network/frontdoorOperationResults",
                      + "Microsoft.Network/checkFrontdoorNameAvailability",
                      + "Microsoft.Network/frontdoors",
                      + "Microsoft.Network/frontdoors/frontendEndpoints",
                      + "Microsoft.Network/frontdoors/frontendEndpoints/customHttpsConfiguration",
                      + "Microsoft.Network/frontdoorWebApplicationFirewallPolicies",
                      + "Microsoft.Network/frontdoorWebApplicationFirewallManagedRuleSets",
                      + "Microsoft.Network/networkExperimentProfiles",
                      + "Microsoft.Network/virtualNetworkGateways",
                      + "Microsoft.Network/localNetworkGateways",
                      + "Microsoft.Network/connections",
                      + "Microsoft.Network/applicationGateways",
                      + "Microsoft.Network/expressRouteCircuits",
                      + "Microsoft.Network/expressRouteServiceProviders",
                      + "Microsoft.Network/applicationGatewayAvailableWafRuleSets",
                      + "Microsoft.Network/applicationGatewayAvailableSslOptions",
                      + "Microsoft.Network/applicationGatewayAvailableServerVariables",
                      + "Microsoft.Network/applicationGatewayAvailableRequestHeaders",
                      + "Microsoft.Network/applicationGatewayAvailableResponseHeaders",
                      + "Microsoft.Network/routeFilters",
                      + "Microsoft.Network/bgpServiceCommunities",
                      + "Microsoft.Network/vpnSites",
                      + "Microsoft.Network/vpnServerConfigurations",
                      + "Microsoft.Network/virtualHubs",
                      + "Microsoft.Network/vpnGateways",
                      + "Microsoft.Network/p2sVpnGateways",
                      + "Microsoft.Network/expressRouteGateways",
                      + "Microsoft.Network/expressRoutePortsLocations",
                      + "Microsoft.Network/expressRoutePorts",
                      + "Microsoft.Network/securityPartnerProviders",
                      + "Microsoft.Network/azureFirewalls",
                      + "Microsoft.Network/azureFirewallFqdnTags",
                      + "Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies",
                      + "Microsoft.Network/locations/ApplicationGatewayWafDynamicManifests",
                      + "Microsoft.Network/virtualWans",
                      + "Microsoft.Network/bastionHosts",
                      + "Microsoft.Network/queryExpressRoutePortsBandwidth",
                      + "Microsoft.Network/networkManagers",
                      + "Microsoft.Network/networkManagerConnections",
                      + "Microsoft.Network/networkSecurityPerimeters",
                      + "Microsoft.Network/locations/perimeterAssociableResourceTypes",
                      + "Microsoft.Network/locations/queryNetworkSecurityPerimeter",
                      + "Microsoft.Network/networkGroupMemberships",
                      + "Microsoft.Network/locations/commitInternalAzureNetworkManagerConfiguration",
                      + "Microsoft.Network/locations/internalAzureVirtualNetworkManagerOperation",
                      + "Microsoft.Network/networkManagers/ipamPools",
                      + "Microsoft.Network/locations/ipamPoolOperationResults",
                      + "Microsoft.Network/networkManagers/verifierWorkspaces",
                      + "Microsoft.Network/locations/verifierWorkspaceOperationResults",
                      + "Microsoft.Network/copilot",
                      + "Microsoft.Network/locations/networkSecurityPerimeterOperationStatuses",
                      + "Microsoft.Network/expressRouteProviderPorts",
                      + "Microsoft.Network/locations/hybridEdgeZone",
                      + "Microsoft.Network/firewallPolicies",
                      + "Microsoft.Network/ipGroups",
                      + "Microsoft.Network/azureWebCategories",
                      + "Microsoft.Network/locations/nfvOperations",
                      + "Microsoft.Network/locations/nfvOperationResults",
                      + "Microsoft.Network/virtualRouters",
                      + "Microsoft.Network/networkVirtualAppliances",
                      + "Microsoft.Network/networkVirtualApplianceSkus",
                      + "Microsoft.Network/assist",
                      + "Microsoft.Network/privateDnsZones",
                      + "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      + "Microsoft.Network/privateDnsOperationResults",
                      + "Microsoft.Network/privateDnsOperationStatuses",
                      + "Microsoft.Network/privateDnsZonesInternal",
                      + "Microsoft.Network/privateDnsZones/A",
                      + "Microsoft.Network/privateDnsZones/AAAA",
                      + "Microsoft.Network/privateDnsZones/CNAME",
                      + "Microsoft.Network/privateDnsZones/PTR",
                      + "Microsoft.Network/privateDnsZones/MX",
                      + "Microsoft.Network/privateDnsZones/TXT",
                      + "Microsoft.Network/privateDnsZones/SRV",
                      + "Microsoft.Network/privateDnsZones/SOA",
                      + "Microsoft.Network/privateDnsZones/all",
                      + "Microsoft.Network/virtualNetworks/privateDnsZoneLinks",
                      + "Microsoft.Network/trafficmanagerprofiles",
                      + "Microsoft.Network/trafficmanagerprofiles/heatMaps",
                      + "Microsoft.Network/trafficmanagerprofiles/azureendpoints",
                      + "Microsoft.Network/trafficmanagerprofiles/externalendpoints",
                      + "Microsoft.Network/trafficmanagerprofiles/nestedendpoints",
                      + "Microsoft.Network/checkTrafficManagerNameAvailability",
                      + "Microsoft.Network/checkTrafficManagerNameAvailabilityV2",
                      + "Microsoft.Network/trafficManagerUserMetricsKeys",
                      + "Microsoft.Network/trafficManagerGeographicHierarchies",
                      + "Microsoft.Network/virtualNetworks",
                      + "Microsoft.Network/virtualNetworks/taggedTrafficConsumers",
                      + "Microsoft.Network/natGateways",
                      + "Microsoft.Network/publicIPAddresses",
                      + "Microsoft.Network/internalPublicIpAddresses",
                      + "Microsoft.Network/customIpPrefixes",
                      + "Microsoft.Network/networkInterfaces",
                      + "Microsoft.Network/dscpConfigurations",
                      + "Microsoft.Network/privateEndpoints",
                      + "Microsoft.Network/privateEndpoints/privateLinkServiceProxies",
                      + "Microsoft.Network/privateEndpointRedirectMaps",
                      + "Microsoft.Network/loadBalancers",
                      + "Microsoft.Network/networkSecurityGroups",
                      + "Microsoft.Network/applicationSecurityGroups",
                      + "Microsoft.Network/serviceEndpointPolicies",
                      + "Microsoft.Network/networkIntentPolicies",
                      + "Microsoft.Network/routeTables",
                      + "Microsoft.Network/publicIPPrefixes",
                      + "Microsoft.Network/networkWatchers",
                      + "Microsoft.Network/networkWatchers/connectionMonitors",
                      + "Microsoft.Network/networkWatchers/flowLogs",
                      + "Microsoft.Network/networkWatchers/pingMeshes",
                      + "Microsoft.Network/locations",
                      + "Microsoft.Network/locations/operations",
                      + "Microsoft.Network/locations/operationResults",
                      + "Microsoft.Network/locations/CheckDnsNameAvailability",
                      + "Microsoft.Network/locations/setLoadBalancerFrontendPublicIpAddresses",
                      + "Microsoft.Network/cloudServiceSlots",
                      + "Microsoft.Network/locations/usages",
                      + "Microsoft.Network/locations/virtualNetworkAvailableEndpointServices",
                      + "Microsoft.Network/locations/availableDelegations",
                      + "Microsoft.Network/locations/serviceTags",
                      + "Microsoft.Network/locations/availablePrivateEndpointTypes",
                      + "Microsoft.Network/locations/availableServiceAliases",
                      + "Microsoft.Network/locations/checkPrivateLinkServiceVisibility",
                      + "Microsoft.Network/locations/autoApprovedPrivateLinkServices",
                      + "Microsoft.Network/locations/batchValidatePrivateEndpointsForResourceMove",
                      + "Microsoft.Network/locations/batchNotifyPrivateEndpointsForResourceMove",
                      + "Microsoft.Network/locations/supportedVirtualMachineSizes",
                      + "Microsoft.Network/locations/setAzureNetworkManagerConfiguration",
                      + "Microsoft.Network/locations/publishResources",
                      + "Microsoft.Network/locations/getAzureNetworkManagerConfiguration",
                      + "Microsoft.Network/locations/checkAcceleratedNetworkingSupport",
                      + "Microsoft.Network/locations/validateResourceOwnership",
                      + "Microsoft.Network/locations/setResourceOwnership",
                      + "Microsoft.Network/locations/effectiveResourceOwnership",
                      + "Microsoft.Network/operations",
                      + "Microsoft.Network/virtualNetworkTaps",
                      + "Microsoft.Network/privateLinkServices",
                      + "Microsoft.Network/locations/privateLinkServices",
                      + "Microsoft.Network/ddosProtectionPlans",
                      + "Microsoft.Network/networkProfiles",
                      + "Microsoft.Network/locations/bareMetalTenants",
                      + "Microsoft.Network/ipAllocations",
                      + "Microsoft.Network/locations/serviceTagDetails",
                      + "Microsoft.Network/locations/dataTasks",
                      + "Microsoft.Network/locations/startPacketTagging",
                      + "Microsoft.Network/locations/deletePacketTagging",
                      + "Microsoft.Network/locations/getPacketTagging",
                      + "Microsoft.Network/locations/rnmEffectiveRouteTable",
                      + "Microsoft.Network/locations/rnmEffectiveNetworkSecurityGroups",
                      + "Microsoft.Network/virtualNetworks/listNetworkManagerEffectiveConnectivityConfigurations",
                      + "Microsoft.Network/virtualNetworks/listNetworkManagerEffectiveSecurityAdminRules",
                      + "Microsoft.Storage/locations/ActionsRPOperationStatuses",
                      + "Microsoft.Storage/storageAccounts/reports",
                      + "Microsoft.Storage/storageAccounts/storageTaskAssignments",
                      + "Microsoft.Storage/storageAccounts/storageTaskAssignments/reports",
                      + "Microsoft.Storage/storageAccounts/encryptionScopes",
                      + "Microsoft.Storage/deletedAccounts",
                      + "Microsoft.Storage/locations/deletedAccounts",
                      + "Microsoft.Storage/storageAccounts",
                      + "Microsoft.Storage/storageTasks",
                      + "Microsoft.Storage/operations",
                      + "Microsoft.Storage/locations/asyncoperations",
                      + "Microsoft.Storage/storageAccounts/listAccountSas",
                      + "Microsoft.Storage/storageAccounts/listServiceSas",
                      + "Microsoft.Storage/storageAccounts/blobServices",
                      + "Microsoft.Storage/storageAccounts/tableServices",
                      + "Microsoft.Storage/storageAccounts/queueServices",
                      + "Microsoft.Storage/storageAccounts/fileServices",
                      + "Microsoft.Storage/locations",
                      + "Microsoft.Storage/locations/usages",
                      + "Microsoft.Storage/locations/deleteVirtualNetworkOrSubnets",
                      + "Microsoft.Storage/usages",
                      + "Microsoft.Storage/checkNameAvailability",
                      + "Microsoft.Storage/locations/checkNameAvailability",
                      + "Microsoft.Storage/storageAccounts/services",
                      + "Microsoft.Storage/storageAccounts/services/metricDefinitions",
                      + "Microsoft.Storage/locations/notifyNetworkSecurityPerimeterUpdatesAvailable",
                    ]
                }
            }
        )
      + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a08ec900-254a-4555-9bf5-e42af04b5c5c"

      + non_compliance_message {
          + content = "Please deploy an allowed Azure Service. This resource type is denied."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_allowed_regions_resourcegroups will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_allowed_regions_resourcegroups" {
      + description          = "This policy assignment specifies the allowed Azure Regions for resource groups."
      + display_name         = "Allowed Regions Resource Groups"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "General"
              + version  = "1.0.0"
            }
        )
      + name                 = "Allowed-Regions-RG"
      + not_scopes           = []
      + parameters           = jsonencode(
            {
              + listOfAllowedLocations = {
                  + value = [
                      + "westeurope",
                    ]
                }
            }
        )
      + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e765b5de-1225-4ba3-bd56-1ac6695af988"

      + non_compliance_message {
          + content = "Please deploy the Resource Group into an approved Azure Region. The selected region is not approved."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_allowed_regions_resources will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_allowed_regions_resources" {
      + description          = "This policy assignment specifies the allowed Azure Regions for resources."
      + display_name         = "Allowed Regions Resources"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "General"
              + version  = "1.0.0"
            }
        )
      + name                 = "Allowed-Regions-Resource"
      + not_scopes           = []
      + parameters           = jsonencode(
            {
              + effect                 = {
                  + value = "Deny"
                }
              + listOfAllowedLocations = {
                  + value = [
                      + "westeurope",
                    ]
                }
            }
        )
      + policy_definition_id = (known after apply)

      + non_compliance_message {
          + content = "Please deploy the Resource into an approved Azure Region. The selected region is not approved."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_denied_azure_services[0] will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_denied_azure_services" {
      + description          = "This policy assignment specifies the denied Azure Services for Azure Service Enablement."
      + display_name         = "Denied Azure Services"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "General"
              + version  = "2.0.0"
            }
        )
      + name                 = "Denied-Azure-Services"
      + not_scopes           = []
      + parameters           = jsonencode(
            {
              + effect                        = {
                  + value = "Deny"
                }
              + listOfResourceTypesNotAllowed = {
                  + value = [
                      + "Microsoft.Network/azureFirewalls",
                      + "Microsoft.Network/privateDnsZones",
                    ]
                }
            }
        )
      + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"

      + non_compliance_message {
          + content = "Please deploy an allowed Azure Service. This resource type is denied."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_geo_key_vault will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_geo_key_vault" {
      + description          = "This policy initiative is a group of policies that ensures Key Vault is compliant per regulated Landing Zones"
      + display_name         = "Enforce secure-by-default Key Vault for regulated industries"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "Key Vault"
              + version  = "1.0.0"
            }
        )
      + name                 = "Compliant-Key-Vault"
      + not_scopes           = []
      + parameters           = (known after apply)
      + policy_definition_id = (known after apply)

      + identity {
          + identity_ids = (known after apply)
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "UserAssigned"
        }

      + non_compliance_message {
          + content = "Please provide a valid Key Vault resource definition."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_geo_log_analytics will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_geo_log_analytics" {
      + description          = "This policy initiative is a group of policies that ensures logging is compliant per regulated Landing Zones."
      + display_name         = "Enforce secure-by-default logging for regulated industries"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = (known after apply)
      + name                 = "Compliant-Logging-EMEA"
      + not_scopes           = []
      + parameters           = (known after apply)
      + policy_definition_id = "/providers/Microsoft.Authorization/policySetDefinitions/0884adba-2312-4468-abeb-5422caed1038"

      + identity {
          + identity_ids = (known after apply)
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "UserAssigned"
        }

      + non_compliance_message {
          + content = "Diagnostic settings are not reporting to the correct Log Analytics workspace."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_management_group_policy_assignment.management_group_policy_assignment_geo_network will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_geo_network" {
      + description          = "This policy initiative is a group of policies that ensures Network and Networking services are compliant per regulated Landing Zones."
      + display_name         = "Enforce secure-by-default Network and Networking services for regulated industries"
      + enforce              = true
      + id                   = (known after apply)
      + location             = "westeurope"
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + name                 = "Compliant-Network"
      + not_scopes           = []
      + parameters           = (known after apply)
      + policy_definition_id = (known after apply)

      + identity {
          + identity_ids = (known after apply)
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "UserAssigned"
        }

      + non_compliance_message {
          + content = "Please provide a valid Network resource definition."
        }
    }

  # module.file_new_geo["EMEA"].azurerm_monitor_diagnostic_setting.diagnostic_setting_network_manager will be created
  + resource "azurerm_monitor_diagnostic_setting" "diagnostic_setting_network_manager" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "terraform-managed-diagnostics-EMEA"
      + target_resource_id             = (known after apply)

      + enabled_log (known after apply)

      + enabled_metric (known after apply)

      + metric (known after apply)
    }

  # module.file_new_geo["EMEA"].azurerm_resource_group.resource_group_identity will be created
  + resource "azurerm_resource_group" "resource_group_identity" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-identity-adia-emea"
    }

  # module.file_new_geo["EMEA"].azurerm_resource_group.resource_group_logs will be created
  + resource "azurerm_resource_group" "resource_group_logs" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-logs-adia-emea"
    }

  # module.file_new_geo["EMEA"].azurerm_role_assignment.uai_role_assignment_contributor will be created
  + resource "azurerm_role_assignment" "uai_role_assignment_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Role assignment required for deployIfNotExists policies."
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = "ServicePrincipal"
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.file_new_geo["EMEA"].time_sleep.sleep_management_groups will be created
  + resource "time_sleep" "sleep_management_groups" {
      + create_duration = "120s"
      + id              = (known after apply)
    }

  # module.file_new_geo["EMEA"].time_sleep.wait_for_management_group_permissions will be created
  + resource "time_sleep" "wait_for_management_group_permissions" {
      + create_duration = "60s"
      + id              = (known after apply)
    }

  # module.file_new_region["westeurope"].data.azurerm_monitor_diagnostic_categories.diagnostic_categories_storage_account will be read during apply
  # (config refers to values not yet known)
 <= data "azurerm_monitor_diagnostic_categories" "diagnostic_categories_storage_account" {
      + id                  = (known after apply)
      + log_category_groups = (known after apply)
      + log_category_types  = (known after apply)
      + metrics             = (known after apply)
      + resource_id         = (known after apply)
    }

  # module.file_new_region["westeurope"].azapi_resource.storage_account will be created
  + resource "azapi_resource" "storage_account" {
      + body                      = {
          + kind       = "StorageV2"
          + properties = {
              + accessTier                   = "Hot"
              + allowBlobPublicAccess        = false
              + allowCrossTenantReplication  = false
              + allowSharedKeyAccess         = false
              + allowedCopyScope             = "AAD"
              + defaultToOAuthAuthentication = true
              + encryption                   = {
                  + keySource = "Microsoft.Storage"
                  + services  = {
                      + blob  = {
                          + keyType = "Account"
                        }
                      + file  = {
                          + keyType = "Account"
                        }
                      + queue = {
                          + keyType = "Account"
                        }
                      + table = {
                          + keyType = "Account"
                        }
                    }
                }
              + isHnsEnabled                 = false
              + isLocalUserEnabled           = false
              + isNfsV3Enabled               = false
              + isSftpEnabled                = false
              + minimumTlsVersion            = "TLS1_2"
              + networkAcls                  = {
                  + bypass              = "AzureServices"
                  + defaultAction       = "Deny"
                  + ipRules             = []
                  + resourceAccessRules = []
                  + virtualNetworkRules = []
                }
              + publicNetworkAccess          = "Enabled"
              + sasPolicy                    = {
                  + expirationAction    = "Log"
                  + sasExpirationPeriod = "1.00:00:00"
                }
              + supportsHttpsTrafficOnly     = true
            }
          + sku        = {
              + name = "Standard_LRS"
            }
        }
      + id                        = (known after apply)
      + ignore_casing             = false
      + ignore_missing_property   = false
      + ignore_null_property      = false
      + location                  = "westeurope"
      + locks                     = []
      + name                      = (known after apply)
      + output                    = (known after apply)
      + parent_id                 = (known after apply)
      + response_export_values    = [
          + "*",
        ]
      + schema_validation_enabled = true
      + sensitive_body            = (write-only attribute)
      + tags                      = {}
      + type                      = "Microsoft.Storage/storageAccounts@2023-05-01"
    }

  # module.file_new_region["westeurope"].azurerm_monitor_diagnostic_setting.diagnostic_setting_storage will be created
  + resource "azurerm_monitor_diagnostic_setting" "diagnostic_setting_storage" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "terraform-managed-diagnostics"
      + target_resource_id             = (known after apply)

      + enabled_log (known after apply)

      + enabled_metric (known after apply)

      + metric (known after apply)
    }

  # module.file_new_region["westeurope"].azurerm_resource_group.resource_group_logs will be created
  + resource "azurerm_resource_group" "resource_group_logs" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-logs-adia-westeurope"
    }

  # module.file_new_region["westeurope"].random_id.unique_suffix will be created
  + resource "random_id" "unique_suffix" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 4
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.file_new_tenant.azurerm_management_group.management_group_connectivity will be created
  + resource "azurerm_management_group" "management_group_connectivity" {
      + display_name               = "Connectivity"
      + id                         = (known after apply)
      + name                       = "adia-connectivity"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_decomissioned will be created
  + resource "azurerm_management_group" "management_group_decomissioned" {
      + display_name               = "Decommissioned"
      + id                         = (known after apply)
      + name                       = "adia-decommissioned"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_landing_zones will be created
  + resource "azurerm_management_group" "management_group_landing_zones" {
      + display_name               = "Landing Zones"
      + id                         = (known after apply)
      + name                       = "adia-landingzones"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_management will be created
  + resource "azurerm_management_group" "management_group_management" {
      + display_name               = "Management"
      + id                         = (known after apply)
      + name                       = "adia-management"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_platform will be created
  + resource "azurerm_management_group" "management_group_platform" {
      + display_name               = "Platform"
      + id                         = (known after apply)
      + name                       = "adia-platform"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_playground will be created
  + resource "azurerm_management_group" "management_group_playground" {
      + display_name               = "Playground"
      + id                         = (known after apply)
      + name                       = "adia-playground"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "20m"
          + delete = "15m"
          + read   = "10m"
          + update = "15m"
        }
    }

  # module.file_new_tenant.azurerm_management_group.management_group_root will be created
  + resource "azurerm_management_group" "management_group_root" {
      + display_name               = "ADIAv24"
      + id                         = (known after apply)
      + name                       = "adia-adiav24"
      + parent_management_group_id = (known after apply)
      + subscription_ids           = (known after apply)
      + tenant_scoped_id           = (known after apply)

      + timeouts {
          + create = "30m"
          + delete = "20m"
          + read   = "10m"
          + update = "20m"
        }
    }

  # module.file_new_tenant.azurerm_management_group_policy_assignment.management_group_policy_assignment_avnm_global_hubs["dev"] will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_avnm_global_hubs" {
      + description          = "This policy assignment ensures global hub virtual networks are added to the global hubs network manager network group"
      + display_name         = "Azure Virtual Network Manager global hubs (dev)"
      + enforce              = true
      + id                   = (known after apply)
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "Azure Virtual Network Manager"
              + version  = "1.0.0"
            }
        )
      + name                 = "avnm-global-hubs-dev"
      + not_scopes           = []
      + policy_definition_id = (known after apply)
    }

  # module.file_new_tenant.azurerm_management_group_policy_assignment.management_group_policy_assignment_avnm_spoke_vnets will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_avnm_spoke_vnets" {
      + description          = "This policy assignment ensures spoke VNets are added to their corresponding Network Manager network group"
      + display_name         = "Azure Virtual Network Manager spoke VNets (adia)"
      + enforce              = true
      + id                   = (known after apply)
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "Azure Virtual Network Manager"
              + version  = "1.0.0"
            }
        )
      + name                 = "avnm-spoke-vnets"
      + not_scopes           = []
      + policy_definition_id = (known after apply)
    }

  # module.file_new_tenant.azurerm_management_group_policy_assignment.management_group_policy_assignment_mcsb will be created
  + resource "azurerm_management_group_policy_assignment" "management_group_policy_assignment_mcsb" {
      + description          = "This policy initiative is a group of policies that provides all-up compliance view of the Microsoft Cloud Security Benchmark (MCSB) for Azure."
      + display_name         = "Microsoft Cloud Security Benchmark Initiative"
      + enforce              = true
      + id                   = (known after apply)
      + management_group_id  = (known after apply)
      + metadata             = jsonencode(
            {
              + category = "Security Center"
              + version  = "57.43.0"
            }
        )
      + name                 = "cloud-security-benchmark"
      + not_scopes           = []
      + parameters           = jsonencode(
            {
              + autoProvisioningOfTheLogAnalyticsAgentShouldBeEnabledOnYourSubscriptionMonitoringEffect = {
                  + value = "Disabled"
                }
              + identityDesignateLessThanOwnersMonitoringEffect                                         = {
                  + value = "Disabled"
                }
              + sqlServersVirtualMachinesAdvancedDataSecurityMonitoringEffect                           = {
                  + value = "Disabled"
                }
              + subscriptionsShouldHaveAContactEmailAddressForSecurityIssuesMonitoringEffect            = {
                  + value = "Disabled"
                }
              + useRbacRulesMonitoringEffect                                                            = {
                  + value = "Disabled"
                }
              + vnetEnableDDoSProtectionMonitoringEffect                                                = {
                  + value = "Disabled"
                }
            }
        )
      + policy_definition_id = "/providers/microsoft.authorization/policysetdefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8"
    }

  # module.file_new_tenant.azurerm_management_group_policy_exemption.management_group_policy_exemption_mcsb will be created
  + resource "azurerm_management_group_policy_exemption" "management_group_policy_exemption_mcsb" {
      + description                     = "This policy exemption disables policies that are in conflict with platform capabilities and requirements."
      + display_name                    = "Microsoft Cloud Security Benchmark Exemption"
      + exemption_category              = "Waiver"
      + id                              = (known after apply)
      + management_group_id             = (known after apply)
      + metadata                        = jsonencode(
            {
              + category = "Security Center"
              + version  = "57.43.0"
            }
        )
      + name                            = "cloud-security-benchmark"
      + policy_assignment_id            = (known after apply)
      + policy_definition_reference_ids = [
          + "storageAccountShouldUseAPrivateLinkConnectionMonitoringEffect",
          + "privateEndpointShouldBeConfiguredForKeyVaultMonitoringEffect",
        ]
    }

  # module.file_new_tenant.azurerm_management_group_subscription_association.connectivity_subscriptions["c8e99e94-859c-46af-9907-a20b56753a2e"] will be created
  + resource "azurerm_management_group_subscription_association" "connectivity_subscriptions" {
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + subscription_id     = "/subscriptions/c8e99e94-859c-46af-9907-a20b56753a2e"
    }

  # module.file_new_tenant.azurerm_management_group_subscription_association.global_platform_subscription will be created
  + resource "azurerm_management_group_subscription_association" "global_platform_subscription" {
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + subscription_id     = "/subscriptions/4f007f2c-5c8d-4a59-8f0c-9d194c1ed152"
    }

  # module.file_new_tenant.azurerm_management_group_subscription_association.management_subscriptions["fbbce6e6-ff30-4bca-8895-c1d306b5de7f"] will be created
  + resource "azurerm_management_group_subscription_association" "management_subscriptions" {
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + subscription_id     = "/subscriptions/fbbce6e6-ff30-4bca-8895-c1d306b5de7f"
    }

  # module.file_new_tenant.azurerm_network_manager.network_manager will be created
  + resource "azurerm_network_manager" "network_manager" {
      + cross_tenant_scopes = (known after apply)
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "network-manager-adia"
      + resource_group_name = "rg-network-manager-adia"
      + scope_accesses      = [
          + "Connectivity",
          + "SecurityAdmin",
        ]

      + scope {
          + management_group_ids = (known after apply)
        }
    }

  # module.file_new_tenant.azurerm_network_manager_admin_rule.network_manager_admin_rule_deny_rdp_inbound will be created
  + resource "azurerm_network_manager_admin_rule" "network_manager_admin_rule_deny_rdp_inbound" {
      + action                   = "Deny"
      + admin_rule_collection_id = (known after apply)
      + description              = "Deny RDP inbound connections from the internet"
      + destination_port_ranges  = [
          + "3389",
        ]
      + direction                = "Inbound"
      + id                       = (known after apply)
      + name                     = "deny-rdp-inbound-adia"
      + priority                 = 510
      + protocol                 = "Tcp"
      + source_port_ranges       = [
          + "0-65535",
        ]

      + destination {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }

      + source {
          + address_prefix      = "Internet"
          + address_prefix_type = "ServiceTag"
        }

      + timeouts {
          + delete = "60m"
        }
    }

  # module.file_new_tenant.azurerm_network_manager_admin_rule.network_manager_admin_rule_deny_ssh_inbound will be created
  + resource "azurerm_network_manager_admin_rule" "network_manager_admin_rule_deny_ssh_inbound" {
      + action                   = "Deny"
      + admin_rule_collection_id = (known after apply)
      + description              = "Deny SSH inbound connections from the internet"
      + destination_port_ranges  = [
          + "22",
        ]
      + direction                = "Inbound"
      + id                       = (known after apply)
      + name                     = "deny-ssh-inbound-adia"
      + priority                 = 500
      + protocol                 = "Tcp"
      + source_port_ranges       = [
          + "0-65535",
        ]

      + destination {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }

      + source {
          + address_prefix      = "Internet"
          + address_prefix_type = "ServiceTag"
        }

      + timeouts {
          + delete = "60m"
        }
    }

  # module.file_new_tenant.azurerm_network_manager_admin_rule_collection.network_manager_admin_rule_collection will be created
  + resource "azurerm_network_manager_admin_rule_collection" "network_manager_admin_rule_collection" {
      + description                     = "Network Manager Admin Rules Collection for spoke VNets"
      + id                              = (known after apply)
      + name                            = "spoke-vnets-admin-rule-collection-adia"
      + network_group_ids               = (known after apply)
      + security_admin_configuration_id = (known after apply)
    }

  # module.file_new_tenant.azurerm_network_manager_connectivity_configuration.global_hub_vnets_mesh["dev"] will be created
  + resource "azurerm_network_manager_connectivity_configuration" "global_hub_vnets_mesh" {
      + connectivity_topology           = "Mesh"
      + delete_existing_peering_enabled = true
      + description                     = "Global Hub VNets mesh connectivity configuration (adia)"
      + global_mesh_enabled             = true
      + id                              = (known after apply)
      + name                            = "global-hub-vnets-mesh-connectivity-configuration-adia-dev"
      + network_manager_id              = (known after apply)

      + applies_to_group {
          + group_connectivity = "DirectlyConnected"
          + network_group_id   = (known after apply)
          + use_hub_gateway    = false
        }
    }

  # module.file_new_tenant.azurerm_network_manager_network_group.global_hub_vnets["dev"] will be created
  + resource "azurerm_network_manager_network_group" "global_hub_vnets" {
      + id                 = (known after apply)
      + name               = "global-hubs-network-group-adia-dev"
      + network_manager_id = (known after apply)
    }

  # module.file_new_tenant.azurerm_network_manager_network_group.network_manager_network_group_spoke_vnets will be created
  + resource "azurerm_network_manager_network_group" "network_manager_network_group_spoke_vnets" {
      + description        = "Network Group for spoke VNets (adia)"
      + id                 = (known after apply)
      + name               = "spoke-vnets-network-group-adia"
      + network_manager_id = (known after apply)
    }

  # module.file_new_tenant.azurerm_network_manager_security_admin_configuration.network_manager_security_admin_configuration_spoke_vnets will be created
  + resource "azurerm_network_manager_security_admin_configuration" "network_manager_security_admin_configuration_spoke_vnets" {
      + apply_on_network_intent_policy_based_services = [
          + "AllowRulesOnly",
        ]
      + description                                   = "Security Admin Configuration for spoke VNets (adia)"
      + id                                            = (known after apply)
      + name                                          = "spoke-vnets-security-admin-rules-adia"
      + network_manager_id                            = (known after apply)
    }

  # module.file_new_tenant.azurerm_policy_definition.network_manager_global_hub_vnets_policy_definition["dev"] will be created
  + resource "azurerm_policy_definition" "network_manager_global_hub_vnets_policy_definition" {
      + display_name        = "Policy Definition for global hub VNets network group (dev)"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = <<-EOT
            {
                  "category": "Azure Virtual Network Manager",
                  "version": "1.0.0"
                }
        EOT
      + mode                = "Microsoft.Network.Data"
      + name                = "network-manager-global-hub-vnets-policy-dev"
      + policy_rule         = (known after apply)
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.azurerm_policy_definition.network_manager_spoke_vnets_policy_definition will be created
  + resource "azurerm_policy_definition" "network_manager_spoke_vnets_policy_definition" {
      + display_name        = "Policy definition for spokes VNets network group (adia)"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = <<-EOT
            {
                  "category": "Azure Virtual Network Manager",
                  "version": "1.0.0"
                }
        EOT
      + mode                = "Microsoft.Network.Data"
      + name                = "network-manager-spoke-vnets-policy"
      + policy_rule         = (known after apply)
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink-global.wvd.microsoft.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink-global.wvd.microsoft.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.adf.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.adf.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.afs.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.afs.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.agentsvc.azure-automation.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.agentsvc.azure-automation.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.analysis.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.analysis.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.analytics.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.analytics.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.api.adu.microsoft.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.api.adu.microsoft.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.api.azureml.ms"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.api.azureml.ms"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.attest.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.attest.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azconfig.io"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azconfig.io"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azure-api.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azure-api.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azure-automation.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azure-automation.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azure-devices-provisioning.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azure-devices-provisioning.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azure-devices.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azure-devices.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azurecr.io"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azurecr.io"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azuredatabricks.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azuredatabricks.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azurehdinsight.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azurehdinsight.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azureiotcentral.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azureiotcentral.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azurestaticapps.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azurestaticapps.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azuresynapse.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azuresynapse.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.azurewebsites.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azurewebsites.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.blob.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.blob.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.cassandra.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.cassandra.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.cognitiveservices.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.cognitiveservices.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.database.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.database.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.datafactory.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.datafactory.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.dev.azuresynapse.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.dev.azuresynapse.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.dfs.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.dfs.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.dicom.azurehealthcareapis.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.dicom.azurehealthcareapis.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.digitaltwins.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.digitaltwins.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.directline.botframework.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.directline.botframework.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.documents.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.documents.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.dp.kubernetesconfiguration.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.dp.kubernetesconfiguration.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.eventgrid.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.eventgrid.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.fhir.azurehealthcareapis.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.fhir.azurehealthcareapis.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.file.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.file.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.grafana.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.grafana.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.gremlin.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.gremlin.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.guestconfiguration.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.guestconfiguration.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.his.arc.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.his.arc.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.managedhsm.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.managedhsm.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.mariadb.database.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.mariadb.database.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.media.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.media.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.mongo.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.mongo.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.monitor.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.monitor.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.mysql.database.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.mysql.database.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.notebooks.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.notebooks.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.ods.opinsights.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.ods.opinsights.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.oms.opinsights.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.oms.opinsights.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.openai.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.openai.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.pbidedicated.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.pbidedicated.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.postgres.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.postgres.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.postgres.database.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.postgres.database.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.prod.migration.windowsazure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.prod.migration.windowsazure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.purview.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.purview.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.purviewstudio.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.purviewstudio.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.queue.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.queue.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.redis.cache.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.redis.cache.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.redisenterprise.cache.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.redisenterprise.cache.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.search.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.search.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.service.signalr.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.service.signalr.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.servicebus.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.servicebus.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.siterecovery.windowsazure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.siterecovery.windowsazure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.sql.azuresynapse.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.sql.azuresynapse.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.table.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.table.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.table.cosmos.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.table.cosmos.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.tip1.powerquery.microsoft.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.tip1.powerquery.microsoft.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.token.botframework.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.token.botframework.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.vaultcore.azure.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.vaultcore.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.web.core.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.web.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.westeurope.azmk8s.io"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.westeurope.azmk8s.io"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.westeurope.backup.windowsazure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.westeurope.backup.windowsazure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.westeurope.kusto.windows.net"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.westeurope.kusto.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.workspace.azurehealthcareapis.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.workspace.azurehealthcareapis.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-privatelink.wvd.microsoft.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.wvd.microsoft.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-westeurope.data.privatelink.azurecr.io"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "westeurope.data.privatelink.azurecr.io"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-westeurope.privatelink.batch.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "westeurope.privatelink.batch.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_private_dns_zone.private_dns_zone["dev-westeurope.service.privatelink.batch.azure.com"] will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "westeurope.service.privatelink.batch.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-privatedns-adia-dev"

      + soa_record (known after apply)
    }

  # module.file_new_tenant.azurerm_resource_group.resource_group_network_manager will be created
  + resource "azurerm_resource_group" "resource_group_network_manager" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-network-manager-adia"
    }

  # module.file_new_tenant.azurerm_resource_group.resource_group_private_dns["dev"] will be created
  + resource "azurerm_resource_group" "resource_group_private_dns" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-privatedns-adia-dev"
    }

  # module.file_new_tenant.azurerm_role_assignment.management_group_owner will be created
  + resource "azurerm_role_assignment" "management_group_owner" {
      + condition_version                = (known after apply)
      + description                      = "Role assignment required for management group owner."
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "159cc5f3-3e12-4bc8-b331-39d8bd17cce7"
      + principal_type                   = "ServicePrincipal"
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.file_new_tenant.azurerm_role_assignment.management_group_policy_contributor will be created
  + resource "azurerm_role_assignment" "management_group_policy_contributor" {
      + condition_version                = (known after apply)
      + description                      = "Role assignment required for policy assignment operations."
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "159cc5f3-3e12-4bc8-b331-39d8bd17cce7"
      + principal_type                   = "ServicePrincipal"
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Resource Policy Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.file_new_tenant.azurerm_role_assignment.management_group_policy_contributor_landing_zones will be created
  + resource "azurerm_role_assignment" "management_group_policy_contributor_landing_zones" {
      + condition_version                = (known after apply)
      + description                      = "Role assignment required for policy assignment operations on landing zones."
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = "159cc5f3-3e12-4bc8-b331-39d8bd17cce7"
      + principal_type                   = "ServicePrincipal"
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Resource Policy Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.Consumption"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.Insights"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.Network"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.PolicyInsights"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.Security"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.null_resource.provider_registration_mg["Microsoft.SecurityInsights"] will be created
  + resource "null_resource" "provider_registration_mg" {
      + id       = (known after apply)
      + triggers = {}
    }

  # module.file_new_tenant.time_sleep.sleep_after_root_mg will be created
  + resource "time_sleep" "sleep_after_root_mg" {
      + create_duration = "180s"
      + id              = (known after apply)
    }

  # module.file_new_tenant.time_sleep.sleep_management_groups will be created
  + resource "time_sleep" "sleep_management_groups" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.file_new_tenant.time_sleep.sleep_network_manager_security_admin_configurations will be created
  + resource "time_sleep" "sleep_network_manager_security_admin_configurations" {
      + create_duration = "1s"
      + id              = (known after apply)
      + triggers        = {}
    }

  # module.file_new_tenant.time_sleep.sleep_platform_management_group will be created
  + resource "time_sleep" "sleep_platform_management_group" {
      + create_duration = "60s"
      + id              = (known after apply)
    }

  # module.file_new_tenant.time_sleep.sleep_provider_registration_mg will be created
  + resource "time_sleep" "sleep_provider_registration_mg" {
      + create_duration = "120s"
      + id              = (known after apply)
    }

  # module.virtual_wan[0].azapi_resource.routing_intent["westeurope-dev"] will be created
  + resource "azapi_resource" "routing_intent" {
      + body                      = {
          + properties = {
              + routingPolicies = [
                  + {
                      + destinations = [
                          + "Internet",
                        ]
                      + name         = "InternetTraffic"
                      + nextHop      = (known after apply)
                    },
                  + {
                      + destinations = [
                          + "PrivateTraffic",
                        ]
                      + name         = "PrivateTraffic"
                      + nextHop      = (known after apply)
                    },
                ]
            }
        }
      + id                        = (known after apply)
      + ignore_casing             = false
      + ignore_missing_property   = true
      + ignore_null_property      = false
      + location                  = (known after apply)
      + name                      = "routing-intent-westeurope-dev"
      + output                    = (known after apply)
      + parent_id                 = (known after apply)
      + schema_validation_enabled = true
      + sensitive_body            = (write-only attribute)
      + tags                      = (known after apply)
      + type                      = "Microsoft.Network/virtualHubs/routingIntent@2023-11-01"
    }

  # module.virtual_wan[0].azurerm_firewall.hub_firewall["westeurope-dev"] will be created
  + resource "azurerm_firewall" "hub_firewall" {
      + dns_proxy_enabled   = (known after apply)
      + firewall_policy_id  = (known after apply)
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "azfw-westeurope-dev-ADIA"
      + resource_group_name = "rg-network-vwan-ADIA"
      + sku_name            = "AZFW_Hub"
      + sku_tier            = "Basic"
      + tags                = {
          + "Environment" = "dev"
          + "Region"      = "westeurope"
        }
      + threat_intel_mode   = (known after apply)
      + zones               = [
          + "1",
          + "2",
          + "3",
        ]

      + virtual_hub {
          + private_ip_address  = (known after apply)
          + public_ip_addresses = (known after apply)
          + public_ip_count     = 1
          + virtual_hub_id      = (known after apply)
        }
    }

  # module.virtual_wan[0].azurerm_firewall_policy.policy["dev"] will be created
  + resource "azurerm_firewall_policy" "policy" {
      + child_policies           = (known after apply)
      + firewalls                = (known after apply)
      + id                       = (known after apply)
      + location                 = "westeurope"
      + name                     = "fwpolicy-dev-ADIA"
      + resource_group_name      = "rg-network-vwan-ADIA"
      + rule_collection_groups   = (known after apply)
      + sku                      = "Basic"
      + tags                     = {
          + "Environment" = "dev"
        }
      + threat_intelligence_mode = "Alert"
    }

  # module.virtual_wan[0].azurerm_network_manager_admin_rule.block_nonprod_to_prod[0] will be created
  + resource "azurerm_network_manager_admin_rule" "block_nonprod_to_prod" {
      + action                   = "Deny"
      + admin_rule_collection_id = (known after apply)
      + description              = "Block all traffic from Non-Production to Production environments at network edge"
      + destination_port_ranges  = [
          + "0-65535",
        ]
      + direction                = "Outbound"
      + id                       = (known after apply)
      + name                     = "deny-nonprod-to-prod-ADIA"
      + priority                 = 101
      + protocol                 = "Any"
      + source_port_ranges       = [
          + "0-65535",
        ]

      + destination {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }

      + source {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }
    }

  # module.virtual_wan[0].azurerm_network_manager_admin_rule.block_prod_to_nonprod[0] will be created
  + resource "azurerm_network_manager_admin_rule" "block_prod_to_nonprod" {
      + action                   = "Deny"
      + admin_rule_collection_id = (known after apply)
      + description              = "Block all traffic from Production to Non-Production environments at network edge"
      + destination_port_ranges  = [
          + "0-65535",
        ]
      + direction                = "Outbound"
      + id                       = (known after apply)
      + name                     = "deny-prod-to-nonprod-ADIA"
      + priority                 = 100
      + protocol                 = "Any"
      + source_port_ranges       = [
          + "0-65535",
        ]

      + destination {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }

      + source {
          + address_prefix      = "*"
          + address_prefix_type = "IPPrefix"
        }
    }

  # module.virtual_wan[0].azurerm_network_manager_admin_rule_collection.isolation_rules[0] will be created
  + resource "azurerm_network_manager_admin_rule_collection" "isolation_rules" {
      + description                     = "Rules for Production to Non-Production isolation"
      + id                              = (known after apply)
      + name                            = "prod-nonprod-isolation-ADIA"
      + network_group_ids               = (known after apply)
      + security_admin_configuration_id = (known after apply)
    }

  # module.virtual_wan[0].azurerm_network_manager_network_group.nonprod_network_group[0] will be created
  + resource "azurerm_network_manager_network_group" "nonprod_network_group" {
      + description        = "Network group for Non-Production Virtual WAN Hubs"
      + id                 = (known after apply)
      + name               = "nonprod-hubs-network-group-ADIA"
      + network_manager_id = (known after apply)
    }

  # module.virtual_wan[0].azurerm_network_manager_network_group.prod_network_group[0] will be created
  + resource "azurerm_network_manager_network_group" "prod_network_group" {
      + description        = "Network group for Production Virtual WAN Hubs"
      + id                 = (known after apply)
      + name               = "prod-hubs-network-group-ADIA"
      + network_manager_id = (known after apply)
    }

  # module.virtual_wan[0].azurerm_network_manager_security_admin_configuration.global_segmentation[0] will be created
  + resource "azurerm_network_manager_security_admin_configuration" "global_segmentation" {
      + apply_on_network_intent_policy_based_services = [
          + "AllowRulesOnly",
        ]
      + description                                   = "Global segmentation policy for ADIA multi-region architecture - blocks prod-to-nonprod traffic at network edge"
      + id                                            = (known after apply)
      + name                                          = "global-segmentation-policy-ADIA"
      + network_manager_id                            = (known after apply)
    }

  # module.virtual_wan[0].azurerm_virtual_hub.vhub["westeurope-dev"] will be created
  + resource "azurerm_virtual_hub" "vhub" {
      + address_prefix                         = "10.0.4.0/23"
      + branch_to_branch_traffic_enabled       = false
      + default_route_table_id                 = (known after apply)
      + hub_routing_preference                 = "ASPath"
      + id                                     = (known after apply)
      + location                               = "westeurope"
      + name                                   = "vhub-westeurope-dev-ADIA"
      + resource_group_name                    = "rg-network-vwan-ADIA"
      + sku                                    = "Standard"
      + tags                                   = {
          + "Environment" = "dev"
          + "Region"      = "westeurope"
        }
      + virtual_router_asn                     = (known after apply)
      + virtual_router_auto_scale_min_capacity = 2
      + virtual_router_ips                     = (known after apply)
      + virtual_wan_id                         = (known after apply)
    }

  # module.virtual_wan[0].azurerm_virtual_wan.vwan will be created
  + resource "azurerm_virtual_wan" "vwan" {
      + allow_branch_to_branch_traffic    = true
      + disable_vpn_encryption            = false
      + id                                = (known after apply)
      + location                          = "westeurope"
      + name                              = "vwan-ADIA"
      + office365_local_breakout_category = "OptimizeAndAllow"
      + resource_group_name               = "rg-network-vwan-ADIA"
      + type                              = "Standard"
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AISearch/AzurePolicyDefinitions/Dine-Diagnostics-AISearch.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for AI Search to stream to a Log Analytics workspace when any Open Ai which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled."
      + display_name        = "Deploy Diagnostic Settings for AI Search to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Search"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-AISearch"
      + parameters          = jsonencode(
            {
              + effect       = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + profileName  = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Search/searchServices"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location     = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + profileName  = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location     = {
                                          + type = "String"
                                        }
                                      + logAnalytics = {
                                          + type = "String"
                                        }
                                      + profileName  = {
                                          + type = "String"
                                        }
                                      + resourceName = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Search/searchServices/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/APIM/AzurePolicyDefinitions/Deny-APIM-TLS.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure API Management service should use TLS version 1.2"
      + display_name        = "API Management services should use TLS version 1.2"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "API Management"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-APIM-TLS"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.ApiManagement/service"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + greater = 0
                                  + value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":\"true\"')]"
                                },
                              + {
                                  + greater = 0
                                  + value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":true')]"
                                },
                              + {
                                  + greater = 0
                                  + value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":\"true\"')]"
                                },
                              + {
                                  + greater = 0
                                  + value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":true')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/APIM/AzurePolicyDefinitions/Deny-APIM-without-Vnet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Virtual Network deployment provides enhanced security, isolation and allows you to place your API Management service in a non-internet routable network that you control access to. These networks can then be connected to your on-premises networks using various VPN technologies, which enables access to your backend services within the network and/or on-premises. The developer portal and API gateway, can be configured to be accessible either from the Internet or only within the virtual network."
      + display_name        = "API Management services should use a virtual network"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "API Management"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-APIM-WithOutVnet"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + evaluatedSkuNames = {
                  + allowedValues = [
                      + "Developer",
                      + "Basic",
                      + "Standard",
                      + "Premium",
                      + "Consumption",
                    ]
                  + defaultValue  = [
                      + "Developer",
                      + "Premium",
                    ]
                  + metadata      = {
                      + description = "List of API Management SKUs against which this policy will be evaluated."
                      + displayName = "API Management SKU Names"
                    }
                  + type          = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.ApiManagement/service"
                          + field  = "type"
                        },
                      + {
                          + field = "Microsoft.ApiManagement/service/sku.name"
                          + in    = "[parameters('evaluatedSkuNames')]"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.ApiManagement/service/virtualNetworkType"
                                },
                              + {
                                  + equals = "None"
                                  + field  = "Microsoft.ApiManagement/service/virtualNetworkType"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AllowedLocations/AzurePolicyDefinitions/Allowed-Locations-Workload.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enables you to restrict the locations your organization can specify when deploying resources. Use to enforce your geo-compliance requirements. Excludes resource groups, Microsoft.AzureActiveDirectory/b2cDirectories, and resources that use the 'global' region."
      + display_name        = "Allowed locations for workload deployments"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "General"
            }
        )
      + mode                = "Indexed"
      + name                = "Allowed-Location"
      + parameters          = jsonencode(
            {
              + listOfAllowedLocations = {
                  + metadata = {
                      + description = "The list of locations that can be specified when deploying resources."
                      + displayName = "Allowed locations"
                      + strongType  = "location"
                    }
                  + type     = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + field = "location"
                          + notIn = "[parameters('listOfAllowedLocations')]"
                        },
                      + {
                          + field     = "location"
                          + notEquals = "global"
                        },
                      + {
                          + field     = "type"
                          + notEquals = "Microsoft.AzureActiveDirectory/b2cDirectories"
                        },
                      + {
                          + field     = "type"
                          + notEquals = "Microsoft.Resources/deployments"
                        },
                    ]
                }
              + then = {
                  + effect = "deny"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned App Service plans that are driving cost."
      + display_name        = "Unused App Service plans driving cost should be avoided"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Audit-ServerFarms-UnusedResourcesCostOptimization"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/serverfarms"
                          + field  = "type"
                        },
                      + {
                          + field     = "Microsoft.Web/serverFarms/sku.tier"
                          + notEquals = "Free"
                        },
                      + {
                          + equals = 0
                          + field  = "Microsoft.Web/serverFarms/numberOfSites"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-ApiApp-Https.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      + display_name        = "API App should only be accessible over HTTPS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-ApiApp-Https"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + field = "kind"
                          + like  = "*api"
                        },
                      + {
                          + equals = "false"
                          + field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-AppService-Without-BYOC.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "App Service (including Logic apps and Function apps) must use certificates stored in Key Vault"
      + display_name        = "App Service certificates must be stored in Key Vault"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-AppService-Without-BYOC"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/certificates"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/certificates/keyVaultId"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/certificates/keyVaultSecretName"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-AppService-Without-Https.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      + display_name        = "Web Application should only be accessible over HTTPS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AppService-Without-Https"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + field = "kind"
                          + like  = "app*"
                        },
                      + {
                          + equals = "false"
                          + field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-AppService-without-BYOK.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "App Service (including Logic apps and Function apps) must use certificates stored in Key Vault"
      + display_name        = "App Service certificates must be stored in Key Vault"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "2.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AppService-without-BYOK"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/certificates"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/certificates/keyVaultId"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/certificates/keyVaultSecretName"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-AppServiceApiApp-Without-Https.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      + display_name        = "API App should only be accessible over HTTPS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AppServiceApiApp-Without-Https"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + field = "kind"
                          + like  = "*api"
                        },
                      + {
                          + equals = "false"
                          + field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-FunctionApp-Without-Https.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      + display_name        = "Function App should only be accessible over HTTPS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-FunctionApp-Without-Https"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + field = "kind"
                          + like  = "functionapp*"
                        },
                      + {
                          + equals = "false"
                          + field  = "Microsoft.Web/sites/httpsOnly"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-LogicApp-Public-Network.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Disabling public network access improves security by ensuring that the Logic App is not exposed on the public internet. Creating private endpoints can limit exposure of a Logic App. Learn more at: https://aka.ms/app-service-private-endpoint."
      + display_name        = "Logic apps should disable public network access"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-LogicApp-Public-Network"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + contains = "workflowapp"
                          + field    = "kind"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/sites/publicNetworkAccess"
                                },
                              + {
                                  + field     = "Microsoft.Web/sites/publicNetworkAccess"
                                  + notEquals = "Disabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deny-LogicApps-Without-Https.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
      + display_name        = "Logic app should only be accessible over HTTPS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "2.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-LogicApps-Without-Https"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + contains = "workflowapp"
                          + field    = "kind"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Web/sites/httpsOnly"
                                },
                              + {
                                  + equals = "false"
                                  + field  = "Microsoft.Web/sites/httpsOnly"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deploy-AppService-Diagnostics.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for App Service Web App to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.2.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deploy-AppService-Diagnostics"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + notContains = "functionapp"
                          + value       = "[field('kind')]"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                  + serverFarmId   = {
                                      + value = "[field('Microsoft.Web/sites/serverFarmId')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {
                                      + policy = {
                                          + type  = "string"
                                          + value = "[concat(parameters('logAnalytics'), 'configured for diagnostic logs for ', ': ', parameters('resourceName'))]"
                                        }
                                    }
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                      + serverFarmId   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = "[if(startsWith(reference(parameters('serverFarmId'), '2021-03-01', 'Full').sku.tier, 'Premium'), variables('logs').premiumTierLogs, variables('logs').otherTierLogs)]"
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {
                                      + logs = {
                                          + otherTierLogs   = [
                                              + {
                                                  + category = "AppServiceHTTPLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceConsoleLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceAppLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceIPSecAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServicePlatformLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                            ]
                                          + premiumTierLogs = [
                                              + {
                                                  + category = "AppServiceAntivirusScanAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceHTTPLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceConsoleLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceAppLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceFileAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServiceIPSecAuditLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                              + {
                                                  + category = "AppServicePlatformLogs"
                                                  + enabled  = "[parameters('logsEnabled')]"
                                                },
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deploy-FunctionApp-Diagnostics.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.1.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deploy-FunctionApp-Diagnostics"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "False"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + contains = "functionapp"
                                  + value    = "[field('kind')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + category = "FunctionAppLogs"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + evaluationDelay    = "AfterProvisioning"
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deploy-LogicApp-Diagnostics.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Azure Logic App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Azure Logic App to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.1.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deploy-LogicApp-Diagnostics"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "False"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "la-setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + contains = "workflowapp"
                                  + value    = "[field('kind')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + category = "WorkflowRuntime"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + evaluationDelay    = "AfterProvisioning"
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/AppService/AzurePolicyDefinitions/Deploy-LogicApp-TLS.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Periodically, newer versions are released for TLS either due to security flaws, include additional functionality, and enhance speed. Upgrade to the latest TLS version for Function apps to take advantage of security fixes, if any, and/or new functionalities of the latest version."
      + display_name        = "Configure Logic apps to use the latest TLS version"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deploy-LogicApp-TLS"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Web/sites"
                          + field  = "type"
                        },
                      + {
                          + contains = "workflowapp"
                          + field    = "kind"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "incremental"
                              + parameters = {
                                  + siteName = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + siteName = {
                                          + type = "string"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-02-01"
                                          + name       = "[concat(parameters('siteName'), '/web')]"
                                          + properties = {
                                              + minTlsVersion = "1.2"
                                            }
                                          + type       = "Microsoft.Web/sites/config"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + equals = "1.2"
                          + field  = "Microsoft.Web/sites/config/minTlsVersion"
                        }
                      + name               = "web"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                        ]
                      + type               = "Microsoft.Web/sites/config"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Automation/AzurePolicyDefinitions/Deny-AA-Child-Resources.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of child resources on the Automation Account"
      + display_name        = "No child resources in Automation Account"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Automation"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AA-Child-Resources"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + field = "type"
                          + in    = [
                              + "Microsoft.Automation/automationAccounts/runbooks",
                              + "Microsoft.Automation/automationAccounts/variables",
                              + "Microsoft.Automation/automationAccounts/modules",
                              + "Microsoft.Automation/automationAccounts/credentials",
                              + "Microsoft.Automation/automationAccounts/connections",
                              + "Microsoft.Automation/automationAccounts/certificates",
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Automation/AzurePolicyDefinitions/Deny-AA-Managed-Identity.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use Managed Identities as the recommended method for authenticating with Azure resources from the runbooks. Managed identity for authentication is more secure and eliminates the management overhead associated with using RunAs Account in your runbook code ."
      + display_name        = "Automation Account should have Managed Identity"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Automation"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AA-Managed-Identity"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Automation/automationAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "identity.type"
                                },
                              + {
                                  + contains = "None"
                                  + field    = "identity.type"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Backup/AzurePolicyDefinitions/Deny-Backup-Immutability.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy audits if the immutable vaults property is enabled for Backup vaults in the scope. This helps protect your backup data from being deleted before its intended expiry. Learn more at https://aka.ms/AB-ImmutableVaults."
      + display_name        = "Immutability must be enabled for backup vaults"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Backup"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Backup-Immutability"
      + parameters          = jsonencode(
            {
              + checkLockedImmutabiltyOnly = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = true
                  + metadata      = {
                      + description = "This parameter checks if Immutability is locked for Backup Vaults in scope. Selecting 'true' will mark only vaults with Immutability 'Locked' as compliant. Selecting 'false' will mark vaults that have Immutability either 'Enabled' or 'Locked' as compliant."
                      + displayName = "CheckLockedImmutabiltyOnly"
                    }
                  + type          = "Boolean"
                }
              + effect                     = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy."
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DataProtection/backupvaults"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field = "Microsoft.DataProtection/backupVaults/securitySettings.immutabilitySettings.State"
                                  + notIn = [
                                      + "Locked",
                                      + "UnLocked",
                                    ]
                                },
                              + {
                                  + allOf = [
                                      + {
                                          + equals = true
                                          + value  = "[parameters('checkLockedImmutabiltyOnly')]"
                                        },
                                      + {
                                          + field     = "Microsoft.DataProtection/backupVaults/securitySettings.immutabilitySettings.State"
                                          + notEquals = "Locked"
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Backup/AzurePolicyDefinitions/Deny-Backup-Soft-Delete.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy audits if soft delete is enabled for Backup vaults in the scope. Soft delete can help you recover your data after it has been deleted. Learn more at https://aka.ms/AB-SoftDelete"
      + display_name        = "Soft delete should be enabled for Backup Vaults"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Backup"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Backup-Soft-Delete"
      + parameters          = jsonencode(
            {
              + checkAlwaysOnSoftDeleteOnly = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = true
                  + metadata      = {
                      + description = "This parameter checks if Soft Delete is 'Locked' for Backup Vaults in scope. Selecting 'true' will mark only vaults with Soft Delete 'AlwaysOn' as compliant. Selecting 'false' will mark vaults that have Soft Delete either 'On' or 'AlwaysOn' as compliant."
                      + displayName = "CheckAlwaysOnSoftDeleteOnly"
                    }
                  + type          = "Boolean"
                }
              + effect                      = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy."
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DataProtection/backupvaults"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field = "Microsoft.DataProtection/backupVaults/securitySettings.softDeleteSettings.state"
                                  + notIn = [
                                      + "On",
                                      + "AlwaysOn",
                                    ]
                                },
                              + {
                                  + allOf = [
                                      + {
                                          + equals = true
                                          + value  = "[parameters('checkAlwaysOnSoftDeleteOnly')]"
                                        },
                                      + {
                                          + field     = "Microsoft.DataProtection/backupVaults/securitySettings.softDeleteSettings.state"
                                          + notEquals = "AlwaysOn"
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Budget/AzurePolicyDefinitions/Dine-SubscriptionBudget.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploy a default budget on all subscriptions under the assigned scope"
      + display_name        = "Deploy a default budget on all subscriptions under the assigned scope"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Budget"
              + version  = "1.1.0"
            }
        )
      + mode                = "All"
      + name                = "Deploy-Budget"
      + parameters          = jsonencode(
            {
              + amount          = {
                  + defaultValue = "1000"
                  + metadata     = {
                      + description = "The total amount of cost or usage to track with the budget"
                    }
                  + type         = "String"
                }
              + budgetName      = {
                  + defaultValue = "budget-set-by-policy"
                  + metadata     = {
                      + description = "The name for the budget to be created"
                    }
                  + type         = "String"
                }
              + contactEmails   = {
                  + defaultValue = []
                  + metadata     = {
                      + description = "The list of email addresses, in an array, to send the budget notification to when the threshold is exceeded."
                    }
                  + type         = "Array"
                }
              + contactGroups   = {
                  + defaultValue = []
                  + metadata     = {
                      + description = "The list of action groups, in an array, to send the budget notification to when the threshold is exceeded. It accepts array of strings."
                    }
                  + type         = "Array"
                }
              + contactRoles    = {
                  + defaultValue = [
                      + "Owner",
                      + "Contributor",
                    ]
                  + metadata     = {
                      + description = "The list of contact RBAC roles, in an array, to send the budget notification to when the threshold is exceeded."
                    }
                  + type         = "Array"
                }
              + effect          = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "AuditIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                    }
                  + type          = "String"
                }
              + firstThreshold  = {
                  + defaultValue = "90"
                  + metadata     = {
                      + description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                    }
                  + type         = "String"
                }
              + secondThreshold = {
                  + defaultValue = "100"
                  + metadata     = {
                      + description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                    }
                  + type         = "String"
                }
              + timeGrain       = {
                  + allowedValues = [
                      + "Monthly",
                      + "Quarterly",
                      + "Annually",
                      + "BillingMonth",
                      + "BillingQuarter",
                      + "BillingAnnual",
                    ]
                  + defaultValue  = "Monthly"
                  + metadata      = {
                      + description = "The time covered by a budget. Tracking of the amount will be reset based on the time grain."
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Resources/subscriptions"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + location   = "northeurope"
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + amount          = {
                                      + value = "[parameters('amount')]"
                                    }
                                  + budgetName      = {
                                      + value = "[parameters('budgetName')]"
                                    }
                                  + contactEmails   = {
                                      + value = "[parameters('contactEmails')]"
                                    }
                                  + contactGroups   = {
                                      + value = "[parameters('contactGroups')]"
                                    }
                                  + contactRoles    = {
                                      + value = "[parameters('contactRoles')]"
                                    }
                                  + firstThreshold  = {
                                      + value = "[parameters('firstThreshold')]"
                                    }
                                  + secondThreshold = {
                                      + value = "[parameters('secondThreshold')]"
                                    }
                                  + timeGrain       = {
                                      + value = "[parameters('timeGrain')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  + contentVersion = "1.0.0.0"
                                  + parameters     = {
                                      + amount          = {
                                          + type = "String"
                                        }
                                      + budgetName      = {
                                          + type = "String"
                                        }
                                      + contactEmails   = {
                                          + type = "Array"
                                        }
                                      + contactGroups   = {
                                          + type = "Array"
                                        }
                                      + contactRoles    = {
                                          + type = "Array"
                                        }
                                      + firstThreshold  = {
                                          + type = "String"
                                        }
                                      + secondThreshold = {
                                          + type = "String"
                                        }
                                      + startDate       = {
                                          + defaultValue = "[concat(utcNow('MM'), '/01/', utcNow('yyyy'))]"
                                          + type         = "String"
                                        }
                                      + timeGrain       = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2019-10-01"
                                          + name       = "[parameters('budgetName')]"
                                          + properties = {
                                              + amount        = "[parameters('amount')]"
                                              + category      = "Cost"
                                              + notifications = {
                                                  + NotificationForExceededBudget1 = {
                                                      + contactEmails = "[parameters('contactEmails')]"
                                                      + contactGroups = "[parameters('contactGroups')]"
                                                      + contactRoles  = "[parameters('contactRoles')]"
                                                      + enabled       = true
                                                      + operator      = "GreaterThan"
                                                      + threshold     = "[parameters('firstThreshold')]"
                                                    }
                                                  + NotificationForExceededBudget2 = {
                                                      + contactEmails = "[parameters('contactEmails')]"
                                                      + contactGroups = "[parameters('contactGroups')]"
                                                      + contactRoles  = "[parameters('contactRoles')]"
                                                      + enabled       = true
                                                      + operator      = "GreaterThan"
                                                      + threshold     = "[parameters('secondThreshold')]"
                                                    }
                                                }
                                              + timeGrain     = "[parameters('timeGrain')]"
                                              + timePeriod    = {
                                                  + startDate = "[parameters('startDate')]"
                                                }
                                            }
                                          + type       = "Microsoft.Consumption/budgets"
                                        },
                                    ]
                                }
                            }
                        }
                      + deploymentScope    = "subscription"
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('amount')]"
                                  + field  = "Microsoft.Consumption/budgets/amount"
                                },
                              + {
                                  + equals = "[parameters('timeGrain')]"
                                  + field  = "Microsoft.Consumption/budgets/timeGrain"
                                },
                              + {
                                  + equals = "Cost"
                                  + field  = "Microsoft.Consumption/budgets/category"
                                },
                            ]
                        }
                      + existenceScope     = "subscription"
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      + type               = "Microsoft.Consumption/budgets"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Cache/AzurePolicyDefinitions/Deny-Redis-MinimumTlsVersion.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Audit enabling of only connections via SSL to Azure Cache for Redis. Validate both minimum TLS version and enableNonSslPort is disabled. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
      + display_name        = "Azure Cache for Redis only secure connections should be enabled"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cache"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Redis-MinimumTlsVersion"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minimumTlsVersion = {
                  + allowedValues = [
                      + "1.2",
                      + "1.1",
                      + "1.0",
                    ]
                  + defaultValue  = "1.2"
                  + metadata      = {
                      + description = "Select minimum TLS version for Azure Cache for Redis."
                      + displayName = "Select minumum TLS version for Azure Cache for Redis."
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Cache/redis"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Cache/Redis/enableNonSslPort"
                                },
                              + {
                                  + field     = "Microsoft.Cache/Redis/minimumTlsVersion"
                                  + notequals = "[parameters('minimumTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/CognitiveServices/AzurePolicyDefinitions/Deny-CognitiveServices-NetworkAcls.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Cognitive Services should not allow adding individual IPs or virtual network rules to the service-level firewall. Enable this to restrict inbound network access and enforce the usage of private endpoints."
      + display_name        = "Network ACLs should be restricted for Cognitive Services"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Services"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-CognitiveServices-NetworkAcls"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.CognitiveServices/accounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + count   = {
                                      + field = "Microsoft.CognitiveServices/accounts/networkAcls.ipRules[*]"
                                    }
                                  + greater = 0
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.CognitiveServices/accounts/networkAcls.virtualNetworkRules[*]"
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/CognitiveServices/AzurePolicyDefinitions/Deny-CognitiveServices-Resource-Kinds.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Cognitive Services should only create explicit allowed kinds."
      + display_name        = "Only explicit kinds for Cognitive Services should be allowed "
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Services"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-CognitiveServices-Resource-Kinds"
      + parameters          = jsonencode(
            {
              + allowedKinds = {
                  + allowedValues = [
                      + "AnomalyDetector",
                      + "ComputerVision",
                      + "CognitiveServices",
                      + "ContentModerator",
                      + "CustomVision.Training",
                      + "CustomVision.Prediction",
                      + "Face",
                      + "FormRecognizer",
                      + "ImmersiveReader",
                      + "LUIS",
                      + "Personalizer",
                      + "SpeechServices",
                      + "TextAnalytics",
                      + "TextTranslation",
                      + "OpenAI",
                    ]
                  + defaultValue  = [
                      + "AnomalyDetector",
                      + "ComputerVision",
                      + "CognitiveServices",
                      + "ContentModerator",
                      + "CustomVision.Training",
                      + "CustomVision.Prediction",
                      + "Face",
                      + "FormRecognizer",
                      + "ImmersiveReader",
                      + "LUIS",
                      + "Personalizer",
                      + "SpeechServices",
                      + "TextAnalytics",
                      + "TextTranslation",
                      + "OpenAI",
                    ]
                  + metadata      = {
                      + description = "Select the allowed resource kinds to be used with Cognitive Services"
                      + displayName = "Effect"
                    }
                  + type          = "array"
                }
              + effect       = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.CognitiveServices/accounts"
                          + field  = "type"
                        },
                      + {
                          + field = "kind"
                          + notIn = "[parameters('allowedKinds')]"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/CognitiveServices/AzurePolicyDefinitions/Deny-CognitiveServices-RestrictOutboundNetworkAccess.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Cognitive Services allow restricting outbound network access. Enable this to limit outbound connectivity for the service."
      + display_name        = "Outbound network access should be restricted for Cognitive Services"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Services"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-CognitiveServices-RestrictOutboundNetworkAccess"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.CognitiveServices/accounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                },
                              + {
                                  + field     = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                  + notEquals = true
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/CognitiveServices/AzurePolicyDefinitions/Dine-Diagnostics-OpenAI.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Open Ai (Cognitive Services) to stream to a Log Analytics workspace when any Open Ai which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled."
      + display_name        = "Deploy Diagnostic Settings for Open Ai (Cognitive Services) to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Services"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-OpenAi"
      + parameters          = jsonencode(
            {
              + effect       = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + profileName  = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.CognitiveServices/accounts"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location     = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + profileName  = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location     = {
                                          + type = "String"
                                        }
                                      + logAnalytics = {
                                          + type = "String"
                                        }
                                      + profileName  = {
                                          + type = "String"
                                        }
                                      + resourceName = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.CognitiveServices/accounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Compute/AzurePolicyDefinitions/Audit-Compute-AzureHybridBenefit.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Disabling public network access improves security by ensuring that a managed disk isn't exposed on the public internet. Creating private endpoints can limit exposure of managed disks. Learn more at: https://aka.ms/disksprivatelinksdoc."
      + display_name        = "Managed disks should disable public network access"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Compute"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Audit-Compute-AzureHybridBenefit"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + field = "type"
                          + in    = [
                              + "Microsoft.Compute/virtualMachines",
                              + "Microsoft.Compute/virtualMachineScaleSets",
                            ]
                        },
                      + {
                          + equals = "MicrosoftWindowsServer"
                          + field  = "Microsoft.Compute/imagePublisher"
                        },
                      + {
                          + equals = "WindowsServer"
                          + field  = "Microsoft.Compute/imageOffer"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field = "Microsoft.Compute/imageSKU"
                                  + like  = "2008-R2-SP1*"
                                },
                              + {
                                  + field = "Microsoft.Compute/imageSKU"
                                  + like  = "2012-*"
                                },
                              + {
                                  + field = "Microsoft.Compute/imageSKU"
                                  + like  = "2016-*"
                                },
                              + {
                                  + field = "Microsoft.Compute/imageSKU"
                                  + like  = "2019-*"
                                },
                              + {
                                  + field = "Microsoft.Compute/imageSKU"
                                  + like  = "2022-*"
                                },
                            ]
                        },
                      + {
                          + field     = "Microsoft.Compute/licenseType"
                          + notEquals = "Windows_Server"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Compute/AzurePolicyDefinitions/Audit-Disks-UnusedResourcesCostOptimization.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Disks that are driving cost."
      + display_name        = "Unused Disks driving cost should be avoided"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Compute"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Audit-Disks-UnusedResourcesCostOptimization"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Compute/disks"
                          + field  = "type"
                        },
                      + {
                          + equals = "Unattached"
                          + field  = "Microsoft.Compute/disks/diskState"
                        },
                      + {
                          + allof = [
                              + {
                                  + field   = "name"
                                  + notlike = "*-ASRReplica"
                                },
                              + {
                                  + field   = "name"
                                  + notlike = "ms-asr-*"
                                },
                              + {
                                  + field   = "name"
                                  + notlike = "asrseeddisk-*"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Compute/AzurePolicyDefinitions/Deny-Disk-Public-Endpoint.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Disabling public network access improves security by ensuring that a managed disk isn't exposed on the public internet. Creating private endpoints can limit exposure of managed disks. Learn more at: https://aka.ms/disksprivatelinksdoc."
      + display_name        = "Managed disks should disable public network access"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Compute"
              + version  = "2.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Disk-Public-Endpoint"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Compute/disks"
                          + field  = "type"
                        },
                      + {
                          + field = "Microsoft.Compute/disks/networkAccessPolicy"
                          + notIn = [
                              + "DenyAll",
                              + "AllowPrivate",
                            ]
                        },
                      + {
                          + field     = "Microsoft.Compute/disks/publicNetworkAccess"
                          + notEquals = "Disabled"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/CosmosDb/AzurePolicyDefinitions/Dine-Diagnostics-Cosmosdb.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cosmos DB"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-CosmosDb"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.DocumentDB/databaseAccounts"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "Requests"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/DataExplorer/AzurePolicyDefinitions/Dine-Diagnostics-ADE.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Azure Data Explorer"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-ADE"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Kusto/Clusters"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Kusto/Clusters/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/DataFactory/AzurePolicyDefinitions/Dine-Diagnostics-DataFactory.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Data Factory to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Data Factory"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-DataFactory"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.DataFactory/factories"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.DataFactory/factories/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Audit-Databricks-EncryptionDbfs.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of encryption for dbfs of a Databricks workspace."
      + display_name        = "Enforce Databricks workspaces to use encryption for dbfs"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Audit-Databricks-EncryptionDbfs"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/parameters.encryption.value.keySource"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/encryption.entities.managedDisk.keySource"
                                  + notEquals = "Microsoft.Keyvault"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-AutomaticClusterUpdate.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of automatic cluster update for Databricks workspaces."
      + display_name        = "Enforce automatic cluster update for Databricks workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-AutomaticClusterUpdate"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.automaticClusterUpdate.value"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.automaticClusterUpdate.value"
                                  + notEquals = "Enabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-ComplianceSecurityProfile.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of compliance security profiles such as HIPAA and PCI-DSS for Databricks workspaces."
      + display_name        = "Enforce compliance security profiles for Databricks workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-ComplianceSecurityProfile"
      + parameters          = jsonencode(
            {
              + complianceStandards = {
                  + allowedValues = [
                      + "NONE",
                      + "HIPAA",
                      + "PCI_DSS",
                    ]
                  + defaultValue  = []
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "Array"
                }
              + effect              = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.complianceSecurityProfile.value"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.complianceSecurityProfile.value"
                                  + notEquals = "Enabled"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.complianceSecurityProfile.complianceStandards[*]"
                                      + where = {
                                          + allOf = [
                                              + {
                                                  + field = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.complianceSecurityProfile.complianceStandards[*]"
                                                  + notIn = "[parameters('complianceStandards')]"
                                                },
                                            ]
                                        }
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-DefaultStorageFirewall.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of disabled public network access for the Databricks DBFS storage account."
      + display_name        = "Enforce Databricks workspaces to use a private DBFS storage"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-DefaultStorageFirewall"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/defaultStorageFirewall"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/defaultStorageFirewall"
                                  + notEquals = "Enabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-EncryptionManagedDisk.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of encryption for managed disks of a Databricks workspace."
      + display_name        = "Enforce Databricks workspaces to use encryption for managed disks"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-EncryptionManagedDisk"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/encryption.entities.managedDisk.keySource"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/encryption.entities.managedDisk.keySource"
                                  + notEquals = "Microsoft.Keyvault"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-EncryptionManagedServices.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of encryption for managed services of a Databricks workspace."
      + display_name        = "Enforce Databricks workspaces to use encryption for managed services"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-EncryptionManagedServices"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/encryption.entities.managedServices.keySource"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/encryption.entities.managedServices.keySource"
                                  + notEquals = "Microsoft.Keyvault"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-EnhancedSecurityMonitoring.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of enhanced security monitoring for Databricks workspaces."
      + display_name        = "Enforce enhanced security monitoring for Databricks workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-EnhancedSecurityMonitoring"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.enhancedSecurityMonitoring.value"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/enhancedSecurityCompliance.enhancedSecurityMonitoring.value"
                                  + notEquals = "Enabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-PrepareEncryption.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Ensures Databricks workspaces use Customer-managed key to encrypt DBFS."
      + display_name        = "Enforce Databricks workspaces to use encryption for DBFS"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-PrepareEncryption"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/parameters.prepareEncryption.value"
                                },
                              + {
                                  + equals = false
                                  + field  = "Microsoft.Databricks/workspaces/parameters.prepareEncryption.value"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-RequireInfrastructureEncryption.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of infrastructure encryption for Databricks workspaces."
      + display_name        = "Enforce infrastructure encryption for Databricks workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-RequireInfrastructureEncryption"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/parameters.requireInfrastructureEncryption.value"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/parameters.requireInfrastructureEncryption.value"
                                  + notEquals = true
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Databricks/AzurePolicyDefinitions/Deny-Databricks-RequiredNsgRules.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces the use of platform provided rules for NSGs for Databricks workspaces."
      + display_name        = "Enforce Databricks rules are not applied to NSGs for Databricks workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Databricks-RequiredNsgRules"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Databricks/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Databricks/workspaces/requiredNsgRules"
                                },
                              + {
                                  + field     = "Microsoft.Databricks/workspaces/requiredNsgRules"
                                  + notEquals = "NoAzureDatabricksRules"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/DefenderForCloud/AzurePolicyDefinitions/Dine-DefenderContacts.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploy Defender for Cloud Security Contacts to receive alerts and notifications"
      + display_name        = "Deploy Defender for Cloud Security Contacts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Security Center"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Dine-DefenderContacts"
      + parameters          = jsonencode(
            {
              + effect               = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "string"
                }
              + emailSecurityContact = {
                  + metadata = {
                      + description = "Provide email address for Azure Security Center contact details"
                      + displayName = "Security contacts email address"
                    }
                  + type     = "string"
                }
              + minimalSeverity      = {
                  + allowedValues = [
                      + "High",
                      + "Medium",
                      + "Low",
                    ]
                  + defaultValue  = "High"
                  + metadata      = {
                      + description = "Defines the minimal alert severity which will be sent as email notifications"
                      + displayName = "Minimal severity"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Resources/subscriptions"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + location   = "northeurope"
                          + properties = {
                              + mode       = "incremental"
                              + parameters = {
                                  + emailSecurityContact = {
                                      + value = "[parameters('emailSecurityContact')]"
                                    }
                                  + minimalSeverity      = {
                                      + value = "[parameters('minimalSeverity')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + emailSecurityContact = {
                                          + metadata = {
                                              + description = "Security contacts email address"
                                            }
                                          + type     = "string"
                                        }
                                      + minimalSeverity      = {
                                          + metadata = {
                                              + description = "Minimal severity level reported"
                                            }
                                          + type     = "string"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2023-12-01-preview"
                                          + name       = "default"
                                          + properties = {
                                              + emails               = "[parameters('emailSecurityContact')]"
                                              + isEnabled            = true
                                              + notificationsByRole  = {
                                                  + roles = [
                                                      + "Owner",
                                                    ]
                                                  + state = "On"
                                                }
                                              + notificationsSources = [
                                                  + {
                                                      + minimalSeverity = "[parameters('minimalSeverity')]"
                                                      + sourceType      = "Alert"
                                                    },
                                                ]
                                            }
                                          + type       = "Microsoft.Security/securityContacts"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + deploymentScope    = "subscription"
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + contains = "[parameters('emailSecurityContact')]"
                                  + field    = "Microsoft.Security/securityContacts/email"
                                },
                              + {
                                  + equals = true
                                  + field  = "Microsoft.Security/securityContacts/isEnabled"
                                },
                              + {
                                  + contains = "[parameters('minimalSeverity')]"
                                  + field    = "Microsoft.Security/securityContacts/notificationsSources[*].Alert.minimalSeverity"
                                },
                            ]
                        }
                      + existenceScope     = "subscription"
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                        ]
                      + type               = "Microsoft.Security/securityContacts"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/DnsZoneGroup/AzurePolicyDefinitions/Dine-DNSZoneGroup-KeyVault-Vault.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Configure private DNS zone group to override the DNS resolution for a Key Vault vault groupID private endpoint."
      + display_name        = "Configure Azure Key Vault private DNS zone group"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category   = "Key Vault"
              + deprecated = false
              + preview    = false
              + version    = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-DNSZoneGroup-KeyVault-Vault"
      + parameters          = jsonencode(
            {
              + effect           = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + privateDnsZoneId = {
                  + metadata = {
                      + assignPermissions = true
                      + description       = "Configure private DNS zone group to override the DNS resolution for the private endpoint."
                      + displayName       = "Configure a private DNS Zone ID"
                      + strongType        = "Microsoft.Network/privateDnsZones"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/privateEndpoints"
                          + field  = "type"
                        },
                      + {
                          + contains = "Microsoft.KeyVault/vaults"
                          + field    = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId"
                        },
                      + {
                          + count           = {
                              + field = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]"
                              + where = {
                                  + equals = "vault"
                                  + field  = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]"
                                }
                            }
                          + greaterOrEquals = 1
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "incremental"
                              + parameters = {
                                  + location            = {
                                      + value = "[field('location')]"
                                    }
                                  + privateDnsZoneId    = {
                                      + value = "[parameters('privateDnsZoneId')]"
                                    }
                                  + privateEndpointName = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + parameters     = {
                                      + location            = {
                                          + type = "string"
                                        }
                                      + privateDnsZoneId    = {
                                          + type = "string"
                                        }
                                      + privateEndpointName = {
                                          + type = "string"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2020-03-01"
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('privateEndpointName'), '/deployedByPolicy')]"
                                          + properties = {
                                              + privateDnsZoneConfigs = [
                                                  + {
                                                      + name       = "[concat(parameters('privateEndpointName'), '-aRecord')]"
                                                      + properties = {
                                                          + privateDnsZoneId = "[parameters('privateDnsZoneId')]"
                                                        }
                                                    },
                                                ]
                                            }
                                          + type       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                        },
                                    ]
                                }
                            }
                        }
                      + evaluationDelay    = "AfterProvisioningSuccess"
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('privateDnsZoneId')]"
                                  + field  = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups/privateDnsZoneConfigs[*].privateDnsZoneId"
                                },
                            ]
                        }
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      + type               = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/EventHub/AzurePolicyDefinitions/Deny-EH-Cmk.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Event Hub Cluster supports the option of encrypting data at rest with either Microsoft-managed keys (default) or customer-managed keys. Choosing to encrypt data using customer-managed keys enables you to assign, rotate, disable, and revoke access to the keys that Event Hub will use to encrypt data in your namespace. Note that Event Hub only supports encryption with customer-managed keys for namespaces in dedicated clusters."
      + display_name        = "Event Hub Cluster namespaces should use a customer-managed key for encryption"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Event Hub"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-EH-Cmk"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.EventHub/namespaces"
                          + field  = "type"
                        },
                      + {
                          + exists = "true"
                          + field  = "Microsoft.EventHub/namespaces/clusterArmId"
                        },
                      + {
                          + not = {
                              + equals = "Microsoft.Keyvault"
                              + field  = "Microsoft.EventHub/namespaces/encryption.keySource"
                            }
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/EventHub/AzurePolicyDefinitions/Deny-EH-MINTLS.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Event Hub namespaces should use a valid TLS version."
      + display_name        = "Event Hub namespaces should use a valid TLS version"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Event Hub"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-EH-MINTLS"
      + parameters          = jsonencode(
            {
              + effect        = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minTlsVersion = {
                  + defaultValue = "1.2"
                  + metadata     = {
                      + description = "Minimum TLS version to be used by Event Hub"
                      + displayName = "Minimum TLS Version"
                    }
                  + type         = "string"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.EventHub/namespaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field     = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                  + notEquals = "[parameters('minTlsVersion')]"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/EventHub/AzurePolicyDefinitions/Deny-EH-Premium-Cmk.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Event Hub namespaces (Premium) should use a customer-managed key for encryption."
      + display_name        = "Event Hub namespaces (Premium) should use a customer-managed key for encryption"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Event Hub"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-EH-Premium-CMK"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.EventHub/namespaces"
                          + field  = "type"
                        },
                      + {
                          + equals = "Premium"
                          + field  = "Microsoft.EventHub/namespaces/sku.name"
                        },
                      + {
                          + not = {
                              + equals = "Microsoft.Keyvault"
                              + field  = "Microsoft.EventHub/namespaces/encryption.keySource"
                            }
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/General/AzurePolicyDefinitions/Deny-DiagnosticSettings-Platform.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Diagnostic settings created and configured by the platform team should not be modified by pointing to another resource or removing log categories."
      + display_name        = "Diagnostic settings created by the platform team should not be modified"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Monitoring"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-DiagnosticSettings-Platform"
      + parameters          = jsonencode(
            {
              + effect                  = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalyticsWorkspaceId = {
                  + metadata = {
                      + assignPermissions = true
                      + description       = "Select the Log Analytics workspace from the dropdown list"
                      + displayName       = "Log Analytics Workspace ID"
                      + strongType        = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled          = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = true
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "Boolean"
                }
              + profileName             = {
                  + defaultValue = "setByPolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Insights/diagnosticSettings"
                          + field  = "type"
                        },
                      + {
                          + equals = "[parameters('profileName')]"
                          + field  = "name"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field     = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                  + notEquals = "[parameters('logAnalyticsWorkspaceId')]"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Insights/diagnosticSettings/logs[*]"
                                      + where = {
                                          + field     = "Microsoft.Insights/diagnosticSettings/logs[*].enabled"
                                          + notEquals = true
                                        }
                                    }
                                  + greater = 0
                                },
                              + {
                                  + allOf = [
                                      + {
                                          + equals = true
                                          + value  = "[parameters('metricsEnabled')]"
                                        },
                                      + {
                                          + count   = {
                                              + field = "Microsoft.Insights/diagnosticSettings/metrics[*]"
                                              + where = {
                                                  + field     = "Microsoft.Insights/diagnosticSettings/metrics[*].enabled"
                                                  + notEquals = true
                                                }
                                            }
                                          + greater = 0
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/General/AzurePolicyDefinitions/Deny-Locations-Resources.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enables you to restrict the locations your organization can specify when deploying resources. Use to enforce your geo-compliance requirements. Excludes resource groups, Microsoft.AzureActiveDirectory/b2cDirectories, Microsoft.Resources/deployments for DINE, and resources that use the 'global' region."
      + display_name        = "Allowed locations for resources"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "General"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Locations-Resources"
      + parameters          = jsonencode(
            {
              + effect                 = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description  = "Enable or disable the execution of the policy"
                      + displayName  = "Effect"
                      + portalReview = true
                    }
                  + type          = "String"
                }
              + listOfAllowedLocations = {
                  + metadata = {
                      + description = "The list of locations that can be specified when deploying resources."
                      + displayName = "Allowed locations"
                      + strongType  = "location"
                    }
                  + type     = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + field = "location"
                          + notIn = "[parameters('listOfAllowedLocations')]"
                        },
                      + {
                          + field     = "location"
                          + notEquals = "global"
                        },
                      + {
                          + field     = "type"
                          + notEquals = "Microsoft.AzureActiveDirectory/b2cDirectories"
                        },
                      + {
                          + field     = "type"
                          + notEquals = "Microsoft.Resources/deployments"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/General/AzurePolicyDefinitions/DenyAction-DiagnosticSettings-Platform.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Diagnostic settings created and configured by the platform team should not be removed to ensure compliance."
      + display_name        = "Diagnostic settings created by the platform team should not be removed"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Monitoring"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "DenyAction-DiagnosticSettings-Platform"
      + parameters          = jsonencode(
            {
              + effect      = {
                  + allowedValues = [
                      + "denyAction",
                      + "Disabled",
                    ]
                  + defaultValue  = "denyAction"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + profileName = {
                  + defaultValue = "setByPolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Insights/diagnosticSettings"
                          + field  = "type"
                        },
                      + {
                          + equals = "[parameters('profileName')]"
                          + field  = "name"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + actionNames = [
                          + "delete",
                        ]
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/General/AzurePolicyDefinitions/DenyAction-Resource.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enables you to specify the resource and resource type that your organization can protect from accidentals deletion by blocking delete calls using the deny action effect."
      + display_name        = "Do not allow deletion of specified resource and resource type"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "General"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "DenyAction-Resource"
      + parameters          = jsonencode(
            {
              + effect       = {
                  + allowedValues = [
                      + "DenyAction",
                      + "Disabled",
                    ]
                  + defaultValue  = "DenyAction"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + resourceName = {
                  + metadata = {
                      + description = "Provide the name of the resource that you want to protect from accidental deletion."
                      + displayName = "Resource Name"
                    }
                  + type     = "String"
                }
              + resourceType = {
                  + metadata = {
                      + description = "Provide the resource type that you want to protect from accidental deletion."
                      + displayName = "Resource Type"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "[parameters('resourceType')]"
                          + field  = "type"
                        },
                      + {
                          + field = "name"
                          + like  = "[parameters('resourceName')]"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + actionNames = [
                          + "delete",
                        ]
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Kubernetes/AzurePolicyDefinitions/Deny-AKS-CNI.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure CNI is a prerequisite for some Azure Kubernetes Service features, including Azure network policies, Windows node pools and virtual nodes add-on. Learn more at: https://aka.ms/aks-azure-cni"
      + display_name        = "Azure Kubernetes Clusters should use Azure CNI"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Kubernetes"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Aks-Cni"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description  = "Enable or disable the execution of the policy"
                      + displayName  = "Effect"
                      + portalReview = true
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.ContainerService/managedClusters"
                          + field  = "type"
                        },
                      + {
                          + field     = "Microsoft.ContainerService/managedClusters/networkProfile.networkPlugin"
                          + notEquals = "azure"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Kubernetes/AzurePolicyDefinitions/Deny-AKS-CSI.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Use Key Management Service (KMS) to encrypt secret data at rest in etcd for Kubernetes cluster security. Learn more at: https://aka.ms/aks/kmsetcdencryption."
      + display_name        = "Azure Kubernetes Clusters should enable Key Management Service (KMS)"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Kubernetes"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Aks-CSI"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description  = "Enable or disable the execution of the policy"
                      + displayName  = "Effect"
                      + portalReview = true
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.ContainerService/managedClusters"
                          + field  = "type"
                        },
                      + {
                          + field     = "identity.type"
                          + notEquals = "SystemAssigned"
                        },
                      + {
                          + field     = "Microsoft.ContainerService/managedClusters/securityProfile.azureKeyVaultKms.enabled"
                          + notEquals = true
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Audit-MachineLearning-PrivateEndpointId.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Audit private endpoints that are created in other subscriptions and/or tenants for Azure Machine Learning."
      + display_name        = "Control private endpoint connections to Azure Machine Learning"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Audit-MachineLearning-PrivateEndpointId"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"
                          + field  = "type"
                        },
                      + {
                          + equals = "Approved"
                          + field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateLinkServiceConnectionState.status"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id"
                                },
                              + {
                                  + notEquals = "[subscription().subscriptionId]"
                                  + value     = "[split(concat(field('Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id'), '//'), '/')[2]]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-ML-Outdated-OS.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Compute instances are non-compliant if the instance has an outdated operating system version. For more information, visit http://aka.ms/azureml-ci-updates/."
      + display_name        = "Audit/Deny Azure Machine Learning Compute Instances with an outdated operating system"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-ML-Outdated-OS"
      + parameters          = jsonencode(
            {
              + effects = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match."
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          + field  = "type"
                        },
                      + {
                          + equals = "ComputeInstance"
                          + field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      + {
                          + equals = "false"
                          + field  = "Microsoft.MachineLearningServices/workspaces/computes/osImageMetadata.isLatestOsImageVersion"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effects')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-Aks.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deny AKS cluster creation in Azure Machine Learning and enforce connecting to existing clusters."
      + display_name        = "Deny AKS cluster creation in Azure Machine Learning"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MachineLearning-Aks"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          + field  = "type"
                        },
                      + {
                          + equals = "AKS"
                          + field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.MachineLearningServices/workspaces/computes/resourceId"
                                },
                              + {
                                  + equals = true
                                  + value  = "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/resourceId'))]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-Compute-VmSize.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances."
      + display_name        = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MachineLearning-Compute-VmSize"
      + parameters          = jsonencode(
            {
              + allowedVmSizes = {
                  + defaultValue = [
                      + "Standard_D1_v2",
                      + "Standard_D2_v2",
                      + "Standard_D3_v2",
                      + "Standard_D4_v2",
                      + "Standard_D11_v2",
                      + "Standard_D12_v2",
                      + "Standard_D13_v2",
                      + "Standard_D14_v2",
                      + "Standard_DS1_v2",
                      + "Standard_DS2_v2",
                      + "Standard_DS3_v2",
                      + "Standard_DS4_v2",
                      + "Standard_DS5_v2",
                      + "Standard_DS11_v2",
                      + "Standard_DS12_v2",
                      + "Standard_DS13_v2",
                      + "Standard_DS14_v2",
                      + "Standard_M8-2ms",
                      + "Standard_M8-4ms",
                      + "Standard_M8ms",
                      + "Standard_M16-4ms",
                      + "Standard_M16-8ms",
                      + "Standard_M16ms",
                      + "Standard_M32-8ms",
                      + "Standard_M32-16ms",
                      + "Standard_M32ls",
                      + "Standard_M32ms",
                      + "Standard_M32ts",
                      + "Standard_M64-16ms",
                      + "Standard_M64-32ms",
                      + "Standard_M64ls",
                      + "Standard_M64ms",
                      + "Standard_M64s",
                      + "Standard_M128-32ms",
                      + "Standard_M128-64ms",
                      + "Standard_M128ms",
                      + "Standard_M128s",
                      + "Standard_M64",
                      + "Standard_M64m",
                      + "Standard_M128",
                      + "Standard_M128m",
                      + "Standard_D1",
                      + "Standard_D2",
                      + "Standard_D3",
                      + "Standard_D4",
                      + "Standard_D11",
                      + "Standard_D12",
                      + "Standard_D13",
                      + "Standard_D14",
                      + "Standard_DS15_v2",
                      + "Standard_NV6",
                      + "Standard_NV12",
                      + "Standard_NV24",
                      + "Standard_F2s_v2",
                      + "Standard_F4s_v2",
                      + "Standard_F8s_v2",
                      + "Standard_F16s_v2",
                      + "Standard_F32s_v2",
                      + "Standard_F64s_v2",
                      + "Standard_F72s_v2",
                      + "Standard_NC6s_v3",
                      + "Standard_NC12s_v3",
                      + "Standard_NC24rs_v3",
                      + "Standard_NC24s_v3",
                      + "Standard_NC6",
                      + "Standard_NC12",
                      + "Standard_NC24",
                      + "Standard_NC24r",
                      + "Standard_ND6s",
                      + "Standard_ND12s",
                      + "Standard_ND24rs",
                      + "Standard_ND24s",
                      + "Standard_NC6s_v2",
                      + "Standard_NC12s_v2",
                      + "Standard_NC24rs_v2",
                      + "Standard_NC24s_v2",
                      + "Standard_ND40rs_v2",
                      + "Standard_NV12s_v3",
                      + "Standard_NV24s_v3",
                      + "Standard_NV48s_v3",
                    ]
                  + metadata     = {
                      + description = "Specifies the allowed VM Sizes for Aml Compute Clusters and Instances"
                      + displayName = "Allowed VM Sizes for Aml Compute Clusters and Instances"
                    }
                  + type         = "Array"
                }
              + effect         = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          + field  = "type"
                        },
                      + {
                          + field = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                          + in    = [
                              + "AmlCompute",
                              + "ComputeInstance",
                            ]
                        },
                      + {
                          + field = "Microsoft.MachineLearningServices/workspaces/computes/vmSize"
                          + notIn = "[parameters('allowedVmSizes')]"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deny public access of Azure Machine Learning clusters via SSH."
      + display_name        = "Deny public access of Azure Machine Learning clusters via SSH"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.1.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          + field  = "type"
                        },
                      + {
                          + equals = "AmlCompute"
                          + field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                },
                              + {
                                  + field     = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                  + notEquals = "Disabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-ComputeCluster-Scale.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforce scale settings for Azure Machine Learning compute clusters."
      + display_name        = "Enforce scale settings for Azure Machine Learning compute clusters"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Budget"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MachineLearning-ComputeCluster-Scale"
      + parameters          = jsonencode(
            {
              + effect                                  = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + maxNodeCount                            = {
                  + defaultValue = 10
                  + metadata     = {
                      + description = "Specifies the maximum node count of AML Clusters"
                      + displayName = "Maximum Node Count"
                    }
                  + type         = "Integer"
                }
              + maxNodeIdleTimeInSecondsBeforeScaleDown = {
                  + defaultValue = 900
                  + metadata     = {
                      + description = "Specifies the maximum node idle time in seconds before scaledown"
                      + displayName = "Maximum Node Idle Time in Seconds Before Scaledown"
                    }
                  + type         = "Integer"
                }
              + minNodeCount                            = {
                  + defaultValue = 0
                  + metadata     = {
                      + description = "Specifies the minimum node count of AML Clusters"
                      + displayName = "Minimum Node Count"
                    }
                  + type         = "Integer"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces/computes"
                          + field  = "type"
                        },
                      + {
                          + equals = "AmlCompute"
                          + field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.maxNodeCount"
                                  + greater = "[parameters('maxNodeCount')]"
                                },
                              + {
                                  + field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.minNodeCount"
                                  + greater = "[parameters('minNodeCount')]"
                                },
                              + {
                                  + greater = "[parameters('maxNodeIdleTimeInSecondsBeforeScaleDown')]"
                                  + value   = "[int(last(split(replace(replace(replace(replace(replace(replace(replace(field('Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.nodeIdleTimeBeforeScaleDown'), 'P', '/'), 'Y', '/'), 'M', '/'), 'D', '/'), 'T', '/'), 'H', '/'), 'S', ''), '/')))]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-HbiWorkspace.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforces high business impact Azure Machine Learning workspaces."
      + display_name        = "Enforces high business impact Azure Machine Learning Workspaces"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MachineLearning-HbiWorkspace"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                },
                              + {
                                  + field     = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                  + notEquals = true
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MachineLearning/AzurePolicyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deny public access behind vnet to Azure Machine Learning workspaces."
      + display_name        = "Deny public access behind vnet to Azure Machine Learning workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MachineLearning-PublicAccessWhenBehindVnet"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.MachineLearningServices/workspaces"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                },
                              + {
                                  + field     = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                  + notEquals = false
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MySQL/AzurePolicyDefinitions/Deny-MySQL-MinimalTlsVersion.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      + display_name        = "MySQL database servers enforce SSL connections."
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MySQL-MinimalTlsVersion"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minimalTlsVersion = {
                  + allowedValues = [
                      + "TLS1_2",
                      + "TLS1_0",
                      + "TLS1_1",
                      + "TLSEnforcementDisabled",
                    ]
                  + defaultValue  = "TLS1_2"
                  + metadata      = {
                      + description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                      + displayName = "Select version minimum TLS for MySQL server"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DBforMySQL/servers"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                },
                              + {
                                  + field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                  + notEquals = "Enabled"
                                },
                              + {
                                  + field     = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                  + notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/MySQL/AzurePolicyDefinitions/Deny-MySQL-SSL-Connection.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      + display_name        = "Enforce SSL connection should be enabled for MySQL database servers"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "MySQL"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-MySql-SSL-Connection"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DBforMySQL/servers"
                          + field  = "type"
                        },
                      + {
                          + exists = "true"
                          + field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                        },
                      + {
                          + field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                          + notEquals = "Enabled"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Audit-PrivateLinkDnsZones.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy audits or denies, depending on assignment effect, the creation of a Private Link Private DNS Zones in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription"
      + display_name        = "Audit or Deny the creation of Private Link Private DNS Zones"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.2"
            }
        )
      + mode                = "Indexed"
      + name                = "Audit-PrivateLinkDnsZones"
      + parameters          = jsonencode(
            {
              + effect              = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + privateLinkDnsZones = {
                  + defaultValue = [
                      + "privatelink.adf.azure.com",
                      + "privatelink.afs.azure.net",
                      + "privatelink.agentsvc.azure-automation.net",
                      + "privatelink.analysis.windows.net",
                      + "privatelink.api.azureml.ms",
                      + "privatelink.azconfig.io",
                      + "privatelink.azure-api.net",
                      + "privatelink.azure-automation.net",
                      + "privatelink.azurecr.io",
                      + "privatelink.azure-devices.net",
                      + "privatelink.azure-devices-provisioning.net",
                      + "privatelink.azuredatabricks.net",
                      + "privatelink.azurehdinsight.net",
                      + "privatelink.azurehealthcareapis.com",
                      + "privatelink.azurestaticapps.net",
                      + "privatelink.azuresynapse.net",
                      + "privatelink.azurewebsites.net",
                      + "privatelink.batch.azure.com",
                      + "privatelink.blob.core.windows.net",
                      + "privatelink.cassandra.cosmos.azure.com",
                      + "privatelink.cognitiveservices.azure.com",
                      + "privatelink.database.windows.net",
                      + "privatelink.datafactory.azure.net",
                      + "privatelink.dev.azuresynapse.net",
                      + "privatelink.dfs.core.windows.net",
                      + "privatelink.dicom.azurehealthcareapis.com",
                      + "privatelink.digitaltwins.azure.net",
                      + "privatelink.directline.botframework.com",
                      + "privatelink.documents.azure.com",
                      + "privatelink.eventgrid.azure.net",
                      + "privatelink.file.core.windows.net",
                      + "privatelink.gremlin.cosmos.azure.com",
                      + "privatelink.guestconfiguration.azure.com",
                      + "privatelink.his.arc.azure.com",
                      + "privatelink.dp.kubernetesconfiguration.azure.com",
                      + "privatelink.managedhsm.azure.net",
                      + "privatelink.mariadb.database.azure.com",
                      + "privatelink.media.azure.net",
                      + "privatelink.mongo.cosmos.azure.com",
                      + "privatelink.monitor.azure.com",
                      + "privatelink.mysql.database.azure.com",
                      + "privatelink.notebooks.azure.net",
                      + "privatelink.ods.opinsights.azure.com",
                      + "privatelink.oms.opinsights.azure.com",
                      + "privatelink.pbidedicated.windows.net",
                      + "privatelink.postgres.database.azure.com",
                      + "privatelink.prod.migration.windowsazure.com",
                      + "privatelink.purview.azure.com",
                      + "privatelink.purviewstudio.azure.com",
                      + "privatelink.queue.core.windows.net",
                      + "privatelink.redis.cache.windows.net",
                      + "privatelink.redisenterprise.cache.azure.net",
                      + "privatelink.search.windows.net",
                      + "privatelink.service.signalr.net",
                      + "privatelink.servicebus.windows.net",
                      + "privatelink.siterecovery.windowsazure.com",
                      + "privatelink.sql.azuresynapse.net",
                      + "privatelink.table.core.windows.net",
                      + "privatelink.table.cosmos.azure.com",
                      + "privatelink.tip1.powerquery.microsoft.com",
                      + "privatelink.token.botframework.com",
                      + "privatelink.vaultcore.azure.net",
                      + "privatelink.web.core.windows.net",
                      + "privatelink.webpubsub.azure.com",
                    ]
                  + metadata     = {
                      + description = "An array of Private Link Private DNS Zones to check for the existence of in the assigned scope."
                      + displayName = "Private Link Private DNS Zones"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/privateDnsZones"
                          + field  = "type"
                        },
                      + {
                          + field = "name"
                          + in    = "[parameters('privateLinkDnsZones')]"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Public IP addresses that are driving cost."
      + display_name        = "Unused Public IP addresses driving cost should be avoided"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.1.0"
            }
        )
      + mode                = "All"
      + name                = "Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "microsoft.network/publicIpAddresses"
                          + field  = "type"
                        },
                      + {
                          + equals = "Static"
                          + field  = "Microsoft.Network/publicIPAddresses/publicIPAllocationMethod"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Network/publicIPAddresses/natGateway"
                                },
                              + {
                                  + equals = true
                                  + value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/natGateway')), 0)]"
                                },
                            ]
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Network/publicIPAddresses/ipConfiguration"
                                },
                              + {
                                  + equals = true
                                  + value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/ipConfiguration')), 0)]"
                                },
                            ]
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Network/publicIPAddresses/publicIPPrefix"
                                },
                              + {
                                  + equals = true
                                  + value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/publicIPPrefix')), 0)]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-AppGW-Without-WAF.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enables you to restrict that Application Gateways is always deployed with WAF enabled"
      + display_name        = "Application Gateway should be deployed with WAF enabled"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-AppGW-Without-WAF"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/applicationGateways"
                          + field  = "type"
                        },
                      + {
                          + field     = "Microsoft.Network/applicationGateways/sku.name"
                          + notequals = "WAF_v2"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-AppGw-Without-Tls.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enables you to restrict that Application Gateways is always deployed with predefined Microsoft policy that is using TLS version 1.2"
      + display_name        = "Application Gateway should be deployed with predefined Microsoft policy that is using TLS version 1.2"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-AppGw-Without-Tls"
      + parameters          = jsonencode(
            {
              + effect               = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + predefinedPolicyName = {
                  + defaultValue = [
                      + "AppGwSslPolicy20220101",
                      + "AppGwSslPolicy20170401S",
                      + "AppGwSslPolicy20220101S",
                    ]
                  + metadata     = {
                      + description = "Predefined policy name"
                      + displayName = "Predefined policy name"
                    }
                  + type         = "array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/applicationGateways"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + field     = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                  + notEquals = "Predefined"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                },
                              + {
                                  + field = "Microsoft.Network/applicationGateways/sslPolicy.policyName"
                                  + notIn = "[parameters('predefinedPolicyName')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Firewall-WithoutPolicy.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of Azure Firewall without a default Firewall Policy."
      + display_name        = "Azure Firewall should have a default Firewall Policy"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Firewall-WithoutPolicy"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/azureFirewalls"
                          + field  = "type"
                        },
                      + {
                          + exists = "false"
                          + field  = "Microsoft.Network/azureFirewalls/firewallPolicy.id"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Inbound-Internet-All.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Prevent the creation of network security group rules that allow all inbound traffic"
      + display_name        = "Prevent NSG rule changes that allow all inbound traffic"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Inbound-Internet-All"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                          + field  = "type"
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Allow"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                },
                              + {
                                  + equals = "Inbound"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + equals = "*"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + notEquals = "*"
                                            }
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + field = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                          + in    = [
                                              + "*",
                                              + "Internet",
                                            ]
                                        },
                                      + {
                                          + not = {
                                              + field = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              + notIn = [
                                                  + "*",
                                                  + "Internet",
                                                ]
                                            }
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-NSG-MgmtPorts-From-Internet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports."
      + display_name        = "Management port access from the Internet should be blocked"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "2.1.1"
            }
        )
      + mode                = "All"
      + name                = "Deny-MgmtPorts-From-Internet"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + ports  = {
                  + defaultValue = [
                      + "22",
                      + "3389",
                    ]
                  + metadata     = {
                      + description = "Ports to be blocked"
                      + displayName = "Ports"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                                  + field  = "type"
                                },
                              + {
                                  + allOf = [
                                      + {
                                          + equals = "Allow"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                        },
                                      + {
                                          + equals = "Inbound"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                        },
                                      + {
                                          + anyOf = [
                                              + {
                                                  + equals = "*"
                                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                },
                                              + {
                                                  + field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                  + in    = "[parameters('ports')]"
                                                },
                                              + {
                                                  + count   = {
                                                      + value = "[parameters('ports')]"
                                                      + where = {
                                                          + equals = "true"
                                                          + value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current())),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current()))), 'false')]"
                                                        }
                                                    }
                                                  + greater = 0
                                                },
                                              + {
                                                  + count   = {
                                                      + name  = "ports"
                                                      + value = "[parameters('ports')]"
                                                      + where = {
                                                          + count   = {
                                                              + field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                              + where = {
                                                                  + equals = "true"
                                                                  + value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                }
                                                            }
                                                          + greater = 0
                                                        }
                                                    }
                                                  + greater = 0
                                                },
                                              + {
                                                  + not = {
                                                      + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                      + notEquals = "*"
                                                    }
                                                },
                                              + {
                                                  + not = {
                                                      + field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                      + notIn = "[parameters('ports')]"
                                                    }
                                                },
                                            ]
                                        },
                                      + {
                                          + anyOf = [
                                              + {
                                                  + equals = "*"
                                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                },
                                              + {
                                                  + equals = "Internet"
                                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                },
                                              + {
                                                  + not = {
                                                      + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                      + notEquals = "*"
                                                    }
                                                },
                                              + {
                                                  + not = {
                                                      + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                      + notEquals = "Internet"
                                                    }
                                                },
                                            ]
                                        },
                                    ]
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/networkSecurityGroups"
                                  + field  = "type"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                                      + where = {
                                          + allOf = [
                                              + {
                                                  + equals = "Allow"
                                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].access"
                                                },
                                              + {
                                                  + equals = "Inbound"
                                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].direction"
                                                },
                                              + {
                                                  + anyOf = [
                                                      + {
                                                          + equals = "*"
                                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                        },
                                                      + {
                                                          + field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                          + in    = "[parameters('ports')]"
                                                        },
                                                      + {
                                                          + count   = {
                                                              + name  = "ports"
                                                              + value = "[parameters('ports')]"
                                                              + where = {
                                                                  + equals = "true"
                                                                  + value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports')))), 'false')]"
                                                                }
                                                            }
                                                          + greater = 0
                                                        },
                                                      + {
                                                          + count   = {
                                                              + name  = "ports"
                                                              + value = "[parameters('ports')]"
                                                              + where = {
                                                                  + count   = {
                                                                      + field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                                      + where = {
                                                                          + equals = "true"
                                                                          + value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                        }
                                                                    }
                                                                  + greater = 0
                                                                }
                                                            }
                                                          + greater = 0
                                                        },
                                                      + {
                                                          + not = {
                                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                              + notEquals = "*"
                                                            }
                                                        },
                                                      + {
                                                          + not = {
                                                              + field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                              + notIn = "[parameters('ports')]"
                                                            }
                                                        },
                                                    ]
                                                },
                                              + {
                                                  + anyOf = [
                                                      + {
                                                          + equals = "*"
                                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                        },
                                                      + {
                                                          + equals = "Internet"
                                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                        },
                                                      + {
                                                          + not = {
                                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                              + notEquals = "*"
                                                            }
                                                        },
                                                      + {
                                                          + not = {
                                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                              + notEquals = "Internet"
                                                            }
                                                        },
                                                    ]
                                                },
                                            ]
                                        }
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-RDP-From-Internet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies any network security rule that allows RDP access from Internet"
      + display_name        = "RDP access from the Internet should be blocked"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-RDP-From-Internet"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                          + field  = "type"
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Allow"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                },
                              + {
                                  + equals = "Inbound"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + equals = "*"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      + {
                                          + equals = "3389"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      + {
                                          + equals = "true"
                                          + value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389)), 'false')]"
                                        },
                                      + {
                                          + count   = {
                                              + field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + where = {
                                                  + equals = "true"
                                                  + value  = "[if(and(not(empty(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')))), contains(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')),'-')), and(lessOrEquals(int(first(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389),greaterOrEquals(int(last(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389)) , 'false')]"
                                                }
                                            }
                                          + greater = 0
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + notEquals = "*"
                                            }
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + notEquals = "3389"
                                            }
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + equals = "*"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      + {
                                          + equals = "Internet"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              + notEquals = "*"
                                            }
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              + notEquals = "Internet"
                                            }
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-SSH-From-Internet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies any network security rule that allows SSH access from Internet"
      + display_name        = "SSH access from the Internet should be blocked"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-SSH-From-Internet"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                          + field  = "type"
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Allow"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                },
                              + {
                                  + equals = "Inbound"
                                  + field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + equals = "*"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      + {
                                          + equals = "22"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                        },
                                      + {
                                          + equals = "true"
                                          + value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),22),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),22)), 'false')]"
                                        },
                                      + {
                                          + count   = {
                                              + field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + where = {
                                                  + equals = "true"
                                                  + value  = "[if(and(not(empty(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')))), contains(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')),'-')), and(lessOrEquals(int(first(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),22),greaterOrEquals(int(last(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),22)) , 'false')]"
                                                }
                                            }
                                          + greater = 0
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + notEquals = "*"
                                            }
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                              + notEquals = "22"
                                            }
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + equals = "*"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      + {
                                          + equals = "Internet"
                                          + field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              + notEquals = "*"
                                            }
                                        },
                                      + {
                                          + not = {
                                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                              + notEquals = "Internet"
                                            }
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Subnet-ServiceEndpoints.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This Policy will deny/audit Service Endpoints on subnets. Service Endpoints allows the network traffic to bypass Network appliances, such as the Azure Firewall."
      + display_name        = "Deny or Audit service endpoints on subnets"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Subnet-ServiceEndpoints"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/virtualNetworks/subnets"
                          + field  = "type"
                        },
                      + {
                          + count   = {
                              + field = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*]"
                              + where = {
                                  + exists = true
                                  + field  = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*].service"
                                }
                            }
                          + greater = 0
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Subnet-Without-NSG.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level."
      + display_name        = "Subnets should have a Network Security Group"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Subnet-Without-Nsg"
      + parameters          = jsonencode(
            {
              + effect          = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + excludedSubnets = {
                  + defaultValue = [
                      + "GatewaySubnet",
                      + "AzureFirewallSubnet",
                      + "AzureFirewallManagementSubnet",
                    ]
                  + metadata     = {
                      + description = "Array of subnet names that are excluded from this policy"
                      + displayName = "Excluded Subnets"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks"
                                  + field  = "type"
                                },
                              + {
                                  + count     = {
                                      + field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      + where = {
                                          + allOf = [
                                              + {
                                                  + exists = "false"
                                                  + field  = "Microsoft.Network/virtualNetworks/subnets[*].networkSecurityGroup.id"
                                                },
                                              + {
                                                  + field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  + notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  + notEquals = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks/subnets"
                                  + field  = "type"
                                },
                              + {
                                  + field = "name"
                                  + notIn = "[parameters('excludedSubnets')]"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Network/virtualNetworks/subnets/networkSecurityGroup.id"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Subnet-Without-PrivateEndpointNetworkPolicies.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of a subnet without Private Endpoint Netwotk Policies enabled. This policy is intended for 'workload' subnets, not 'central infrastructure' (aka, 'hub') subnets."
      + display_name        = "Subnets without Private Endpoint Network Policies enabled should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Subnet-Without-PrivateEndpointNetworkPolicies"
      + parameters          = jsonencode(
            {
              + effect          = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + excludedSubnets = {
                  + defaultValue = [
                      + "GatewaySubnet",
                      + "AzureFirewallSubnet",
                      + "AzureFirewallManagementSubnet",
                      + "AzureBastionSubnet",
                    ]
                  + metadata     = {
                      + description = "Array of subnet names that are excluded from this policy"
                      + displayName = "Excluded Subnets"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks"
                                  + field  = "type"
                                },
                              + {
                                  + count     = {
                                      + field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      + where = {
                                          + allOf = [
                                              + {
                                                  + field     = "Microsoft.Network/virtualNetworks/subnets[*].privateEndpointNetworkPolicies"
                                                  + notEquals = "Enabled"
                                                },
                                              + {
                                                  + field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  + notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  + notEquals = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks/subnets"
                                  + field  = "type"
                                },
                              + {
                                  + field = "name"
                                  + notIn = "[parameters('excludedSubnets')]"
                                },
                              + {
                                  + field     = "Microsoft.Network/virtualNetworks/subnets/privateEndpointNetworkPolicies"
                                  + notEquals = "Enabled"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-Subnet-Without-UDR.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy prevents creation of subnets without a UDR attached to them."
      + display_name        = "Prevent creation of subnets without Route Table"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Subnet-Without-UDR"
      + parameters          = jsonencode(
            {
              + effect          = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + excludedSubnets = {
                  + defaultValue = [
                      + "GatewaySubnet",
                      + "AzureFirewallSubnet",
                      + "AzureFirewallManagementSubnet",
                      + "AzureBastionSubnet",
                    ]
                  + metadata     = {
                      + description = "Array of subnet names that are excluded from this policy"
                      + displayName = "Excluded Subnets"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks"
                                  + field  = "type"
                                },
                              + {
                                  + count     = {
                                      + field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                      + where = {
                                          + allOf = [
                                              + {
                                                  + exists = "false"
                                                  + field  = "Microsoft.Network/virtualNetworks/subnets[*].routeTable.id"
                                                },
                                              + {
                                                  + field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                  + notIn = "[parameters('excludedSubnets')]"
                                                },
                                            ]
                                        }
                                    }
                                  + notEquals = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks/subnets"
                                  + field  = "type"
                                },
                              + {
                                  + field = "name"
                                  + notIn = "[parameters('excludedSubnets')]"
                                },
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Network/virtualNetworks/subnets/routeTable.id"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-UDR-With-Specific-NextHop.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of a User Defined Route with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway'."
      + display_name        = "User Defined Routes with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway' should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-UDR-With-Specific-NextHop"
      + parameters          = jsonencode(
            {
              + effect               = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + excludedDestinations = {
                  + defaultValue = [
                      + "Internet",
                      + "VirtualNetworkGateway",
                    ]
                  + metadata     = {
                      + description = "Array of route destinations that are to be denied"
                      + displayName = "Excluded Destinations"
                    }
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/routeTables"
                                  + field  = "type"
                                },
                              + {
                                  + count     = {
                                      + field = "Microsoft.Network/routeTables/routes[*]"
                                      + where = {
                                          + field = "Microsoft.Network/routeTables/routes[*].nextHopType"
                                          + in    = "[parameters('excludedDestinations')]"
                                        }
                                    }
                                  + notEquals = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/routeTables/routes"
                                  + field  = "type"
                                },
                              + {
                                  + field = "Microsoft.Network/routeTables/routes/nextHopType"
                                  + in    = "[parameters('excludedDestinations')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-VNET-Peer-Cross-Sub.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of vNet Peerings outside of the same subscriptions under the assigned scope."
      + display_name        = "Deny vNet peering cross subscription."
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.1"
            }
        )
      + mode                = "All"
      + name                = "Deny-VNET-Peer-Cross-Sub"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                          + field  = "type"
                        },
                      + {
                          + field       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                          + notcontains = "[subscription().id]"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-VNET-Peering-To-Non-Approved-VNETs.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of vNet Peerings to non-approved vNets under the assigned scope."
      + display_name        = "Deny vNet peering to non-approved vNets"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-VNET-Peering-To-Non-Approved-VNETs"
      + parameters          = jsonencode(
            {
              + allowedVnets = {
                  + defaultValue = []
                  + metadata     = {
                      + description = "Array of allowed vNets that can be peered with. Must be entered using their resource ID. Example: /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}"
                      + displayName = "Allowed vNets to peer with"
                    }
                  + type         = "Array"
                }
              + effect       = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                  + field  = "type"
                                },
                              + {
                                  + not = {
                                      + field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                                      + in    = "[parameters('allowedVnets')]"
                                    }
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Network/virtualNetworks"
                                  + field  = "type"
                                },
                              + {
                                  + not = {
                                      + field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                      + in    = "[parameters('allowedVnets')]"
                                    }
                                },
                              + {
                                  + not = {
                                      + exists = false
                                      + field  = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                    }
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deny-VNet-Peering.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of vNet Peerings under the assigned scope."
      + display_name        = "Deny vNet peering "
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.1"
            }
        )
      + mode                = "All"
      + name                = "Deny-VNet-Peering"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                  + field  = "type"
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/DenyAction-Vnet-Platform.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Vnets created and managed by the platform should not be removed to ensure compliance."
      + display_name        = "Vnets created and managed by the platform should not be removed"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "DenyAction-Vnet-Platform"
      + parameters          = jsonencode(
            {
              + effect          = {
                  + allowedValues = [
                      + "denyAction",
                      + "Disabled",
                    ]
                  + defaultValue  = "denyAction"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + spokeVnetPrefix = {
                  + defaultValue = "spoke-vnet"
                  + metadata     = {
                      + description = "The prefix of the vnet spokes"
                      + displayName = "Spoke Vnet Prefix"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/virtualNetworks"
                          + field  = "type"
                        },
                      + {
                          + field = "name"
                          + like  = "[concat(parameters('spokeVnetPrefix'), '*')]"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + actionNames      = [
                          + "delete",
                        ]
                      + cascadeBehaviors = {
                          + resourceGroup = "deny"
                        }
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/DenyAction-VnetPeerings-AVNM.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Vnet Peerings created and managed by Azure Virtual Network Manager should not be removed to ensure compliance."
      + display_name        = "Vnet Peerings created and managed by Azure Virtual Network Manager should not be removed"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "DenyAction-VnetPeerings-AVNM"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "denyAction",
                      + "Disabled",
                    ]
                  + defaultValue  = "denyAction"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + vnetPeeringPrefix = {
                  + defaultValue = "AVNM_"
                  + metadata     = {
                      + description = "The prefix of the vnet peering configuration"
                      + displayName = "Vnet Peering Prefix"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                          + field  = "type"
                        },
                      + {
                          + field = "name"
                          + like  = "[concat(parameters('vnetPeeringPrefix'), '*')]"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + actionNames = [
                          + "delete",
                        ]
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deploy-DDoSProtectionPlan.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys an Azure DDoS Network Protection"
      + display_name        = "Deploy an Azure DDoS Network Protection"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.1"
            }
        )
      + mode                = "All"
      + name                = "Deploy-DDoSProtectionPlan"
      + parameters          = jsonencode(
            {
              + ddosName   = {
                  + metadata = {
                      + description = "DDoSVnet"
                      + displayName = "ddosName"
                    }
                  + type     = "String"
                }
              + ddosRegion = {
                  + metadata = {
                      + description = "DDoSVnet location"
                      + displayName = "ddosRegion"
                      + strongType  = "location"
                    }
                  + type     = "String"
                }
              + effect     = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + rgName     = {
                  + metadata = {
                      + description = "Provide name for resource group."
                      + displayName = "rgName"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Resources/subscriptions"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment        = {
                          + location   = "northeurope"
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + ddosname   = {
                                      + value = "[parameters('ddosname')]"
                                    }
                                  + ddosregion = {
                                      + value = "[parameters('ddosRegion')]"
                                    }
                                  + rgName     = {
                                      + value = "[parameters('rgName')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + ddosRegion = {
                                          + type = "String"
                                        }
                                      + ddosname   = {
                                          + type = "String"
                                        }
                                      + rgName     = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2018-05-01"
                                          + location   = "[deployment().location]"
                                          + name       = "[parameters('rgName')]"
                                          + properties = {}
                                          + type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      + {
                                          + apiVersion    = "2018-05-01"
                                          + dependsOn     = [
                                              + "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                            ]
                                          + name          = "ddosprotection"
                                          + properties    = {
                                              + mode     = "Incremental"
                                              + template = {
                                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                  + contentVersion = "1.0.0.0"
                                                  + outputs        = {}
                                                  + parameters     = {}
                                                  + resources      = [
                                                      + {
                                                          + apiVersion = "2019-12-01"
                                                          + location   = "[parameters('ddosRegion')]"
                                                          + name       = "[parameters('ddosName')]"
                                                          + properties = {}
                                                          + type       = "Microsoft.Network/ddosProtectionPlans"
                                                        },
                                                    ]
                                                }
                                            }
                                          + resourceGroup = "[parameters('rgName')]"
                                          + type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                }
                            }
                        }
                      + deploymentScope   = "subscription"
                      + existenceScope    = "resourceGroup"
                      + name              = "[parameters('ddosName')]"
                      + resourceGroupName = "[parameters('rgName')]"
                      + roleDefinitionIds = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      + type              = "Microsoft.Network/ddosProtectionPlans"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deploy-FirewallPolicy.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys Azure Firewall Manager policy in subscription where the policy is assigned."
      + display_name        = "Deploy Azure Firewall Manager policy in the subscription"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deploy-FirewallPolicy"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + fwPolicyRegion = {
                  + metadata = {
                      + description = "Select Azure region for Azure Firewall Policy"
                      + displayName = "fwPolicyRegion"
                      + strongType  = "location"
                    }
                  + type     = "String"
                }
              + fwpolicy       = {
                  + defaultValue = {}
                  + metadata     = {
                      + description = "Object describing Azure Firewall Policy"
                      + displayName = "fwpolicy"
                    }
                  + type         = "Object"
                }
              + rgName         = {
                  + metadata = {
                      + description = "Provide name for resource group."
                      + displayName = "rgName"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Resources/subscriptions"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment        = {
                          + location   = "northeurope"
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + fwPolicy       = {
                                      + value = "[parameters('fwPolicy')]"
                                    }
                                  + fwPolicyRegion = {
                                      + value = "[parameters('fwPolicyRegion')]"
                                    }
                                  + rgName         = {
                                      + value = "[parameters('rgName')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + fwPolicy       = {
                                          + type = "object"
                                        }
                                      + fwPolicyRegion = {
                                          + type = "String"
                                        }
                                      + rgName         = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2018-05-01"
                                          + location   = "[deployment().location]"
                                          + name       = "[parameters('rgName')]"
                                          + properties = {}
                                          + type       = "Microsoft.Resources/resourceGroups"
                                        },
                                      + {
                                          + apiVersion    = "2018-05-01"
                                          + dependsOn     = [
                                              + "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                            ]
                                          + name          = "fwpolicies"
                                          + properties    = {
                                              + mode     = "Incremental"
                                              + template = {
                                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                  + contentVersion = "1.0.0.0"
                                                  + outputs        = {}
                                                  + parameters     = {}
                                                  + resources      = [
                                                      + {
                                                          + apiVersion = "2019-09-01"
                                                          + dependsOn  = []
                                                          + location   = "[parameters('fwpolicy').location]"
                                                          + name       = "[parameters('fwpolicy').firewallPolicyName]"
                                                          + properties = {}
                                                          + resources  = [
                                                              + {
                                                                  + apiVersion = "2019-09-01"
                                                                  + dependsOn  = [
                                                                      + "[resourceId('Microsoft.Network/firewallPolicies',parameters('fwpolicy').firewallPolicyName)]",
                                                                    ]
                                                                  + name       = "[parameters('fwpolicy').ruleGroups.name]"
                                                                  + properties = {
                                                                      + priority = "[parameters('fwpolicy').ruleGroups.properties.priority]"
                                                                      + rules    = "[parameters('fwpolicy').ruleGroups.properties.rules]"
                                                                    }
                                                                  + type       = "ruleGroups"
                                                                },
                                                            ]
                                                          + tags       = {}
                                                          + type       = "Microsoft.Network/firewallPolicies"
                                                        },
                                                    ]
                                                  + variables      = {}
                                                }
                                            }
                                          + resourceGroup = "[parameters('rgName')]"
                                          + type          = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                }
                            }
                        }
                      + deploymentScope   = "subscription"
                      + existenceScope    = "resourceGroup"
                      + resourceGroupName = "[parameters('rgName')]"
                      + roleDefinitionIds = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                        ]
                      + type              = "Microsoft.Network/firewallPolicies"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Deploy-RouteTable-Platform.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys a route table with specific user defined routes when one does not exist. The route table deployed by the policy must be manually associated to subnet(s)"
      + display_name        = "Deploy a route table with specific user defined routes"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deploy-RouteTable-Platform"
      + parameters          = jsonencode(
            {
              + disableBgpPropagation = {
                  + defaultValue = false
                  + metadata     = {
                      + description = "Disable BGP Propagation"
                      + displayName = "DisableBgpPropagation"
                    }
                  + type         = "Boolean"
                }
              + effect                = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + requiredRoutes        = {
                  + metadata = {
                      + description = "Routes that must exist in compliant route tables deployed by this policy"
                      + displayName = "requiredRoutes"
                    }
                  + type     = "Array"
                }
              + routeTableName        = {
                  + metadata = {
                      + description = "Name of the route table automatically deployed by this policy"
                      + displayName = "routeTableName"
                    }
                  + type     = "String"
                }
              + vnetRegion            = {
                  + metadata = {
                      + description = "Only VNets in this region will be evaluated against this policy"
                      + displayName = "vnetRegion"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/virtualNetworks"
                          + field  = "type"
                        },
                      + {
                          + equals = "[parameters('vnetRegion')]"
                          + field  = "location"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "incremental"
                              + parameters = {
                                  + disableBgpPropagation = {
                                      + value = "[parameters('disableBgpPropagation')]"
                                    }
                                  + requiredRoutes        = {
                                      + value = "[parameters('requiredRoutes')]"
                                    }
                                  + routeTableName        = {
                                      + value = "[parameters('routeTableName')]"
                                    }
                                  + vnetRegion            = {
                                      + value = "[parameters('vnetRegion')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + parameters     = {
                                      + disableBgpPropagation = {
                                          + type = "bool"
                                        }
                                      + requiredRoutes        = {
                                          + type = "array"
                                        }
                                      + routeTableName        = {
                                          + type = "string"
                                        }
                                      + vnetRegion            = {
                                          + type = "string"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-04-01"
                                          + name       = "routeTableDepl"
                                          + properties = {
                                              + mode       = "Incremental"
                                              + parameters = {
                                                  + disableBgpPropagation = {
                                                      + value = "[parameters('disableBgpPropagation')]"
                                                    }
                                                  + requiredRoutes        = {
                                                      + value = "[parameters('requiredRoutes')]"
                                                    }
                                                  + routeTableName        = {
                                                      + value = "[parameters('routeTableName')]"
                                                    }
                                                  + vnetRegion            = {
                                                      + value = "[parameters('vnetRegion')]"
                                                    }
                                                }
                                              + template   = {
                                                  + "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                  + contentVersion = "1.0.0.0"
                                                  + parameters     = {
                                                      + disableBgpPropagation = {
                                                          + type = "bool"
                                                        }
                                                      + requiredRoutes        = {
                                                          + type = "array"
                                                        }
                                                      + routeTableName        = {
                                                          + type = "string"
                                                        }
                                                      + vnetRegion            = {
                                                          + type = "string"
                                                        }
                                                    }
                                                  + resources      = [
                                                      + {
                                                          + apiVersion = "2021-02-01"
                                                          + location   = "[[parameters('vnetRegion')]"
                                                          + name       = "[[parameters('routeTableName')]"
                                                          + properties = {
                                                              + copy                       = "[variables('copyLoop')]"
                                                              + disableBgpRoutePropagation = "[[parameters('disableBgpPropagation')]"
                                                            }
                                                          + type       = "Microsoft.Network/routeTables"
                                                        },
                                                    ]
                                                }
                                            }
                                          + type       = "Microsoft.Resources/deployments"
                                        },
                                    ]
                                  + variables      = {
                                      + copyLoop = [
                                          + {
                                              + count = "[[length(parameters('requiredRoutes'))]"
                                              + input = {
                                                  + name       = "[[concat('route-',copyIndex('routes'))]"
                                                  + properties = {
                                                      + addressPrefix    = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[0]]"
                                                      + nextHopIpAddress = "[[if(equals(toLower(split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]),'virtualappliance'),split(parameters('requiredRoutes')[copyIndex('routes')], ';')[2], null())]"
                                                      + nextHopType      = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]]"
                                                    }
                                                }
                                              + name  = "routes"
                                            },
                                        ]
                                    }
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('routeTableName')]"
                                  + field  = "name"
                                },
                              + {
                                  + count  = {
                                      + field = "Microsoft.Network/routeTables/routes[*]"
                                      + where = {
                                          + in    = "[parameters('requiredRoutes')]"
                                          + value = "[concat(current('Microsoft.Network/routeTables/routes[*].addressPrefix'), ';', current('Microsoft.Network/routeTables/routes[*].nextHopType'), if(equals(toLower(current('Microsoft.Network/routeTables/routes[*].nextHopType')),'virtualappliance'), concat(';', current('Microsoft.Network/routeTables/routes[*].nextHopIpAddress')), ''))]"
                                        }
                                    }
                                  + equals = "[length(parameters('requiredRoutes'))]"
                                },
                            ]
                        }
                      + roleDefinitionIds  = [
                          + "/subscriptions/e867a45d-e513-44ac-931e-4741cef80b24/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      + type               = "Microsoft.Network/routeTables"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-ApplicationGateway.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-ApplicationGateway"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/applicationGateways"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + category = "ApplicationGatewayAccessLog"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "ApplicationGatewayPerformanceLog"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "ApplicationGatewayFirewallLog"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/applicationGateways/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "setByPolicy"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-ExpressRouteCircuit.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-ExpressRouteCircuit"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/expressRouteCircuits"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/expressRouteCircuits/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-Firewall.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Azure Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Azure Firewall to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-Firewall"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "False"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/azureFirewalls"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + category = "AzureFirewallApplicationRule"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AzureFirewallNetworkRule"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AzureFirewallDnsProxy"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWNetworkRule"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWApplicationRule"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWNatRule"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWThreatIntel"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWIdpsSignature"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWDnsQuery"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWFqdnResolveFailure"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWApplicationRuleAggregation"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWNetworkRuleAggregation"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  + {
                                                      + category = "AZFWNatRuleAggregation"
                                                      + enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/azureFirewalls/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "setByPolicy"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-FrontDoor.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Front Door to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-FrontDoor"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable log stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/frontDoors"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/frontDoors/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-LoadBalancer.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-LoadBalancer"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable log stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "False"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/loadBalancers"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/loadBalancers/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-TrafficManager.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-TrafficManager"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable log stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/trafficManagerProfiles"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "string"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/trafficManagerProfiles/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-Diagnostics-Vnet.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-Vnet"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + logsEnabled    = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable log stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable logs"
                    }
                  + type          = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Network/virtualNetworks"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + logsEnabled    = {
                                      + value = "[parameters('logsEnabled')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + logsEnabled    = {
                                          + type = "string"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.Network/virtualNetworks/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "[parameters('logsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "[parameters('metricsEnabled')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Dine-PrivateEndpoints-PrivateDnsZoneGroups.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Configure private DNS zone group to override the DNS resolution for PaaS services private endpoint. See https://aka.ms/pepdnszones for information on values to provide to parameters in this policy."
      + display_name        = "Deploy-Private-DNS-Generic"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Networking"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deploy-Private-DNS-Generic"
      + parameters          = jsonencode(
            {
              + effect           = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + evaluationDelay  = {
                  + defaultValue = "PT10M"
                  + metadata     = {
                      + description = "The delay in evaluation of the policy. Review delay options at https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effect-deploy-if-not-exists"
                      + displayName = "Evaluation Delay"
                    }
                  + type         = "String"
                }
              + groupId          = {
                  + metadata = {
                      + description = "The group ID of the PaaS private endpoint. Also referred to as subresource."
                      + displayName = "PaaS Private endpoint group ID (subresource)"
                    }
                  + type     = "String"
                }
              + privateDnsZoneId = {
                  + metadata = {
                      + assignPermissions = true
                      + description       = "The private DNS zone name required for specific Paas Services to resolve a private DNS Zone."
                      + displayName       = "Private DNS Zone ID for Paas services"
                      + strongType        = "Microsoft.Network/privateDnsZones"
                    }
                  + type     = "String"
                }
              + resourceType     = {
                  + metadata = {
                      + description = "The PaaS endpoint resource type."
                      + displayName = "PaaS private endpoint resource type"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/privateEndpoints"
                          + field  = "type"
                        },
                      + {
                          + count           = {
                              + field = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*]"
                              + where = {
                                  + allOf = [
                                      + {
                                          + contains = "[parameters('resourceType')]"
                                          + field    = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId"
                                        },
                                      + {
                                          + equals = "[parameters('groupId')]"
                                          + field  = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]"
                                        },
                                    ]
                                }
                            }
                          + greaterOrEquals = 1
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment        = {
                          + properties = {
                              + mode       = "incremental"
                              + parameters = {
                                  + location            = {
                                      + value = "[field('location')]"
                                    }
                                  + privateDnsZoneId    = {
                                      + value = "[parameters('privateDnsZoneId')]"
                                    }
                                  + privateEndpointName = {
                                      + value = "[field('name')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + parameters     = {
                                      + location            = {
                                          + type = "string"
                                        }
                                      + privateDnsZoneId    = {
                                          + type = "string"
                                        }
                                      + privateEndpointName = {
                                          + type = "string"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2020-03-01"
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('privateEndpointName'), '/deployedByPolicy')]"
                                          + properties = {
                                              + privateDnsZoneConfigs = [
                                                  + {
                                                      + name       = "PaaS-Service-Private-DNS-Zone-Config"
                                                      + properties = {
                                                          + privateDnsZoneId = "[parameters('privateDnsZoneId')]"
                                                        }
                                                    },
                                                ]
                                            }
                                          + type       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                        },
                                    ]
                                }
                            }
                        }
                      + evaluationDelay   = "[parameters('evaluationDelay')]"
                      + roleDefinitionIds = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                      + type              = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Modify-NSG.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enforces the configuration of Network Security Groups (NSG)."
      + display_name        = "Enforce specific configuration of Network Security Groups (NSG)"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Modify-NSG"
      + parameters          = jsonencode(
            {
              + effect                          = {
                  + allowedValues = [
                      + "Disabled",
                      + "Modify",
                    ]
                  + defaultValue  = "Modify"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + nsgRuleAccess                   = {
                  + allowedValues = [
                      + "Allow",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + type          = "string"
                }
              + nsgRuleDescription              = {
                  + defaultValue = "Deny any outbound traffic to the Internet"
                  + type         = "string"
                }
              + nsgRuleDestinationAddressPrefix = {
                  + defaultValue = "Internet"
                  + type         = "string"
                }
              + nsgRuleDestinationPortRange     = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + nsgRuleDirection                = {
                  + allowedValues = [
                      + "Inbound",
                      + "Outbound",
                    ]
                  + defaultValue  = "Outbound"
                  + type          = "string"
                }
              + nsgRuleName                     = {
                  + defaultValue = "DenyAnyInternetOutbound"
                  + type         = "string"
                }
              + nsgRulePriority                 = {
                  + defaultValue = 1000
                  + type         = "integer"
                }
              + nsgRuleProtocol                 = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + nsgRuleSourceAddressPrefix      = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + nsgRuleSourcePortRange          = {
                  + defaultValue = "*"
                  + type         = "string"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/networkSecurityGroups"
                          + field  = "type"
                        },
                      + {
                          + count  = {
                              + field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                            }
                          + equals = 0
                        },
                    ]
                }
              + then = {
                  + details = {
                      + conflictEffect    = "audit"
                      + operations        = [
                          + {
                              + field     = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                              + operation = "add"
                              + value     = {
                                  + name       = "[parameters('nsgRuleName')]"
                                  + properties = {
                                      + access                   = "[parameters('nsgRuleAccess')]"
                                      + description              = "[parameters('nsgRuleDescription')]"
                                      + destinationAddressPrefix = "[parameters('nsgRuleDestinationAddressPrefix')]"
                                      + destinationPortRange     = "[parameters('nsgRuleDestinationPortRange')]"
                                      + direction                = "[parameters('nsgRuleDirection')]"
                                      + priority                 = "[parameters('nsgRulePriority')]"
                                      + protocol                 = "[parameters('nsgRuleProtocol')]"
                                      + sourceAddressPrefix      = "[parameters('nsgRuleSourceAddressPrefix')]"
                                      + sourcePortRange          = "[parameters('nsgRuleSourcePortRange')]"
                                    }
                                }
                            },
                        ]
                      + roleDefinitionIds = [
                          + "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Network/AzurePolicyDefinitions/Modify-UDR.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy enforces the configuration of User-Defined Routes (UDR) within a subnet."
      + display_name        = "Enforce specific configuration of User-Defined Routes (UDR)"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Modify-UDR"
      + parameters          = jsonencode(
            {
              + addressPrefix    = {
                  + metadata = {
                      + description = "The destination IP address range in CIDR notation that this Policy checks for within the UDR. Example: 0.0.0.0/0 to check for the presence of a default route."
                      + displayName = "Address Prefix"
                    }
                  + type     = "string"
                }
              + effect           = {
                  + allowedValues = [
                      + "Disabled",
                      + "Modify",
                    ]
                  + defaultValue  = "Modify"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + nextHopIpAddress = {
                  + metadata = {
                      + description = "The IP address packets should be forwarded to."
                      + displayName = "Next Hop IP Address"
                    }
                  + type     = "string"
                }
              + nextHopType      = {
                  + allowedValues = [
                      + "VnetLocal",
                      + "VirtualNetworkGateway",
                      + "Internet",
                      + "VirtualAppliance",
                      + "None",
                    ]
                  + metadata      = {
                      + description = "The next hope type that the policy checks for within the inspected route. The value can be Virtual Network, Virtual Network Gateway, Internet, Virtual Appliance, or None."
                      + displayName = "Next Hop Type"
                    }
                  + type          = "string"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Network/routeTables"
                          + field  = "type"
                        },
                      + {
                          + count  = {
                              + field = "Microsoft.Network/routeTables/routes[*]"
                            }
                          + equals = 0
                        },
                    ]
                }
              + then = {
                  + details = {
                      + conflictEffect    = "audit"
                      + operations        = [
                          + {
                              + field     = "Microsoft.Network/routeTables/routes[*]"
                              + operation = "add"
                              + value     = {
                                  + name       = "default"
                                  + properties = {
                                      + addressPrefix    = "[parameters('addressPrefix')]"
                                      + nextHopIpAddress = "[parameters('nextHopIpAddress')]"
                                      + nextHopType      = "[parameters('nextHopType')]"
                                    }
                                }
                            },
                        ]
                      + roleDefinitionIds = [
                          + "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                        ]
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/PostgreSQL/AzurePolicyDefinitions/Deny-PostgreSql-MinimalTlsVersion.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      + display_name        = "PostgreSQL database servers enforce SSL connection."
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-PostgreSql-MinimalTlsVersion"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minimalTlsVersion = {
                  + allowedValues = [
                      + "TLS1_2",
                      + "TLS1_0",
                      + "TLS1_1",
                      + "TLSEnforcementDisabled",
                    ]
                  + defaultValue  = "TLS1_2"
                  + metadata      = {
                      + description = "Select version  minimum TLS version Azure Database for PostgreSQL server to enforce"
                      + displayName = "Select version minimum TLS for PostgreSQL server"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DBforPostgreSQL/servers"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                },
                              + {
                                  + field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                  + notEquals = "Enabled"
                                },
                              + {
                                  + field     = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                  + notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/PostgreSQL/AzurePolicyDefinitions/Deny-PostgreSql-SSL.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
      + display_name        = "Enforce SSL connection should be enabled for PostgreSQL database servers"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "PostgreSQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-PostgreSql-SSL"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.DBforPostgreSQL/servers"
                          + field  = "type"
                        },
                      + {
                          + exists = "true"
                          + field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                        },
                      + {
                          + field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                          + notEquals = "Enabled"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/PostgreSQL/AzurePolicyDefinitions/Dine-Diagnostics-PostgreSQL.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploys the diagnostic settings for Database for PostgreSQL (server and flexible) to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled"
      + display_name        = "Deploy Diagnostic Settings for Database for PostgreSQL (server and flexible server) to Log Analytics workspace"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "PostgreSQL"
              + version  = "2.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Diagnostics-PostgreSQL"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + logAnalytics   = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + metricsEnabled = {
                  + allowedValues = [
                      + "True",
                      + "False",
                    ]
                  + defaultValue  = "True"
                  + metadata      = {
                      + description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                      + displayName = "Enable metrics"
                    }
                  + type          = "String"
                }
              + profileName    = {
                  + defaultValue = "setbypolicy"
                  + metadata     = {
                      + description = "The diagnostic settings profile name"
                      + displayName = "Profile name"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + equals = "Microsoft.DBforPostgreSQL/flexibleServers"
                          + field  = "type"
                        },
                      + {
                          + equals = "Microsoft.DBforPostgreSQL/servers"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location       = {
                                      + value = "[field('location')]"
                                    }
                                  + logAnalytics   = {
                                      + value = "[parameters('logAnalytics')]"
                                    }
                                  + metricsEnabled = {
                                      + value = "[parameters('metricsEnabled')]"
                                    }
                                  + profileName    = {
                                      + value = "[parameters('profileName')]"
                                    }
                                  + resourceName   = {
                                      + value = "[field('name')]"
                                    }
                                  + resourceType   = {
                                      + value = "[field('type')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location       = {
                                          + type = "String"
                                        }
                                      + logAnalytics   = {
                                          + type = "String"
                                        }
                                      + metricsEnabled = {
                                          + type = "String"
                                        }
                                      + profileName    = {
                                          + type = "String"
                                        }
                                      + resourceName   = {
                                          + type = "String"
                                        }
                                      + resourceType   = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/flexibleServers')]"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.DBforPostgreSQL/flexibleServers/providers/diagnosticSettings"
                                        },
                                      + {
                                          + apiVersion = "2021-05-01-preview"
                                          + condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/servers')]"
                                          + dependsOn  = []
                                          + location   = "[parameters('location')]"
                                          + name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                          + properties = {
                                              + logs        = [
                                                  + {
                                                      + categoryGroup = "allLogs"
                                                      + enabled       = true
                                                    },
                                                ]
                                              + metrics     = [
                                                  + {
                                                      + category        = "AllMetrics"
                                                      + enabled         = "[parameters('metricsEnabled')]"
                                                      + retentionPolicy = {
                                                          + days    = 0
                                                          + enabled = false
                                                        }
                                                      + timeGrain       = null
                                                    },
                                                ]
                                              + workspaceId = "[parameters('logAnalytics')]"
                                            }
                                          + type       = "Microsoft.DBforPostgreSQL/servers/providers/diagnosticSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                },
                              + {
                                  + equals = "[parameters('logAnalytics')]"
                                  + field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                },
                            ]
                        }
                      + name               = "[parameters('profileName')]"
                      + roleDefinitionIds  = [
                          + "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                        ]
                      + type               = "Microsoft.Insights/diagnosticSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Deny-Sql-Db-Public-Endpoint.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Private endpoint connections enforce secure communication by enabling private connectivity to Azure SQL Database."
      + display_name        = "Private endpoint connections on Azure SQL Database should be enabled"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Sql-Db-Public-Endpoint"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Sql/servers"
                          + field  = "type"
                        },
                      + {
                          + count = {
                              + field = "Microsoft.Sql/servers/privateEndpointConnections[*]"
                              + where = {
                                  + equals = "Approved"
                                  + field  = "Microsoft.Sql/servers/privateEndpointConnections[*].privateLinkServiceConnectionState.status"
                                }
                            }
                          + less  = 1
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Deny-Sql-MinimalTlsVersion.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities."
      + display_name        = "Azure SQL Database should have the minimal TLS version set to the highest version"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Sql-MinimalTlsVersion"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Disabled",
                      + "Deny",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minimalTlsVersion = {
                  + allowedValues = [
                      + "1.2",
                      + "1.1",
                      + "1.0",
                    ]
                  + defaultValue  = "1.2"
                  + metadata      = {
                      + description = "Select version minimum TLS version SQL servers to enforce"
                      + displayName = "Select version for SQL server"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Sql/servers"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Sql/servers/minimalTlsVersion"
                                },
                              + {
                                  + field     = "Microsoft.Sql/servers/minimalTlsVersion"
                                  + notequals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Deny-SqlMi-MinimalTlsVersion.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
      + display_name        = "SQL Managed Instance should have the minimal TLS version of 1.2"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-SqlMi-MinimalTlsVersion"
      + parameters          = jsonencode(
            {
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minimalTlsVersion = {
                  + allowedValues = [
                      + "1.2",
                      + "1.1",
                      + "1.0",
                    ]
                  + defaultValue  = "1.2"
                  + metadata      = {
                      + description = "Select version minimum TLS version SQL servers to enforce"
                      + displayName = "Select version for SQL server"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Sql/managedInstances"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                },
                              + {
                                  + field     = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                  + notEquals = "[parameters('minimalTlsVersion')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Dine-Sql-AuditingSettings.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploy auditing settings to SQL Database when it not exist in the deployment"
      + display_name        = "Deploy SQL database auditing settings"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Sql-AuditingSettings"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Sql/servers/databases"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location              = {
                                      + value = "[field('location')]"
                                    }
                                  + sqlServerDataBaseName = {
                                      + value = "[field('name')]"
                                    }
                                  + sqlServerName         = {
                                      + value = "[first(split(field('fullname'),'/'))]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location              = {
                                          + type = "String"
                                        }
                                      + sqlServerDataBaseName = {
                                          + type = "String"
                                        }
                                      + sqlServerName         = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-03-01-preview"
                                          + name       = "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          + properties = {
                                              + auditActionsAndGroups       = [
                                                  + "BATCH_COMPLETED_GROUP",
                                                  + "DATABASE_OBJECT_CHANGE_GROUP",
                                                  + "SCHEMA_OBJECT_CHANGE_GROUP",
                                                  + "BACKUP_RESTORE_GROUP",
                                                  + "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
                                                  + "DATABASE_PRINCIPAL_CHANGE_GROUP",
                                                  + "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
                                                  + "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
                                                  + "USER_CHANGE_PASSWORD_GROUP",
                                                  + "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
                                                  + "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
                                                  + "DATABASE_PERMISSION_CHANGE_GROUP",
                                                  + "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
                                                  + "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                                                  + "FAILED_DATABASE_AUTHENTICATION_GROUP",
                                                ]
                                              + isAzureMonitorTargetEnabled = true
                                              + state                       = "enabled"
                                            }
                                          + type       = "Microsoft.Sql/servers/databases/auditingSettings"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "enabled"
                                  + field  = "Microsoft.Sql/servers/databases/auditingSettings/state"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Sql/servers/databases/auditingSettings/isAzureMonitorTargetEnabled"
                                },
                            ]
                        }
                      + name               = "default"
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                        ]
                      + type               = "Microsoft.Sql/servers/databases/auditingSettings"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Dine-Sql-SecurityAlertPolicies.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
      + display_name        = "Deploy SQL Database security Alert Policies configuration with email admin accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.1.1"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Sql-SecurityAlertPolicies"
      + parameters          = jsonencode(
            {
              + effect         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + emailAddresses = {
                  + defaultValue = [
                      + "admin@contoso.com",
                      + "admin@fabrikam.com",
                    ]
                  + type         = "Array"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Sql/servers/databases"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + emailAddresses        = {
                                      + value = "[parameters('emailAddresses')]"
                                    }
                                  + location              = {
                                      + value = "[field('location')]"
                                    }
                                  + sqlServerDataBaseName = {
                                      + value = "[field('name')]"
                                    }
                                  + sqlServerName         = {
                                      + value = "[first(split(field('fullname'),'/'))]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + emailAddresses        = {
                                          + type = "Array"
                                        }
                                      + location              = {
                                          + type = "String"
                                        }
                                      + sqlServerDataBaseName = {
                                          + type = "String"
                                        }
                                      + sqlServerName         = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2018-06-01-preview"
                                          + name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          + properties = {
                                              + disabledAlerts          = [
                                                  + "",
                                                ]
                                              + emailAccountAdmins      = true
                                              + emailAddresses          = "[parameters('emailAddresses')]"
                                              + retentionDays           = 0
                                              + state                   = "Enabled"
                                              + storageAccountAccessKey = ""
                                              + storageEndpoint         = null
                                            }
                                          + type       = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + equals = "Enabled"
                                  + field  = "Microsoft.Sql/servers/databases/securityAlertPolicies/state"
                                },
                            ]
                        }
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                        ]
                      + type               = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/SQL/AzurePolicyDefinitions/Dine-Sql-VulnerabilityAssessments.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deploy SQL Database Vulnerability Assessments when it does not exist in the deployment, and save results to the storage account specified in the parameters."
      + display_name        = "Deploy SQL Database Vulnerability Assessments"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Dine-Sql-VulnerabilityAssessments"
      + parameters          = jsonencode(
            {
              + effect                            = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + vulnerabilityAssessmentsEmail     = {
                  + metadata = {
                      + description = "The email address(es) to send alerts."
                      + displayName = "The email address(es) to send alerts."
                    }
                  + type     = "Array"
                }
              + vulnerabilityAssessmentsStorageID = {
                  + metadata = {
                      + description = "The storage account ID to store assessments"
                      + displayName = "The storage account ID to store assessments"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + equals = "Microsoft.Sql/servers/databases"
                  + field  = "type"
                }
              + then = {
                  + details = {
                      + deployment         = {
                          + properties = {
                              + mode       = "Incremental"
                              + parameters = {
                                  + location                          = {
                                      + value = "[field('location')]"
                                    }
                                  + sqlServerDataBaseName             = {
                                      + value = "[field('name')]"
                                    }
                                  + sqlServerName                     = {
                                      + value = "[first(split(field('fullname'),'/'))]"
                                    }
                                  + vulnerabilityAssessmentsEmail     = {
                                      + value = "[parameters('vulnerabilityAssessmentsEmail')]"
                                    }
                                  + vulnerabilityAssessmentsStorageID = {
                                      + value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                                    }
                                }
                              + template   = {
                                  + "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                  + contentVersion = "1.0.0.0"
                                  + outputs        = {}
                                  + parameters     = {
                                      + location                          = {
                                          + type = "String"
                                        }
                                      + sqlServerDataBaseName             = {
                                          + type = "String"
                                        }
                                      + sqlServerName                     = {
                                          + type = "String"
                                        }
                                      + vulnerabilityAssessmentsEmail     = {
                                          + type = "Array"
                                        }
                                      + vulnerabilityAssessmentsStorageID = {
                                          + type = "String"
                                        }
                                    }
                                  + resources      = [
                                      + {
                                          + apiVersion = "2017-03-01-preview"
                                          + name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                          + properties = {
                                              + recurringScans          = {
                                                  + emailSubscriptionAdmins = false
                                                  + emails                  = "[parameters('vulnerabilityAssessmentsEmail')]"
                                                  + isEnabled               = true
                                                }
                                              + storageAccountAccessKey = "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                                              + storageContainerPath    = "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]"
                                            }
                                          + type       = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                                        },
                                    ]
                                  + variables      = {}
                                }
                            }
                        }
                      + existenceCondition = {
                          + allOf = [
                              + {
                                  + count   = {
                                      + field = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*]"
                                      + where = {
                                          + notIn = "[parameters('vulnerabilityAssessmentsEmail')]"
                                          + value = "current(Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*])"
                                        }
                                    }
                                  + greater = 0
                                },
                              + {
                                  + equals = true
                                  + field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled"
                                },
                            ]
                        }
                      + roleDefinitionIds  = [
                          + "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                          + "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                          + "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                        ]
                      + type               = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                    }
                  + effect  = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/ServiceBus/AzurePolicyDefinitions/Deny-ServiceBus-CMK.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Service Bus supports the option of encrypting data at rest with either Microsoft-managed keys (default) or customer-managed keys. Choosing to encrypt data using customer-managed keys enables you to assign, rotate, disable, and revoke access to the keys that Service Bus will use to encrypt data in your namespace. Note that Service Bus only supports encryption with customer-managed keys for premium namespaces."
      + display_name        = "Service Bus Premium namespaces must use a customer-managed key for encryption"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Service Bus"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-ServiceBus-CMK"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.ServiceBus/namespaces"
                          + field  = "type"
                        },
                      + {
                          + equals = "Premium"
                          + field  = "Microsoft.ServiceBus/namespaces/sku.tier"
                        },
                      + {
                          + not = {
                              + equals = "Microsoft.Keyvault"
                              + field  = "Microsoft.ServiceBus/namespaces/encryption.keySource"
                            }
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-AllowBlobPublicAccess.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict blob access to private. Enforce this for increased data exfiltration protection."
      + display_name        = "Public blob access should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-AllowBlobPublicAccess"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Storage/storageAccounts/allowBlobPublicAccess"
                                },
                              + {
                                  + field     = "Microsoft.Storage/storageAccounts/allowBlobPublicAccess"
                                  + notEquals = false
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-Cmk.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Secure your blob and file storage account with greater flexibility using customer-managed keys. When you specify a customer-managed key, that key is used to protect and control access to the key that encrypts your data. Using customer-managed keys provides additional capabilities to control rotation of the key encryption key or cryptographically erase data."
      + display_name        = "Storage accounts should use customer-managed key for encryption"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.3"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-Cmk"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + not = {
                              + equals = "Microsoft.Keyvault"
                              + field  = "Microsoft.Storage/storageAccounts/encryption.keySource"
                            }
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-ContainerDeleteRetentionPolicy.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Enforce container delete retention policies larger than seven days for storage account. Enable this for increased data loss protection"
      + display_name        = "Storage Accounts should use a container delete retention policy"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Storage-ContainerDeleteRetentionPolicy"
      + parameters          = jsonencode(
            {
              + effect                            = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + minContainerDeleteRetentionInDays = {
                  + defaultValue = 7
                  + metadata     = {
                      + description = "Specifies the minimum number of days for the container delete retention policy"
                      + displayName = "Minimum Container Delete Retention in Days"
                    }
                  + type         = "Integer"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts/blobServices"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = false
                                  + field  = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                },
                              + {
                                  + field     = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                  + notEquals = true
                                },
                              + {
                                  + field = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.days"
                                  + less  = "[parameters('minContainerDeleteRetentionInDays')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-CopyScope.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict the allowed copy scope. Enforce this for increased data exfiltration protection."
      + display_name        = "Allowed Copy scope should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-CopyScope"
      + parameters          = jsonencode(
            {
              + allowedCopyScope = {
                  + allowedValues = [
                      + "AAD",
                      + "PrivateLink",
                    ]
                  + defaultValue  = "AAD"
                  + metadata      = {
                      + description = "Specify the allowed copy scope."
                      + displayName = "Allowed Copy Scope"
                    }
                  + type          = "String"
                }
              + effect           = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                },
                              + {
                                  + field     = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                  + notEquals = "[parameters('allowedCopyScope')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-CorsRules.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Deny cors rules for storage account for increased data exfiltration protection and endpoint protection."
      + display_name        = "Storage Accounts should restrict CORS rules"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Storage-CorsRules"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + anyOf = [
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Storage/storageAccounts/blobServices"
                                  + field  = "type"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Storage/storageAccounts/blobServices/cors.corsRules[*]"
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Storage/storageAccounts/fileServices"
                                  + field  = "type"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Storage/storageAccounts/fileServices/cors.corsRules[*]"
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Storage/storageAccounts/tableServices"
                                  + field  = "type"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Storage/storageAccounts/tableServices/cors.corsRules[*]"
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                      + {
                          + allOf = [
                              + {
                                  + equals = "Microsoft.Storage/storageAccounts/queueServices"
                                  + field  = "type"
                                },
                              + {
                                  + count   = {
                                      + field = "Microsoft.Storage/storageAccounts/queueServices/cors.corsRules[*]"
                                    }
                                  + greater = 0
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-CustomDomain.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the creation of Storage Accounts with custom domains assigned as communication cannot be encrypted, and always uses HTTP."
      + display_name        = "Storage Accounts with custom domains assigned should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Storage-CustomDomain"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "true"
                                  + field  = "Microsoft.Storage/storageAccounts/customDomain"
                                },
                              + {
                                  + equals = "true"
                                  + field  = "Microsoft.Storage/storageAccounts/customDomain.useSubDomainName"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-LocalUser.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should disable local users for features like SFTP. Enforce this for increased data exfiltration protection."
      + display_name        = "Local users should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-LocalUser"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                },
                              + {
                                  + field     = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                  + notEquals = false
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-NetworkAclsBypass.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict the bypass option for service-level network ACLs. Enforce this for increased data exfiltration protection."
      + display_name        = "Network ACL bypass option should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-NetworkAclsBypass"
      + parameters          = jsonencode(
            {
              + allowedBypassOptions = {
                  + allowedValues = [
                      + "None",
                      + "Logging",
                      + "Metrics",
                      + "AzureServices",
                      + "Logging, Metrics",
                      + "Logging, AzureServices",
                      + "Metrics, AzureServices",
                      + "Logging, Metrics, AzureServices",
                      + "Logging, Metrics, AzureServices",
                    ]
                  + defaultValue  = [
                      + "Logging",
                      + "Metrics",
                      + "AzureServices",
                      + "Logging, Metrics",
                      + "Logging, AzureServices",
                      + "Metrics, AzureServices",
                      + "Logging, Metrics, AzureServices",
                      + "Logging, Metrics, AzureServices",
                    ]
                  + metadata      = {
                      + description = "Specifies which options are allowed to bypass the vnet configuration"
                      + displayName = "Allowed Bypass Options"
                    }
                  + type          = "Array"
                }
              + effect               = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                },
                              + {
                                  + field = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                  + notIn = "[parameters('allowedBypassOptions')]"
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-NetworkAclsVirtualNetworkRules.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict the virtual network service-level network ACLs. Enforce this for increased data exfiltration protection."
      + display_name        = "Virtual network rules should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-NetworkAclsVirtualNetworkRules"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + count   = {
                              + field = "Microsoft.Storage/storageAccounts/networkAcls.virtualNetworkRules[*]"
                            }
                          + greater = 0
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-ResourceAccessRulesResourceId.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to services from a specific Azure subscription. Enforce this for increased data exfiltration protection."
      + display_name        = "Resource Access Rules resource IDs should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-ResourceAccessRulesResourceId"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + count   = {
                              + field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                            }
                          + greater = 0
                        },
                      + {
                          + count   = {
                              + field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                              + where = {
                                  + equals = "*"
                                  + value  = "[split(current('Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].resourceId'), '/')[2]]"
                                }
                            }
                          + greater = 0
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-ResourceAccessRulesTenantId.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to service from the same AAD tenant. Enforce this for increased data exfiltration protection."
      + display_name        = "Resource Access Rules Tenants should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-ResourceAccessRulesTenantId"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + count   = {
                              + field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                            }
                          + greater = 0
                        },
                      + {
                          + field     = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].tenantId"
                          + notEquals = "[subscription().tenantId]"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-ServicesEncryption.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should enforce encryption for all storage services. Enforce this for increased encryption scope."
      + display_name        = "Encryption for storage services should be enforced for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-ServicesEncryption"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + anyOf = [
                                      + {
                                          + exists = "false"
                                          + field  = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                        },
                                      + {
                                          + field     = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                          + notEquals = true
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + exists = "false"
                                          + field  = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                        },
                                      + {
                                          + field     = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                          + notEquals = true
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + exists = "false"
                                          + field  = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                        },
                                      + {
                                          + field     = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                          + notEquals = "Account"
                                        },
                                    ]
                                },
                              + {
                                  + anyOf = [
                                      + {
                                          + exists = "false"
                                          + field  = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                        },
                                      + {
                                          + field     = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                          + notEquals = "Account"
                                        },
                                    ]
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-Storage-Sftp.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Azure Storage accounts should disable SFTP. Enforce this for increased data exfiltration protection."
      + display_name        = "SFTP should be restricted for Storage Accounts"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "Indexed"
      + name                = "Deny-Storage-Sftp"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Deny",
                      + "Audit",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts"
                          + field  = "type"
                        },
                      + {
                          + anyOf = [
                              + {
                                  + exists = "false"
                                  + field  = "Microsoft.Storage/storageAccounts/isSftpEnabled"
                                },
                              + {
                                  + field     = "Microsoft.Storage/storageAccounts/isSftpEnabled"
                                  + notEquals = false
                                },
                            ]
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-StorageFileServices-InsecureAuth.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the use of insecure authentication methods (NTLMv2) when using File Services on a storage account."
      + display_name        = "File Services with insecure authentication methods should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-StorageFileServices-InsecureAuth"
      + parameters          = jsonencode(
            {
              + effect                = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + notAllowedAuthMethods = {
                  + allowedValues = [
                      + "NTLMv2",
                      + "Kerberos",
                    ]
                  + defaultValue  = "NTLMv2"
                  + metadata      = {
                      + description = "The list of channelEncryption not allowed."
                      + displayName = "Authentication methods supported by server. Valid values are NTLMv2, Kerberos."
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + contains = "[parameters('notAllowedAuthMethods')]"
                          + field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.authenticationMethods"
                        },
                      + {
                          + equals = "Microsoft.Storage/storageAccounts/fileServices"
                          + field  = "type"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-StorageFileServices-InsecureKerberos.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the use of insecure Kerberos ticket encryption (RC4-HMAC) when using File Services on a storage account."
      + display_name        = "File Services with insecure Kerberos ticket encryption should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-StorageFileServices-InsecureKerberos"
      + parameters          = jsonencode(
            {
              + effect                             = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + notAllowedKerberosTicketEncryption = {
                  + allowedValues = [
                      + "RC4-HMAC",
                      + "AES-256",
                    ]
                  + defaultValue  = "RC4-HMAC"
                  + metadata      = {
                      + description = "The list of kerberosTicketEncryption not allowed."
                      + displayName = "Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256."
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts/fileServices"
                          + field  = "type"
                        },
                      + {
                          + contains = "[parameters('notAllowedKerberosTicketEncryption')]"
                          + field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.kerberosTicketEncryption"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-StorageFileServices-InsecureSmbChannel.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the use of insecure channel encryption (AES-128-CCM) when using File Services on a storage account."
      + display_name        = "File Services with insecure SMB channel encryption should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-StorageFileServices-InsecureSmbChannel"
      + parameters          = jsonencode(
            {
              + effect                      = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + notAllowedChannelEncryption = {
                  + allowedValues = [
                      + "AES-128-CCM",
                      + "AES-128-GCM",
                      + "AES-256-GCM",
                    ]
                  + defaultValue  = "AES-128-CCM"
                  + metadata      = {
                      + description = "The list of channelEncryption not allowed."
                      + displayName = "SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM."
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts/fileServices"
                          + field  = "type"
                        },
                      + {
                          + contains = "[parameters('notAllowedChannelEncryption')]"
                          + field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.channelEncryption"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/StorageAccount/AzurePolicyDefinitions/Deny-StorageFileServices-InsecureSmbVersions.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "This policy denies the use of insecure versions of SMB (2.1 & 3.0) when using File Services on a storage account."
      + display_name        = "File Services with insecure SMB versions should be denied"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-StorageFileServices-InsecureSmbVersions"
      + parameters          = jsonencode(
            {
              + allowedSmbVersion = {
                  + allowedValues = [
                      + "SMB2.1",
                      + "SMB3.0",
                      + "SMB3.1.1",
                    ]
                  + defaultValue  = "SMB3.1.1"
                  + metadata      = {
                      + description = "The allowed SMB version for maximum security"
                      + displayName = "Allowed SMB Version"
                    }
                  + type          = "String"
                }
              + effect            = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Deny"
                  + metadata      = {
                      + description = "The effect determines what happens when the policy rule is evaluated to match"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Storage/storageAccounts/fileServices"
                          + field  = "type"
                        },
                      + {
                          + not = {
                              + contains = "[parameters('allowedSmbVersion')]"
                              + field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.versions"
                            }
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_definition.policy_definitions["../../definitions/Synapse/AzurePolicyDefinitions/Deny-Synapse-Fw-Rules.json"] will be created
  + resource "azurerm_policy_definition" "policy_definitions" {
      + description         = "Removing all IP firewall rules improves security by ensuring your Azure Synapse workspace can only be accessed from a private endpoint. This configuration audits creation of firewall rules that allow public network access on the workspace."
      + display_name        = "IP firewall rules on Azure Synapse workspaces should be removed"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Synapse"
              + version  = "1.0.0"
            }
        )
      + mode                = "All"
      + name                = "Deny-Synapse-Fw-Rules"
      + parameters          = jsonencode(
            {
              + effect = {
                  + allowedValues = [
                      + "Audit",
                      + "Deny",
                      + "Disabled",
                    ]
                  + defaultValue  = "Audit"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_rule         = jsonencode(
            {
              + if   = {
                  + allOf = [
                      + {
                          + equals = "Microsoft.Synapse/workspaces/firewallrules"
                          + field  = "type"
                        },
                      + {
                          + exists = "true"
                          + field  = "name"
                        },
                    ]
                }
              + then = {
                  + effect = "[parameters('effect')]"
                }
            }
        )
      + policy_type         = "Custom"
      + role_definition_ids = (known after apply)
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/AISearch/AzurePolicySets/Compliant-AISearch.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Cognitive Search is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default AI Search for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Search"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-AISearch"
      + parameters          = jsonencode(
            {
              + cognitiveSearchCmk                    = {
                  + defaultValue = "AuditIfNotExists"
                  + type         = "string"
                }
              + cognitiveSearchDiagnostics            = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + cognitiveSearchLocalAuth              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveSearchLogAnalyticsResourceId = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + cognitiveSearchPublicEndpoint         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveSearchSku                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + modifyCognitiveSearchLocalAuth        = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + modifyCognitiveSearchPublicEndpoint   = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Cognitive Search"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for AI Search"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure AI Search is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for AI Search"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure AI Search is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure AI Search is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Cognitive Search not accessible over the public internet"
          + display_name                    = "Ensure AI Search is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('cognitiveSearchDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('cognitiveSearchLogAnalyticsResourceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-AISearch"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Diagnostics-AISearch"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveSearchSku')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a049bf77-880b-470f-ba6d-9f21c530cf83"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CognitiveSearch-SKU"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveSearchPublicEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ee980b6d-0eca-4501-8d54-f6290fd512c3"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CognitiveSearch-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveSearchLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6300012e-e9a4-4649-b41f-a85f5c43be91"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-CongitiveSearch-LocalAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveSearchCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/76a56461-9dc0-40f0-82f5-2453283afa2f"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-CognitiveSearch-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('modifyCognitiveSearchLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4eb216f2-9dba-4979-86e6-5d7e63ce3b75"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-CogntiveSearch-LocalAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('modifyCognitiveSearchPublicEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9cee519f-d9c1-4fd9-9f79-24ec3449ed30"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-CogntiveSearch-PublicEndpoint"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/APIM/AzurePolicySets/Compliant-APIM.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures API Management is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default API Management for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "API Management"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-API-Management"
      + parameters          = jsonencode(
            {
              + apiSubscriptionScope           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimApiBackendCertValidation   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimCallApiAuthn               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimDiagnostics                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + apimDirectApiEndpoint          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimDisablePublicNetworkAccess = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + apimEncryptedProtocols         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimLogAnalyticsWorkspaceId    = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + apimLogsCategory               = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + apimSecrets                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimSkuVnet                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimTls                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + apimVnetUsage                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + minimumApiVersion              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure API Management is using secure encryption"
          + display_name                    = "Ensure API Management is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure API Management is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for API Management"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure API Management is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure API Management is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure API Management is not accessible over the public internet"
          + display_name                    = "Ensure API Management is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('apimLogsCategory')]"
                    }
                  + effect        = {
                      + value = "[parameters('apimDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('apimLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/567c93f7-3661-494f-a30f-0a94d9bfebf8"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Apim-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimSecrets')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f1cc7827-022c-473e-836e-5a51cae0b249"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Apim-without-Kv"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimVnetUsage')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-APIM-WithOutVnet"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Apim-without-Vnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-APIM-TLS"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-APIM-TLS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimEncryptedProtocols')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ee7495e7-3ba7-40b6-bfee-c29e22cc75d4"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Apim-Protocols"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimCallApiAuthn')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c15dcc82-b93c-4dcb-9332-fbf121685b54"
          + policy_group_names   = [
              + "Encryption",
              + "Identity",
            ]
          + reference_id         = "Deny-Apim-Authn"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimDirectApiEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b741306c-968e-4b67-b916-5675e5c709f4"
          + policy_group_names   = [
              + "Encryption",
              + "Identity",
            ]
          + reference_id         = "Deny-Apim-Direct-Endpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimApiBackendCertValidation')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/92bb331d-ac71-416a-8c91-02f2cb734ce4"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Apim-Cert-Validation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7ca8c8ac-3a6e-493d-99ba-c5fa35347ff2"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Apim-Public-NetworkAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apimSkuVnet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/73ef9241-5d81-4cd4-b483-8443d1730fe5"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Apim-Sku-Vnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('minimumApiVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/549814b6-3212-4203-bdc8-1548d342fb67"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Apim-Version"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apiSubscriptionScope')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3aa03346-d8c5-4994-a5bc-7652c2a2aef1"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Api-subscription-scope"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/AppService/AzurePolicySets/Cmplnt-AppService.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures App Service is compliant for regulated industries"
      + display_name        = "Enforce secure-by-default App Service for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "App Service"
              + version  = "1.0.0"
            }
        )
      + name                = "Cmplnt-AppService"
      + parameters          = jsonencode(
            {
              + apiAppHttps                                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appEnvDisablePublicNetworkAccess           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceApiAppWithoutHttps               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceAppHttps                         = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + appServiceAppModifyPublicNetworkAccess     = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + appServiceAppSlotTls                       = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceAppSlotsHttps                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceAppSlotsRemoteDebugging          = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceAppsHttps                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceAppsModifyPublicNetworkAccess    = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + appServiceAppsRemoteDebugging              = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceAppsRfc                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceAppsTls                          = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceAppsVnetRouting                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceByoc                             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceDiagnostics                      = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceDisableLocalAuth                 = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceDisableLocalAuthFtp              = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceDisablePublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceEnvLatestVersion                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceLogAnalyticsWorkspaceId          = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + appServiceRfc                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceRouting                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceScmAuth                          = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appServiceSkuPl                            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceTls                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServiceWithoutHttps                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appServicewithoutBYOC                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appSlotsPublicNetworkAccess                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppDebugging                       = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + functionAppDisablePublicNetworkAccess      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppHttps                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppPublicNetworkAccess             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppSlotsHttps                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppSlotsModifyHttps                = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + functionAppSlotsModifyPublicNetworkAccess  = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + functionAppSlotsTls                        = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + functionAppTls                             = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + functionAppWithoutHttps                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionAppsDisablePublicNetworkAccess     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + functionDiagnostics                        = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + functionLogAnalyticsWorkspaceId            = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + logicAppDiagnostics                        = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + logicAppHttps                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + logicAppLogAnalyticsWorkspaceId            = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + logicAppPublicNetworkAccess                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + logicAppTls                                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + serverFarmsUnusedResourcesCostOptimization = {
                  + defaultValue = "Audit"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Cost Optimization"
          + description                     = "Policy to ensure Compute is cost optimized"
          + display_name                    = "Ensure Compute cost optimized"
          + name                            = "Cost"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure App Service is using secure encryption"
          + display_name                    = "Ensure App Service is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure App Service is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and authorization system for App Service"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure App Service is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure App Service is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure App Service is not accessible over the public internet"
          + display_name                    = "Ensure App Service is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Posture and Vulnerability Management"
          + description                     = "Posture and Vulnerability Management"
          + display_name                    = "Posture and Vulnerability Management"
          + name                            = "Posture"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('appServiceDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('appServiceLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deploy-AppService-Diagnostics"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Deploy-AppService-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('functionDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('functionLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deploy-FunctionApp-Diagnostics"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Deploy-FunctionApp-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('apiAppHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-ApiApp-Https"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ApiApp-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('logicAppPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApp-Public-Network"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-LogicApp-Public-Network"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('logicAppHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-LogicApps-Without-Https"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-LogicApps-Without-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('logicAppTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deploy-LogicApp-TLS"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deploy-LogicApp-TLS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('logicAppDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('logicAppLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deploy-LogicApp-Diagnostics"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Deploy-LogicApp-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceByoc')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-without-BYOK"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-AppService-without-BYOK"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppSlotsTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fa3a6357-c6d6-4120-8429-855577ec0063"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Dine-Function-Apps-Slots-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppSlotsModifyHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/08cf2974-d178-48a0-b26d-f6b8e555748b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Function-Apps-Slots-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppSlotsModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/242222f3-4985-4e99-b5ef-086d6a6cb01c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Function-Apps-Slots-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae44c1d1-0df2-4ca9-98fa-a3d3ae5b409d"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Dine-AppService-Apps-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsRemoteDebugging')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a5e3fe8f-f6cd-4f1d-bbf6-c749754a724b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-AppService-Apps-Remote-Debugging"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2374605e-3e0b-492b-9046-229af202562c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-AppService-Apps-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c6c3e00e-d414-4ca4-914f-406699bb8eee"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-AppService-App-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppSlotsRemoteDebugging')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cca5adfe-626b-4cc6-8522-f5b6ed2391bd"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Slots-Remote-Debugging"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceEnvLatestVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/eb4d34ab-0929-491c-bbf3-61e13da19f9a"
          + policy_group_names   = [
              + "Posture",
            ]
          + reference_id         = "Deny-AppService-Latest-Version"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a4af4a39-4135-47fb-b175-47fbdf85311d"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Apps-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsVnetRouting')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/801543d1-1953-4a90-b8b0-8cf6d41473a5"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Vnet-Routing"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppSlotsHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae1b9a8c-dfce-4605-bd91-69213b4a26fc"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Slots-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceRfc')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f5c0bfb3-acea-47b1-b477-b0edcdf6edc1"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Rfc"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppsRfc')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a691eacb-474d-47e4-b287-b4813ca44222"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppServiceApps-Rfc"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d6545c6b-dd9d-4265-91e6-0b451e2f1c50"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/969ac98b-88a8-449f-883c-2e9adb123127"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FuncApp-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppDebugging')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/70adbb40-e092-42d5-a6f8-71c540a5efdb"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "DINE-FuncApp-Debugging"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appSlotsPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/701a595d-38fb-4a66-ae6d-fb3735217622"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppSlots-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FunctionApp-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceScmAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e97b776-f380-4722-a9a3-e7f0be029e79"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "DINE-AppService-ScmAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppSlotsHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e5dbe3f-2702-4ffc-8b1e-0cae008a5c71"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FuncAppSlots-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceRouting')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5747353b-1ca9-42c1-a4dd-b874b894f3d4"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppServ-Routing"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceDisableLocalAuthFtp')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/572e342c-c920-4ef5-be2e-1ed3c6a51dc5"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-AppServ-FtpAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceSkuPl')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/546fe8d2-368d-4029-a418-6af48a7f61e5"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppServ-SkuPl"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appEnvDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2d048aca-6479-4923-88f5-e2ac295d9af3"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppEnv-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceDisableLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2c034a29-2a5f-4857-b120-f800fe5549ae"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "DINE-AppService-LocalAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppDebugging')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25a5046c-c423-4805-9235-e844ae9ef49b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "DINE-AppService-Debugging"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppSlotTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/014664e7-e348-41a3-aeb9-566e4ff6a9df"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "DINE-AppService-AppSlotTls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceAppHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0f98368e-36bc-4716-8ac2-8f8067203b63"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Modify-AppService-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/11c82d0c-db9f-4d7b-97c5-f3f9aa957da2"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FunctionApp-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppsDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/11c82d0c-db9f-4d7b-97c5-f3f9aa957da2"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FunctionApps-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b5ef780-c53c-4a64-87f3-bb9c8c8094ba"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Public"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f01f1c7-539c-49b5-9ef4-d4ffa37d22e0"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-FunctionApp-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serverFarmsUnusedResourcesCostOptimization')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Audit-ServerFarms-UnusedResourcesCostOptimization"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Audit-ServerFarms-UnusedResourcesCostOptimization"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServicewithoutBYOC')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-without-BYOC"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Deny-AppService-Without-BYOC"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceApiAppWithoutHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AppServiceApiApp-Without-Https"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppServiceApiApp-Without-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('functionAppWithoutHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-FunctionApp-Without-Https"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FunctionApp-Without-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appServiceWithoutHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AppService-Without-Https"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-AppService-Without-Https"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Automation/AzurePolicySets/Compliant-Automation.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Automation Account is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Automation Account for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Automation"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Automation-Account"
      + parameters          = jsonencode(
            {
              + aaChildResources            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aaCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aaDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + aaLocalAuth                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aaLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + aaLogsCategory              = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + aaManagedIdentity           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aaModifyLocalAuth           = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + aaModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + aaPublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aaVariablesEncryption       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + autoHotPatch                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Automation Account"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Automation Account"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "DevOps Security"
          + description                     = "Policy to ensure Automation Account is configured to use Git as source control"
          + display_name                    = "Ensure Automation Account is is using Git as source control"
          + name                            = "DevOps"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Automation Account is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Automation Account"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Automation Account is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Automation Account is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Automation Account not accessible over the public internet"
          + display_name                    = "Ensure Automation Account is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('aaLogsCategory')]"
                    }
                  + effect        = {
                      + value = "[parameters('aaDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('aaLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b797045a-b3cd-46e4-adc4-bbadb3381d78"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-AA-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('autoHotPatch')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6d02d2f7-e38b-4bdc-96f3-adc0a8726abc"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Windows-Vm-HotPatch"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaManagedIdentity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-Managed-Identity"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aa-Managed-Identity"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/955a914f-bf86-4f0e-acd5-e0766b0efcb6"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aa-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/56a5ee18-2ae6-4810-86f7-18e39ce5629b"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Aa-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/48c5f1cb-14ad-4797-8e3b-f78ab3f8d700"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aa-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaVariablesEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3657f5a0-770e-44a3-b44e-9431ba1e9735"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Aa-Variables-Encrypt"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaModifyLocalAUth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/30d1d58e-8f96-47a5-8564-499a3f3cca81"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-Aa-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/23b36a7c-9d26-4288-a8fd-c1d2fa284d8c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Aa-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aaChildResources')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AA-Child-Resources"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-AA-Child-Resources"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Backup/AzurePolicySets/Compliant-Backup.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Backup is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Backup for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Backup"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Backup"
      + parameters          = jsonencode(
            {
              + asrLogAnalyticsWorkspaceId = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + asrPublicNetworkAccess     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + backupCmk                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + backupImmutability         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + backupSoftDelete           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + vmBackup                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Backup and Recovery"
          + description                     = "Policy to ensure Backup is enabled and stored securely"
          + display_name                    = "Ensure Backup is enabled and stored securely"
          + name                            = "Backup"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Backup"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Backup"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Backup is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Backup"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Backup is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Backup is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Backup not accessible over the public internet"
          + display_name                    = "Ensure Backup is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + logAnalytics = {
                      + value = "[parameters('asrLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c717fb0c-d118-4c43-ab3d-ece30ac81fb3"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Asr-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('asrPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9ebbbba3-4d65-4da9-bb67-b22cfaaff090"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Asr-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('backupSoftDelete')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Backup-Soft-Delete"
          + policy_group_names   = [
              + "Backup",
              + "Encryption",
            ]
          + reference_id         = "Deny-Backup-Soft-Delete"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('vmBackup')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83644c87-93dd-49fe-bf9f-6aff8fd0834e"
          + policy_group_names   = [
              + "Backup",
            ]
          + reference_id         = "Dine-Vm-Backup"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('backupCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2e94d99a-8a36-4563-bc77-810d8893b671"
          + policy_group_names   = [
              + "Backup",
              + "Encryption",
            ]
          + reference_id         = "Deny-Backup-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('backupImmutability')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Backup-Immutability"
          + policy_group_names   = [
              + "Backup",
              + "Encryption",
            ]
          + reference_id         = "Deny-Backup-Immutability"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/CognitiveServices/AzurePolicySets/Compliant-OpenAI.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Open AI (Cognitive Service) is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Open AI (Cognitive Service) for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cognitive Services"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-OpenAi"
      + parameters          = jsonencode(
            {
              + cognitiveServicesCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesCustomerStorage           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + cognitiveServicesDisableLocalAuth          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + cognitiveServicesManagedIdentity           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesModifyDisableLocalAuth    = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + cognitiveServicesModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + cognitiveServicesNetworkAccess             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesNetworkAcls               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesOutboundNetworkAccess     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cognitiveServicesPublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Open AI (Cognitive Service)"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Open AI (Cognitive Service)"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Open AI (Cognitive Service) is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Open AI (Cognitive Service)"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Open AI (Cognitive Service) is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Open AI (Cognitive Service) is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Open AI (Cognitive Service) not accessible over the public internet"
          + display_name                    = "Ensure Open AI (Cognitive Service) is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesOutboundNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-RestrictOutboundNetworkAccess"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CognitiveServices-RestrictOutboundNetworkAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesNetworkAcls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-CognitiveServices-NetworkAcls"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CognitiveServices-NetworkAcls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('cognitiveServicesDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('cognitiveServicesLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-OpenAi"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-OpenAi"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesManagedIdentity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fe3fd216-4f83-4fc1-8984-2bbec80a3418"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Cognitive-Services-Managed-Identity"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesDisableLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/71ef260a-8f18-47b7-abcb-62d0673d94dc"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Cognitive-Services-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/67121cc7-ff39-4ab8-b7e3-95b84dab487d"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Cognitive-Services-CMK"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/47ba1dd7-28d9-4b07-a8d5-9813bed64e0c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Cognitive-Services-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesCustomerStorage')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/46aa9b05-0e60-4eae-a88b-1e9d374fa515"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Cognitive-Services-Cust-Storage"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesModifyDisableLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/14de9e63-1b31-492e-a5a3-c3f7fd57f555"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-Cognitive-Services-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0725b4dd-7e76-479c-a735-68e7ee23d5ca"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Cognitive-Services-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cognitiveServicesNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/037eea7a-bd0a-46c5-9a66-03aea78705d3"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Cognitive-Services-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Compute/AzurePolicySets/Compliant-Compute.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Compute is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Compute for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Compute"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Compute"
      + parameters          = jsonencode(
            {
              + computeAzureHybridBenefit            = {
                  + defaultValue = "Audit"
                  + type         = "string"
                }
              + diskDoubleEncryption                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + disksUnusedResourcesCostOptimization = {
                  + defaultValue = "Audit"
                  + type         = "string"
                }
              + managedDiskPublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + osAndDataDiskCmk                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + vmAndVmssEncryptionHost              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Cost Optimization"
          + description                     = "Policy to ensure Compute is cost optimized"
          + display_name                    = "Ensure Compute cost optimized"
          + name                            = "Cost"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Compute is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Compute"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Compute is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Compute is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Compute is not accessible over the public internet"
          + display_name                    = "Ensure Compute is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('vmAndVmssEncryptionHost')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fc4d8e41-e223-45ea-9bf5-eada37891d87"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-VmAndVmss-Encryption-Host"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('osAndDataDiskCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/702dd420-7fcc-42c5-afe8-4026edd20fe0"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-OsAndDataDisk-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('managedDiskPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Disk-Public-Endpoint"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ManagedDisk-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('diskDoubleEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ca91455f-eace-4f96-be59-e6e2c35b4816"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Disk-Double-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('computeAzureHybridBenefit')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Audit-Compute-AzureHybridBenefit"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Audit-Compute-AzureHybridBenefit"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('disksUnusedResourcesCostOptimization')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Audit-Disks-UnusedResourcesCostOptimization"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Audit-Disks-UnusedResourcesCostOptimization"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/ContainerApps/AzurePolicySets/Compliant-ContainerApps.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Container Apps for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Container Apps"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-ContainerApps"
      + parameters          = jsonencode(
            {
              + containerAppsEnvPublicNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerAppsHttps                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerAppsManagedIdentity        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerAppsPublicNetworkAccess    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerAppsVnetInjection          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Container Apps is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Container Apps"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Container Apps is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Container Apps is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Container Apps is not accessible over the public internet"
          + display_name                    = "Ensure Container Apps is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerAppsVnetInjection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerApp-Vnet-Injection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerAppsEnvPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerAppsEnv-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerAppsManagedIdentity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ContainerApps-Managed-Identity"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerAppsHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerApps-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerAppsPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerApps-Public-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/ContainerInstance/AzurePolicySets/Compliant-ContainerInstance.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Container Instance for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Container Instance"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-ContainerInstance"
      + parameters          = jsonencode(
            {
              + containerInstanceCmk  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerInstanceVnet = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Container Instance is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Container Instance"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Container Instance is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Container Instance is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Container Instance is not accessible over the public internet"
          + display_name                    = "Ensure Container Instance is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerInstanceVnet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8af8f826-edcb-4178-b35f-851ea6fea615"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerInstance-Vnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerInstanceCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0aa61e00-0a01-4a3c-9945-e93cffedf0e6"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ContainerInstance-Cmk"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/ContainerRegistry/AzurePolicySets/Compliant-ContainerRegistry.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Container Apps is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Container Registry for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Container Registry"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-ContainerRegistry"
      + parameters          = jsonencode(
            {
              + containerRegistryAnAuth                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryArmAudience               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + containerRegistryExports                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryLocalAuth                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + containerRegistryLogCategories             = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + containerRegistryModifyAnAuth              = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + containerRegistryModifyArmAudience         = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + containerRegistryModifyLocalAuth           = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + containerRegistryModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + containerRegistryModifyRepositoryToken     = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + containerRegistryPublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryRepositoryToken           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistrySkuPrivateLink            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + containerRegistryUnrestrictedNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Container Registry is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Container Registry"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Container Registry is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Container Registry is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Container Registry is not accessible over the public internet"
          + display_name                    = "Ensure Container Registry is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('containerRegistryLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('containerRegistryDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('containerRegistryLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/56288eb2-4350-461d-9ece-2bb242269dce"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-CR"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0fdf0491-d080-4575-b627-ad0e843cba0f"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerRegistry-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a3701552-92ea-433e-9d17-33b7f1208fc9"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-ContainerRegistry-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/79fdfe03-ffcb-4e55-b4d0-b925b8241759"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-ContainerRegistry-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryModifyRepositoryToken')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a9b426fe-8856-4945-8600-18c5dd1cca2a"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Modify-ContainerRegistry-Repo-Token"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ContainerRegistry-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryArmAudience')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/42781ec6-6127-4c30-bdfa-fb423a0047d3"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ContainerRegistry-Arm-Audience"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryModifyArmAudience')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/785596ed-054f-41bc-aaec-7f3d0ba05725"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-ContainerRegistry-Arm-Audience"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistrySkuPrivateLink')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bd560fc0-3c69-498a-ae9f-aa8eb7de0e13"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerRegistry-Sku-PrivateLink"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryModifyAnAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cced2946-b08a-44fe-9fd9-e4ed8a779897"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-ContainerRegistry-Anonymous-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryAnAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9f2dea28-e834-476c-99c5-3507b4728395"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ContainerRegistry-Anonymous-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryExports')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/524b0254-c285-4903-bee6-bb8126cde579"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ContainerRegistry-Exports"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dc921057-6b28-4fbe-9b83-f7bec05db6c2"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ContainerRegistry-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryRepositoryToken')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ff05e24e-195c-447e-b322-5e90c9f9f366"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ContainerRegistry-Repo-Token"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('containerRegistryUnrestrictedNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d0793b48-0edc-4296-a390-4c75d1bdfd71"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ContainerRegistry-Unrestricted-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/CosmosDb/AzurePolicySets/Compliant-CosmosDb.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Cosmos DB is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Cosmos DB for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Cosmos DB"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-CosmosDb"
      + parameters          = jsonencode(
            {
              + cosmosDbAtp                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + cosmosDbCmk                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cosmosDbFwRules               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cosmosDbLocalAuth             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cosmosDbModifyLocalAuth       = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + cosmosDbModifyPublicAccess    = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + cosmosDbPublicAccess          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + cosmosDiagnostics             = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + cosmosLogAnalyticsWorkspaceId = {
                  + defaultValue = ""
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Cosmos DB"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Cosmos DB"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Cosmos DB is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Cosmos DB"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Cosmos DB is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Cosmos DB is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Cosmos DB not accessible over the public internet"
          + display_name                    = "Ensure Cosmos DB is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('cosmosDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('cosmosLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-CosmosDb"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-CosmosDb"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/dc2d41d1-4ab1-4666-a3e1-3d51c43e0049"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-CosmosDb-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbModifyPublicAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/da69ba51-aaf1-41e5-8651-607cd0b37088"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-CosmosDb-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbAtp')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b5f04e03-92a3-4b09-9410-2cc5e5047656"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-CosmosDb-Atp"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbFwRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CosmosDb-Fw-Rules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbPublicAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/797b37f7-06b8-444c-b1ad-fc62867f335a"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-CosmosDb-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5450f5bd-9c72-4390-a9c4-a7aba4edfdd2"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-CosmosDb-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4750c32b-89c0-46af-bfcb-2e4541a818d5"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Append-CosmosDb-Metadata"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('cosmosDbCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f905d99-2ab7-462c-a6b0-f709acca6c8f"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-CosmosDb-Cmk"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/DataExplorer/AzurePolicySets/Compliant-DataExplorer.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Data Explorer is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Data Explorer for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Azure Data Explorer"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Data-Explorer"
      + parameters          = jsonencode(
            {
              + adeCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adeDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + adeDoubleEncryption          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adeEncryption                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adeLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + adeModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + adePublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adeSku                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Data Explorer is using secure encryption"
          + display_name                    = "Ensure Data Explorer is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Data Explorer is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Data Explorer"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Data Explorer is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Data Explorer is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Data Explorer is not accessible over the public internet"
          + display_name                    = "Ensure Data Explorer is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('adeDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('adeLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-ADE"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-ADE"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adeSku')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1fec9658-933f-4b3e-bc95-913ed22d012b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ADE-Sku-without-PL-Support"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/43bc7be6-5e69-4b0d-a2bb-e815557ca673"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ADE-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adeModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7b32f193-cb28-4e15-9a98-b9556db0bafa"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-ADE-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adeDoubleEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ec068d99-e9c7-401f-8cef-5bdde4e6ccf1"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ADE-Double-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adeEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f4b53539-8df9-40e4-86c6-6b607703bd4e"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ADE-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adeCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/81e74cea-30fd-40d5-802f-d72103c2aaaa"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ADE-Cmk"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/DataFactory/AzurePolicySets/Compliant-DataFactory.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Data Factory is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Data Factory for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Data Factory"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-DataFactory"
      + parameters          = jsonencode(
            {
              + adfCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adfDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + adfGit                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adfLinkedServiceKeyVault     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adfLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + adfManagedIdentity           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adfModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + adfPublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + adfSqlIntegration            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Data Factory"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Data Factory"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "DevOps Security"
          + description                     = "Policy to ensure Data Factory is configured to use Git as source control"
          + display_name                    = "Ensure Data Factory is is using Git as source control"
          + name                            = "DevOps"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Data Factory is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Data Factory"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Data Factory is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Data Factory is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Data Factory not accessible over the public internet"
          + display_name                    = "Ensure Data Factory is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('adfDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('adfLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-DataFactory"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-DataFactory"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfManagedIdentity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f78ccdb4-7bf4-4106-8647-270491d2978a"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Adf-Managed-Identity"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfGit')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/77d40665-3120-4348-b539-3192ec808307"
          + policy_group_names   = [
              + "DevOps",
            ]
          + reference_id         = "Deny-Adf-Git"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4ec52d6d-beb7-40c4-9a9e-fe753254690e"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Adf-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1cf164be-6819-4a50-b8fa-4bcaa4f98fb6"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Adf-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfLinkedServiceKeyVault')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/127ef6d7-242f-43b3-9eef-947faf1725d0"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Adf-Linked-Service-Key-Vault"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/08b1442b-7789-4130-8506-4f99a97226a7"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Adf-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('adfSqlIntegration')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0088bc63-6dee-4a9c-9d29-91cfdc848952"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Adf-Sql-Integration"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Databricks/AzurePolicySets/Compliant-Databricks.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Databricks is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Databricks for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Databricks"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Databricks"
      + parameters          = jsonencode(
            {
              + databricksAutomaticClusterUpdate             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksComplianceSecurityProfile          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksComplianceSecurityProfileStandards = {
                  + defaultValue = []
                  + type         = "array"
                }
              + databricksDefaultStorageFirewall             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksDiagnostics                        = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + databricksDiagnosticsLogAnalytics            = {
                  + metadata = {
                      + assignPermissions = true
                      + description       = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName       = "Log Analytics workspace"
                      + strongType        = "omsWorkspace"
                    }
                  + type     = "string"
                }
              + databricksDiagnosticsLogsEnabled             = {
                  + defaultValue = true
                  + type         = "boolean"
                }
              + databricksDiagnosticsProfileName             = {
                  + defaultValue = "AzureDatabricksServicesDiagnosticsLogsToWorkspace"
                  + type         = "string"
                }
              + databricksEnableNoPublicIp                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksEncryptionDbfs                     = {
                  + defaultValue = "Audit"
                  + type         = "string"
                }
              + databricksEncryptionManagedDisk              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksEncryptionManagedServices          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksEnhancedSecurityMonitoring         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksPrepareEncryption                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksPublicNetworkAccess                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksRequireInfrastructureEncryption    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksRequiredNsgRules                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksSkuName                            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + databricksVirtualNetwork                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Event Hub is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Event Hub"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Event Hub is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Event Hub is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Event Hub is not accessible over the public internet"
          + display_name                    = "Ensure Event Hub is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksVirtualNetwork')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9c25c9e4-ee12-4882-afd2-11fb9d87893f"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-VirtualNetwork"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksEnableNoPublicIp')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/51c1490f-3319-459c-bbbc-7f391bbed753"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-EnableNoPublicIp"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksSkuName')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2cc2c3b5-c2f8-45aa-a9e6-f90d85ae8352"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-SkuName"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('databricksDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('databricksDiagnosticsLogAnalytics')]"
                    }
                  + logsEnabled  = {
                      + value = "[parameters('databricksDiagnosticsLogsEnabled')]"
                    }
                  + profileName  = {
                      + value = "[parameters('databricksDiagnosticsProfileName')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/23057b42-ca8d-4aa0-a3dc-96a98b5b5a3d"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Databricks-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e7849de-b939-4c50-ab48-fc6b0f5eeba2"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-PublicNetworkAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksAutomaticClusterUpdate')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-AutomaticClusterUpdate"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Databricks-AutomaticClusterUpdate"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + complianceStandards = {
                      + value = "[parameters('databricksComplianceSecurityProfileStandards')]"
                    }
                  + effect              = {
                      + value = "[parameters('databricksComplianceSecurityProfile')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-ComplianceSecurityProfile"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Databricks-ComplianceSecurityProfile"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksDefaultStorageFirewall')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-DefaultStorageFirewall"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-DefaultStorageFirewall"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksEncryptionDbfs')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Audit-Databricks-EncryptionDbfs"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Audit-Databricks-EncryptionDbfs"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksEncryptionManagedDisk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-EncryptionManagedDisk"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Databricks-EncryptionManagedDisk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksEncryptionManagedServices')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-EncryptionManagedServices"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Databricks-EncryptionManagedServices"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksEnhancedSecurityMonitoring')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-EnhancedSecurityMonitoring"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Deny-Databricks-EnhancedSecurityMonitoring"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksPrepareEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-PrepareEncryption"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Deny-Databricks-PrepareEncryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksRequiredNsgRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-RequiredNsgRules"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-RequiredNsgRules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('databricksRequireInfrastructureEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Databricks-RequireInfrastructureEncryption"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Databricks-RequireInfrastructureEncryption"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/DefenderForCloud/AzurePolicySets/Deploy-Defender.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "Deploy Microsoft Defender for Cloud configuration"
      + display_name        = "Deploy Microsoft Defender for Cloud configuration"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Security Center"
              + version  = "3.0.0"
            }
        )
      + name                = "Deploy-Defender"
      + parameters          = jsonencode(
            {
              + ascExportResourceGroupLocation              = {
                  + metadata = {
                      + description = "The location where the resource group and the export to Log Analytics workspace configuration are created."
                      + displayName = "Resource Group location for the export to Log Analytics workspace configuration"
                    }
                  + type     = "String"
                }
              + ascExportResourceGroupName                  = {
                  + metadata = {
                      + description = "The resource group name where the export to Log Analytics workspace configuration is created. If you enter a name for a resource group that doesn't exist, it'll be created in the subscription. Note that each resource group can only have one export to Log Analytics workspace configured."
                      + displayName = "Resource Group name for the export to Log Analytics workspace configuration"
                    }
                  + type     = "String"
                }
              + emailSecurityContact                        = {
                  + metadata = {
                      + description = "Provide email address for Microsoft Defender for Cloud contact details"
                      + displayName = "Security contacts email address"
                    }
                  + type     = "string"
                }
              + enableAscForAppServices                     = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect App Services"
                    }
                  + type          = "String"
                }
              + enableAscForArm                             = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect ARM"
                    }
                  + type          = "String"
                }
              + enableAscForContainers                      = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Containers"
                    }
                  + type          = "String"
                }
              + enableAscForCosmosDbs                       = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Cosmos DB"
                    }
                  + type          = "String"
                }
              + enableAscForCspm                            = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect CSPM"
                    }
                  + type          = "String"
                }
              + enableAscForKeyVault                        = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Key Vault"
                    }
                  + type          = "String"
                }
              + enableAscForOssDb                           = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect OSS DBs"
                    }
                  + type          = "String"
                }
              + enableAscForServers                         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Servers"
                    }
                  + type          = "String"
                }
              + enableAscForServersVulnerabilityAssessments = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Server Vulnerability Assessments"
                    }
                  + type          = "String"
                }
              + enableAscForSql                             = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect SQL"
                    }
                  + type          = "String"
                }
              + enableAscForSqlOnVm                         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect SQL on VM"
                    }
                  + type          = "String"
                }
              + enableAscForStorage                         = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Storage"
                    }
                  + type          = "String"
                }
              + logAnalytics                                = {
                  + metadata = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Primary Log Analytics workspace"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + minimalSeverity                             = {
                  + allowedValues = [
                      + "High",
                      + "Medium",
                      + "Low",
                    ]
                  + defaultValue  = "High"
                  + metadata      = {
                      + description = "Defines the minimal alert severity which will be sent as email notifications"
                      + displayName = "Minimal severity"
                    }
                  + type          = "string"
                }
              + vulnerabilityAssessmentProvider             = {
                  + allowedValues = [
                      + "default",
                      + "mdeTvm",
                    ]
                  + defaultValue  = "mdeTvm"
                  + metadata      = {
                      + description = "Select the vulnerability assessment solution to provision to machines."
                      + displayName = "Vulnerability assessment provider type"
                    }
                  + type          = "String"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Security"
          + description                     = "Policy to ensure Defender for Cloud is enabled with required settings on the subscription"
          + display_name                    = "Ensure Defender for Cloud is enabled with required settings on the subscription"
          + name                            = "Security"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForOssDb')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/44433aa3-7ec2-4002-93ea-65c65ff0310a"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForOssDb"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForServers')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e86a5b6-b9bd-49d1-8e21-4bb8a0862222"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForVM"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForServersVulnerabilityAssessments')]"
                    }
                  + vaType = {
                      + value = "[parameters('vulnerabilityAssessmentProvider')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/13ce0167-8ca6-4048-8e6b-f996402e3c1b"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForVMVulnerabilityAssessment"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForSqlOnVm')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/50ea7265-7d8c-429e-9a7d-ca1f410191c3"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlServerVirtualMachines"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForAppServices')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b40e7bcd-a1e5-47fe-b9cf-2f534d0bfb7d"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForAppServices"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForStorage')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cfdc5972-75b3-4418-8ae1-7f5c36839390"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForStorageAccountsV2"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c9ddb292-b203-4738-aead-18e2716e858f"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderforContainers"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForKeyVault')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f725891-01c0-420a-9059-4fa46cb770b7"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForKeyVaults"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForArm')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b7021b2b-08fd-4dc0-9de7-3c6ece09faf9"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForArm"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForSql')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b99b73e7-074b-4089-9395-b7236f094491"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlPaas"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForCosmosDbs')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/82bf5b87-728b-4a74-ba4d-6123845cf542"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForCosmosDbs"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForCspm')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/689f7782-ef2c-4270-a6d0-7664869076bd"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForCspm"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + emailSecurityContact = {
                      + value = "[parameters('emailSecurityContact')]"
                    }
                  + minimalSeverity      = {
                      + value = "[parameters('minimalSeverity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-DefenderContacts"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "securityEmailContact"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + resourceGroupLocation = {
                      + value = "[parameters('ascExportResourceGroupLocation')]"
                    }
                  + resourceGroupName     = {
                      + value = "[parameters('ascExportResourceGroupName')]"
                    }
                  + workspaceResourceId   = {
                      + value = "[parameters('logAnalytics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ffb6f416-7bd2-4488-8828-56585fef2be9"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "ascExport"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/766e621d-ba95-4e43-a6f2-e945db3d7888"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "migrateToMdeTvm"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/DefenderForCloud/AzurePolicySets/Deploy-DefenderSql.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "Configure SQL VM and Arc-enabled SQL Servers to install Microsoft Defender for SQL and AMA with a user-defined LAW"
      + display_name        = "Configure SQL VM and Arc-enabled SQL Servers to install Microsoft Defender for SQL and AMA with a user-defined LAW"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Security Center"
              + version  = "3.0.0"
            }
        )
      + name                = "Deploy-DefenderSql"
      + parameters          = jsonencode(
            {
              + bringYourOwnDcr                                 = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = false
                  + metadata      = {
                      + description = "Enable or disable the use of a user-defined Data Collection Rule."
                      + displayName = "Bring your own DCR"
                    }
                  + type          = "Boolean"
                }
              + bringYourOwnUserAssignedManagedIdentity         = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = false
                  + metadata      = {
                      + description = "Enable bring-your-own user assigned identity for Azure Monitor Agent."
                      + displayName = "BYO User Assigned Managed Identity"
                    }
                  + type          = "Boolean"
                }
              + builtInIdentityResourceGroupLocation            = {
                  + defaultValue = ""
                  + metadata     = {
                      + description = "The location of the resource group created by the policy for the built-in user assigned managed identity."
                      + displayName = "RG Location"
                    }
                  + type         = "String"
                }
              + dcrResourceId                                   = {
                  + metadata = {
                      + description = "Resource Id of the user-defined Data Collection Rule."
                      + displayName = "DCR Resource Id"
                    }
                  + type     = "String"
                }
              + effect                                          = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "String"
                }
              + enableCollectionOfSqlQueriesForSecurityResearch = {
                  + allowedValues = [
                      + true,
                      + false,
                    ]
                  + defaultValue  = false
                  + metadata      = {
                      + description = "Enable or disable the collection of SQL queries for security research."
                      + displayName = "Enable collection of SQL queries for security research"
                    }
                  + type          = "Boolean"
                }
              + userAssignedIdentityResourceId                  = {
                  + defaultValue = ""
                  + metadata     = {
                      + description = "The resource ID of the user assigned managed identity."
                      + displayName = "User Assigned Managed Identity Resource ID"
                    }
                  + type         = "String"
                }
              + userWorkspaceId                                 = {
                  + metadata = {
                      + description = "Workspace Id of the Log Analytics workspace destination for the Data Collection Rule."
                      + displayName = "Workspace Id"
                    }
                  + type     = "String"
                }
              + userWorkspaceResourceId                         = {
                  + metadata = {
                      + description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                      + displayName = "Workspace Resource Id"
                      + strongType  = "omsWorkspace"
                    }
                  + type     = "String"
                }
              + workspaceRegion                                 = {
                  + metadata = {
                      + description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                      + displayName = "Workspace region"
                      + strongType  = "location"
                    }
                  + type     = "String"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Security"
          + description                     = "Policy to ensure Defender for Cloud is enabled with required settings on the subscription"
          + display_name                    = "Ensure Defender for Cloud is enabled with required settings on the subscription"
          + name                            = "Security"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('effect')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3592ff98-9787-443a-af59-4505d0fe0786"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlArcAma"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('effect')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/65503269-6a54-4553-8a28-0065a8e6d929"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlArcMdsql"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnDcr                                 = {
                      + value = "[parameters('bringYourOwnDcr')]"
                    }
                  + effect                                          = {
                      + value = "[parameters('effect')]"
                    }
                  + enableCollectionOfSqlQueriesForSecurityResearch = {
                      + value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                  + userWorkspaceId                                 = {
                      + value = "[parameters('userWorkspaceId')]"
                    }
                  + userWorkspaceResourceId                         = {
                      + value = "[parameters('userWorkspaceResourceId')]"
                    }
                  + workspaceRegion                                 = {
                      + value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/63d03cbd-47fd-4ee1-8a1c-9ddf07303de0"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlArcMdsqlDcr"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnDcr = {
                      + value = "[parameters('bringYourOwnDcr')]"
                    }
                  + dcrResourceId   = {
                      + value = "[parameters('dcrResourceId')]"
                    }
                  + effect          = {
                      + value = "[parameters('effect')]"
                    }
                  + userWorkspaceId = {
                      + value = "[parameters('userWorkspaceId')]"
                    }
                  + workspaceRegion = {
                      + value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2227e1f1-23dd-4c3a-85a9-7024a401d8b2"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlArcDcrAssociation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnDcr                                 = {
                      + value = "[parameters('bringYourOwnDcr')]"
                    }
                  + effect                                          = {
                      + value = "[parameters('effect')]"
                    }
                  + enableCollectionOfSqlQueriesForSecurityResearch = {
                      + value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                  + userWorkspaceId                                 = {
                      + value = "[parameters('userWorkspaceId')]"
                    }
                  + userWorkspaceResourceId                         = {
                      + value = "[parameters('userWorkspaceResourceId')]"
                    }
                  + workspaceRegion                                 = {
                      + value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/04754ef9-9ae3-4477-bf17-86ef50026304"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlMdsqlDcr"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                                          = {
                      + value = "Disabled"
                    }
                  + enableCollectionOfSqlQueriesForSecurityResearch = {
                      + value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/da0fd392-9669-4ad4-b32c-ca46aaa6c21f"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlServerArcDcrInstallation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "Disabled"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cbdd12e1-193a-445c-9926-560118c6daaa"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlServerArcDcrAssociation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnUserAssignedManagedIdentity = {
                      + value = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                    }
                  + effect                                  = {
                      + value = "[parameters('effect')]"
                    }
                  + userAssignedIdentityResourceId          = {
                      + value = "[parameters('userAssignedIdentityResourceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f91991d1-5383-4c95-8ee5-5ac423dd8bb1"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlAma"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnDcr = {
                      + value = "[parameters('bringYourOwnDcr')]"
                    }
                  + dcrResourceId   = {
                      + value = "[parameters('dcrResourceId')]"
                    }
                  + effect          = {
                      + value = "[parameters('effect')]"
                    }
                  + userWorkspaceId = {
                      + value = "[parameters('userWorkspaceId')]"
                    }
                  + workspaceRegion = {
                      + value = "[parameters('workspaceRegion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ddca0ddc-4e9d-4bbb-92a1-f7c4dd7ef7ce"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlMdsql"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                                          = {
                      + value = "Disabled"
                    }
                  + enableCollectionOfSqlQueriesForSecurityResearch = {
                      + value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c859b78a-a128-4376-a838-e97ce6625d16"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlVmDcrInstallation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + bringYourOwnUserAssignedManagedIdentity = {
                      + value = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                    }
                  + builtInIdentityResourceGroupLocation    = {
                      + value = "[parameters('builtInIdentityResourceGroupLocation')]"
                    }
                  + effect                                  = {
                      + value = "[parameters('effect')]"
                    }
                  + userAssignedIdentityResourceId          = {
                      + value = "[parameters('userAssignedIdentityResourceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/09963c90-6ee7-4215-8d26-1cc660a1682f"
          + policy_group_names   = [
              + "Security",
            ]
          + reference_id         = "defenderForSqlVmUaiAssignment"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/DnsZoneGroup/AzurePolicySets/Deploy-Private-DNS-Zones.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures private endpoints to Azure PaaS services are integrated with Azure Private DNS zones"
      + display_name        = "Configure Azure PaaS services to use private DNS zones"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + name                = "Deploy-Private-DNS-Zones"
      + parameters          = jsonencode(
            {
              + effect                = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect"
                    }
                  + type          = "string"
                }
              + privateDnsZoneIdVault = {
                  + metadata = {
                      + description = "Private DNS Zone Identifier"
                      + displayName = "azureCognitiveSearchPrivateDnsZoneId"
                      + strongType  = "Microsoft.Network/privateDnsZones"
                    }
                  + type     = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Key Vault is using secure encryption"
          + display_name                    = "Ensure Key Vault is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Key Vault is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Key Vault"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Key Vault is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Key Vault is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Key Vault is not accessible over the public internet"
          + display_name                    = "Ensure Key Vault is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('effect')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('privateDnsZoneIdVault')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-DNSZoneGroup-KeyVault-Vault"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "DeployIfNotExists-DNSZoneGroup-KeyVault-Vault"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/EventGrid/AzurePolicySets/Compliant-EventGrid.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Event Grid is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Event Grid for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Event Grid"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Event-Grid"
      + parameters          = jsonencode(
            {
              + eventGridDomainDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + eventGridDomainLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + eventGridDomainLogCategories             = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + eventGridDomainModifyLocalAuth           = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventGridDomainModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventGridLocalAuth                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventGridParnerNamespaceLocalAuth        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventGridParnerNamespaceModifyLocalAuth  = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventGridPartnerDiagnostics              = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + eventGridPartnerLogAnalyticsWorkspaceId  = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + eventGridPartnerLogCategories            = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + eventGridPubclicNetworkAccess            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventGridTopicDiagnostics                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + eventGridTopicLocalAuth                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventGridTopicLogAnalyticsWorkspaceId    = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + eventGridTopicLogCategories              = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + eventGridTopicModifyLocalAuth            = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventGridTopicModifyPublicNetworkAccess  = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventGridTopicPublicNetworkAccess        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Backup and Recovery"
          + description                     = "Policy to ensure Backup is enabled and stored securely"
          + display_name                    = "Ensure Backup is enabled and stored securely"
          + name                            = "Backup"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Event Grid"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Event Grid"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Event Grid is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Event Grid"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Event Grid is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Event Grid is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Event Grid not accessible over the public internet"
          + display_name                    = "Ensure Event Grid is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('eventGridDomainLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('eventGridDomainDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('eventGridDomainLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b90ec596-faa6-4c61-9515-34085703e260"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-EventGrid-Domain"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('eventGridTopicLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('eventGridTopicDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('eventGridTopicLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/46b2dd5d-3936-4347-8908-b298ea4466d3"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-EventGrid-Topic"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('eventGridPartnerLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('eventGridPartnerDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('eventGridPartnerLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3496f6fd-57ba-485c-8a14-183c4493b781"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-EventGrid-Partner"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridDomainModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/898e9824-104c-4965-8e0e-5197588fa5d4"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-EventGrid-Domain-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridTopicModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/36ea4b4b-0f7f-4a54-89fa-ab18f555a172"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-EventGrid-Topic-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridParnerNamespaceModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2dd0e8b9-4289-4bb0-b813-1883298e9924"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-EventGrid-Partner-Namespace-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridDomainModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8ac2748f-3bf1-4c02-a3b6-92ae68cf75b1"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-EventGrid-Domain-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridTopicLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ae9fb87f-8a17-4428-94a4-8135d431055c"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-EventGrid-Topic-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridTopicModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1c8144d9-746a-4501-b08c-093c8d29ad04"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-EventGrid-Topic-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridTopicPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1adadefe-5f21-44f7-b931-a59b54ccdb45"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-EventGrid-Topic-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridParnerNamespaceLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8632b003-3545-4b29-85e6-b2b96773df1e"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-EventGrid-Partner-Namespace-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8bfadddb-ee1c-4639-8911-a38cb8e0b3bd"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-EventGrid-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventGridPubclicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f8f774be-6aee-492a-9e29-486ef81f3a68"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-EventGrid-Public-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/EventHub/AzurePolicySets/Compliant-EventHub.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Event Hub is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Event Hub for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Event Hub"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Event-Hub"
      + parameters          = jsonencode(
            {
              + eventHubAuthRules                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubDiagnostics                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + eventHubLogAnalyticsWorkspaceId       = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + eventHubMinTls                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubNamespacesCmk                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubNamespacesDoubleEncryption    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubNamespacesLocalAuth           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubNamespacesModifyLocalAuth     = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + eventHubNamespacesPublicNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + eventHubPremiumCmk                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Event Hub is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Event Hub"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Event Hub is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Event Hub is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Event Hub is not accessible over the public internet"
          + display_name                    = "Ensure Event Hub is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('eventHubDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('eventHubLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1f6e93e8-6b31-41b1-83f6-36e449a42579"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-EH"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubNamespacesCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-Cmk"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-EH-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubMinTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-MINTLS"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-EH-MINTLS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubPremiumCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-EH-Premium-CMK"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-EH-Premium-CMK"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubNamespacesDoubleEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/836cd60e-87f3-4e6a-a27c-29d687f01a4c"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-EH-Double-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubNamespacesPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0602787f-9896-402a-a6e1-39ee63ee435e"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-EH-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubNamespacesModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/57f35901-8389-40bb-ac49-3ba4f86d889d"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-EH-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubNamespacesLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5d4e3c65-4873-47be-94f3-6f8b953a3598"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-EH-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('eventHubAuthRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b278e460-7cfc-4451-8294-cccc40a940d7"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-EH-Auth-Rules"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/KeyVault/AzurePolicySets/Cmplnt-KeyVault.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Key Vault is compliant for regulated industries."
      + display_name        = "Enforce secure-by-default Key Vault for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Key Vault"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Key-Vault"
      + parameters          = jsonencode(
            {
              + hsmDiagnostics                                               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + hsmLogAnalyticsWorkspaceId                                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + hsmLogCategories                                             = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + keyVaultArmRbac                                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultCertKeyTypes                                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultCertValidPeriod                                      = {
                  + defaultValue = 12
                  + type         = "integer"
                }
              + keyVaultCertificateLifeTimeAction                            = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + keyVaultCertificateMaximumPercentageLife                     = {
                  + defaultValue = 80
                  + type         = "integer"
                }
              + keyVaultCertificateMinimumDaysBeforeExpiry                   = {
                  + defaultValue = 20
                  + type         = "integer"
                }
              + keyVaultCertificateNotExpireWithinSpecifiedNumberOfDays      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultCertificateNotExpireWithinSpecifiedNumberOfDaysValue = {
                  + defaultValue = 90
                  + type         = "integer"
                }
              + keyVaultCertificatesPeriod                                   = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + keyVaultCheckMinimumRSACertificateSize                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultCheckMinimumRSAKeySize                               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultCryptographicType                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultDiagnostics                                          = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + keyVaultDisablePublicNetwork                                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultEllipticCurve                                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultFw                                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultHmsCurveNames                                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultHmsCurveNamesValue                                   = {
                  + defaultValue = [
                      + "P-256",
                      + "P-256K",
                      + "P-384",
                      + "P-521",
                    ]
                  + type         = "array"
                }
              + keyVaultHmsKeysExpiration                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultHmsPurgeProtection                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultHsmMinimumDaysBeforeExpiration                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultHsmMinimumDaysBeforeExpirationValue                  = {
                  + defaultValue = 90
                  + type         = "integer"
                }
              + keyVaultIntegratedCa                                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultIntegratedCaValue                                    = {
                  + defaultValue = [
                      + "DigiCert",
                      + "GlobalSign",
                    ]
                  + type         = "array"
                }
              + keyVaultKeysExpiration                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultLogAnalyticsWorkspaceId                              = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + keyVaultManagedHsmCheckMinimumRSAKeySize                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultManagedHsmDisablePublicNetwork                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultManagedHsmDisablePublicNetworkModify                 = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + keyVaultManagedHsmMinimumRSAKeySizeValue                     = {
                  + defaultValue = 2048
                  + type         = "integer"
                }
              + keyVaultMinimumRSACertificateSizeValue                       = {
                  + defaultValue = 2048
                  + type         = "integer"
                }
              + keyVaultMinimumRSAKeySizeValue                               = {
                  + defaultValue = 2048
                  + type         = "integer"
                }
              + keyVaultModifyFw                                             = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + keyVaultNonIntegratedCa                                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultNonIntegratedCaValue                                 = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + keyVaultPurgeProtection                                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultSecretContentType                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultSecretExpiration                                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keyVaultSoftDelete                                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keysActive                                                   = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + keysActiveInDays                                             = {
                  + defaultValue = 90
                  + type         = "integer"
                }
              + keysCurveNames                                               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + keysExpiration                                               = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + keysExpirationInDays                                         = {
                  + defaultValue = 30
                  + type         = "integer"
                }
              + keysValidPeriod                                              = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + keysValidityInDays                                           = {
                  + defaultValue = 90
                  + type         = "integer"
                }
              + secretsActive                                                = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + secretsActiveInDays                                          = {
                  + defaultValue = 90
                  + type         = "integer"
                }
              + secretsExpiration                                            = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + secretsMoreInDays                                            = {
                  + defaultValue = 30
                  + type         = "integer"
                }
              + secretsValidPeriod                                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + secretsValidityInDays                                        = {
                  + defaultValue = 90
                  + type         = "integer"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Key Vault is using secure encryption"
          + display_name                    = "Ensure Key Vault is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Key Vault is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Key Vault"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Key Vault is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Key Vault is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Key Vault is not accessible over the public internet"
          + display_name                    = "Ensure Key Vault is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + daysToExpire = {
                      + value = "[parameters('keyVaultCertificateNotExpireWithinSpecifiedNumberOfDaysValue')]"
                    }
                  + effect       = {
                      + value = "[parameters('keyVaultCertificateNotExpireWithinSpecifiedNumberOfDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f772fb64-8e40-40ad-87bc-7706e1949427"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Cert-Expiration-Within-Specific-Number-Days"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedECNames = {
                      + value = "[parameters('keyVaultHmsCurveNamesValue')]"
                    }
                  + effect         = {
                      + value = "[parameters('keyVaultHmsCurveNames')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e58fd0c1-feac-4d12-92db-0a7e9421f53e"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Hsm-Curve-Names"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                      = {
                      + value = "[parameters('keyVaultHsmMinimumDaysBeforeExpiration')]"
                    }
                  + minimumDaysBeforeExpiration = {
                      + value = "[parameters('keyVaultHsmMinimumDaysBeforeExpirationValue')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ad27588c-0198-4c84-81ef-08efd0274653"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Hsm-MinimumDays-Before-Expiration"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedCAs = {
                      + value = "[parameters('keyVaultIntegratedCaValue')]"
                    }
                  + effect     = {
                      + value = "[parameters('keyVaultIntegratedCa')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8e826246-c976-48f6-b03e-619bb92b3d82"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Integrated-Ca"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + caCommonName = {
                      + value = "[parameters('keyVaultNonIntegratedCaValue')]"
                    }
                  + effect       = {
                      + value = "[parameters('keyVaultNonIntegratedCa')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a22f4a40-01d3-4c7d-8071-da157eeff341"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Non-Integrated-Ca"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultSecretContentType')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75262d3e-ba4a-4f43-85f8-9f72c090e5e3"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Kv-Secret-Content-Type"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('hsmLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('hsmDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('hsmLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b88bfd90-4da5-43eb-936f-ae1481924291"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Hsm"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                = {
                      + value = "[parameters('secretsActive')]"
                    }
                  + maximumValidityInDays = {
                      + value = "[parameters('secretsActiveInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e8d99835-8a06-45ae-a8e0-87a91941ccfe"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Secret-AvticeDays"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                      = {
                      + value = "[parameters('secretsExpiration')]"
                    }
                  + minimumDaysBeforeExpiration = {
                      + value = "[parameters('secretsMoreInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b0eb591a-5e70-4534-a8bf-04b9c489584a"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Secret-MinDays"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keysCurveNames')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ff25f3c8-b739-4538-9d07-3d6d25cfb255"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Curve-Names"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                = {
                      + value = "[parameters('keysActive')]"
                    }
                  + maximumValidityInDays = {
                      + value = "[parameters('keysActiveInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c26e4b24-cf98-4c67-b48b-5a25c4c69eb9"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Key-Active"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                      = {
                      + value = "[parameters('keysExpiration')]"
                    }
                  + minimumDaysBeforeExpiration = {
                      + value = "[parameters('keysExpirationInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5ff38825-c5d8-47c5-b70e-069a21955146"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Key-Expiration"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultCryptographicType')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75c4f823-d65c-4f29-a733-01d0077fdbcb"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Cryptographic-Type"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultModifyFw')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ac673a9a-f77d-4846-b2d8-a57f8e1c01dc"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-KV-Fw"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultEllipticCurve')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bd78111f-4953-4367-9fd5-7e08808b54bf"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Elliptic-Curve"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultCertKeyTypes')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1151cede-290b-4ba0-8b38-0ad145ac888f"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Key-Types"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultFw')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/55615ac9-af46-4a59-874e-391cc3dfb490"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-KV-Fws"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                = {
                      + value = "[parameters('secretsValidPeriod')]"
                    }
                  + maximumValidityInDays = {
                      + value = "[parameters('secretsValidityInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/342e8053-e12e-4c44-be01-c3c2f318400f"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Secrets-ValidityDays"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                = {
                      + value = "[parameters('keysValidPeriod')]"
                    }
                  + maximumValidityInDays = {
                      + value = "[parameters('keysValidityInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/49a22571-d204-4c91-a7b6-09b1a586fbc9"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Keys-Expire"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultSecretExpiration')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/98728c90-32c7-4049-8429-847dc0f4fe37"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Secret-Expire"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultHmsKeysExpiration')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1d478a74-21ba-4b9f-9d8f-8e6fced0eec5"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Hms-Key-Expire"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultKeysExpiration')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/152b15f7-8e1f-4c1f-ab71-8c010ba5dbc0"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Key-Expire"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                  = {
                      + value = "[parameters('keyVaultCertificatesPeriod')]"
                    }
                  + maximumValidityInMonths = {
                      + value = "[parameters('keyVaultCertValidPeriod')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0a075868-4c26-42ef-914c-5bc007359560"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Cert-Period"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultHmsPurgeProtection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c39ba22d-4428-4149-b981-70acb31fc383"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Hms-PurgeProtection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('keyVaultDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('keyVaultLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/951af2fa-529b-416e-ab6e-066fd85ac459"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "DINE-KV-Logs"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultManagedHsmDisablePublicNetworkModify')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/84d327c3-164a-4685-b453-900478614456"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-KV-PublicNetworkAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultDisablePublicNetwork')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/405c5871-3e91-4644-8a63-58e19d68ff5b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-KV-PublicNetwork"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultSoftDelete')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Hms-SoftDelete"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultManagedHsmDisablePublicNetwork')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/19ea9d63-adee-4431-a95e-1913c6c1c75f"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-KV-Hms-PublicNetwork"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultArmRbac')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12d4fa5e-1f9f-4c21-97a9-b99b3c6611b5"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-KV-without-ArmRbac"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('keyVaultPurgeProtection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0b60c0b2-2dc2-4e1c-b5c9-abbed971de53"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-without-PurgeProtection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                  = {
                      + value = "[parameters('keyVaultCertificateLifeTimeAction')]"
                    }
                  + maximumPercentageLife   = {
                      + value = "[parameters('keyVaultCertificateMaximumPercentageLife')]"
                    }
                  + minimumDaysBeforeExpiry = {
                      + value = "[parameters('keyVaultCertificateMinimumDaysBeforeExpiry')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12ef42cb-9903-4e39-9c26-422d29570417"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-Cert-without-LifeTimeActionTrigger"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('keyVaultCheckMinimumRSAKeySize')]"
                    }
                  + minimumRSAKeySize = {
                      + value = "[parameters('keyVaultMinimumRSAKeySizeValue')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/82067dbb-e53b-4e06-b631-546d197452d9"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-RSA-Keys-without-MinKeySize"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('keyVaultManagedHsmCheckMinimumRSAKeySize')]"
                    }
                  + minimumRSAKeySize = {
                      + value = "[parameters('keyVaultManagedHsmMinimumRSAKeySizeValue')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86810a98-8e91-4a44-8386-ec66d0de5d57"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-keyVaultManagedHsm-RSA-Keys-without-MinKeySize"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('keyVaultCheckMinimumRSACertificateSize')]"
                    }
                  + minimumRSAKeySize = {
                      + value = "[parameters('keyVaultMinimumRSACertificateSizeValue')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cee51871-e572-4576-855c-047c820360f0"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-KV-RSA-Keys-without-MinCertSize"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Kubernetes/AzurePolicySets/Compliant-AKS.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Kubernetes is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Kubernetes for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Kubernetes"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Kubernetes"
      + parameters          = jsonencode(
            {
              + aksAllowedCapabilities                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksCni                                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksCommandInvoke                           = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + aksDefaultNamespace                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksDefender                                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + aksDefenderLogAnalyticsWorkspaceResourceId = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + aksDiagnostics                             = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + aksHttps                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksInternalLb                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksKms                                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksLocalAuth                               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksLogAnalyticsWorkspaceId                 = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + aksNakedPods                               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksOsAndDataDiskCmk                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksPolicy                                  = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + aksPrivContainers                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksPrivEscalation                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksPrivateCluster                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksReadinessOrLivenessProbes               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksShareHostProcessAndNamespace            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksTempDisk                                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + aksWindowsContainerAdministrator           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + enableAscForContainers                     = {
                  + allowedValues = [
                      + "DeployIfNotExists",
                      + "Disabled",
                    ]
                  + defaultValue  = "DeployIfNotExists"
                  + metadata      = {
                      + description = "Enable or disable the execution of the policy"
                      + displayName = "Effect Containers"
                    }
                  + type          = "String"
                }
              + logAnalytics                               = {
                  + defaultValue = ""
                  + metadata     = {
                      + description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                      + displayName = "Primary Log Analytics workspace"
                    }
                  + type         = "String"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Governance and Strategy"
          + description                     = "Policy to ensure Kubernetes is integrated with Azure Resource Manager to be governed by Azure Policy"
          + display_name                    = "Ensure Kubernetes is integrated with Azure Resource Manager to be governed by Azure Policy"
          + name                            = "Governance"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Kubernetes is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Kubernetes"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Kubernetes is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Kubernetes is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Kubernetes is not accessible over the public internet"
          + display_name                    = "Ensure Kubernetes is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('aksDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('aksLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6c66c325-74c8-42fd-a286-a74b0e2939d8"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Aks"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksWindowsContainerAdministrator')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5485eac0-7e8f-4964-998b-a44f4f0c1e75"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Windows-Conatiner-Administrator"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksShareHostProcessAndNamespace')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Shared-Host-Process-Namespace"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksNakedPods')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/65280eef-c8b4-425e-9aec-af55e55bf581"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Naked-Pods"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksDefaultNamespace')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9f061a12-e40d-4183-a00e-171812443373"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Default-Namespace"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksHttps')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aks-Https"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksInternalLb')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aks-Internal-Lb"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksTempDisk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/41425d9f-d1a5-499a-9932-f8ed8453932c"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Aks-Temp-Disk-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksAllowedCapabilities')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c26596ff-4d70-4e6a-9a30-c2506bd2f80c"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "Deny-Aks-Allowed-Capabilities"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksPrivEscalation')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Priv-Escalation"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksPrivContainers')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/95edb821-ddaf-4404-9732-666045e056b4"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Priv-Containers"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksReadinessOrLivenessProbes')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b1a9997f-2883-4f12-bdff-2280f99b5915"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aks-ReadinessOrLiveness-Probes"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksCommandInvoke')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b708b0a-3380-40e9-8b79-821f9fa224cc"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Dine-Aks-Command-Invoke"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksPolicy')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "Dine-Aks-Policy"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksOsAndDataDiskCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7d7be79c-23ba-4033-84dd-45e2a5ccdd67"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Aks-OsAnDataDisk-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                          = {
                      + value = "[parameters('aksDefender')]"
                    }
                  + logAnalyticsWorkspaceResourceId = {
                      + value = "[parameters('aksDefenderLogAnalyticsWorkspaceResourceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Aks-Defender"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksPrivateCluster')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/040732e8-d947-40b8-95d6-854c95024bf8"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aks-Private-Cluster"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/993c2fcd-2b29-49d2-9eb0-df2c3a730c32"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Aks-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                          = {
                      + value = "[parameters('enableAscForContainers')]"
                    }
                  + logAnalyticsWorkspaceResourceId = {
                      + value = "[parameters('logAnalytics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/64def556-fbad-4622-930e-72d1d5589bf5"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "defenderforKubernetes"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                          = {
                      + value = "[parameters('enableAscForContainers')]"
                    }
                  + logAnalyticsWorkspaceResourceId = {
                      + value = "[parameters('logAnalytics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/microsoft.authorization/policydefinitions/708b60a6-d253-4fe0-9114-4be4c00f012c"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "defenderforKubernetesArc"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "azurePolicyForKubernetes"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('enableAscForContainers')]"
                    }
                }
            )
          + policy_definition_id = "/providers/microsoft.authorization/policydefinitions/0adc5395-9169-4b9b-8687-af838d69410a"
          + policy_group_names   = [
              + "Governance",
            ]
          + reference_id         = "azurePolicyForKubernetesArc"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksKms')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Aks-CSI"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Aks-Kms"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('aksCni')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Aks-Cni"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Aks-Cni"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/MachineLearning/AzurePolicySets/Compliant-MachineLearning.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Machine Learning is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Machine Learning for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Machine Learning"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Machine-Learning"
      + parameters          = jsonencode(
            {
              + machineLearningAks                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + machineLearningComputeClusterRemoteLoginPortPublicAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + machineLearningHbiWorkspace                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + machineLearningPublicAccessWhenBehindVnet                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mlCmk                                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mlDiagnostics                                            = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + mlLocalAuth                                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mlLogAnalyticsWorkspaceId                                = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + mlLogCategories                                          = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + mlModifyLocalAuth                                        = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + mlModifyPublicNetworkAccess                              = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + mlOutdatedOS                                             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mlPublicNetworkAccess                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mlUserAssignedIdentity                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure compliance for purge protection, soft delete, and key rotation"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Machine Learning is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Machine Learning"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Machine Learning is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Machine Learning is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Machine Learning is not accessible over the public internet"
          + display_name                    = "Ensure Machine Learning is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('mlLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('mlDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('mlLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/90c90eda-bfe7-4c67-bf26-410420ed1047"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Ml"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ba769a63-b8cc-4b2d-abf6-ac33c7204be8"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ML-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effects = {
                      + value = "[parameters('mlOutdatedOS')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-ML-Outdated-OS"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-ML-Outdated-Os"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('machineLearningAks')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-Aks"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MachineLearning-Aks"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('machineLearningComputeClusterRemoteLoginPortPublicAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('machineLearningHbiWorkspace')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-HbiWorkspace"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MachineLearning-HbiWorkspace"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('machineLearningPublicAccessWhenBehindVnet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MachineLearning-PublicAccessWhenBehindVnet"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MachineLearning-PublicAccessWhenBehindVnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/e96a9a5f-07ca-471b-9bc5-6a0f33cbd68f"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ML-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a6f9a2d0-cff7-4855-83ad-4cd750666512"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-ML-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a10ee784-7409-4941-b091-663697637c0f"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-ML-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlUserAssignedIdentity')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5f0c7d88-c7de-45b8-ac49-db49e72eaa78"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-ML-User-Assigned-Identity"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mlPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/438c38d2-3772-465a-a9cc-7a6666a275ce"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-ML-Public-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/MySQL/AzurePolicySets/Compliant-MySql.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures MySQL is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default MySQL for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "MySql"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-MySQL"
      + parameters          = jsonencode(
            {
              + mySQLMinimalTlsVersion           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mySQLMinimalTlsVersionSetting    = {
                  + defaultValue = "TLS1_2"
                  + type         = "string"
                }
              + mySqlAdvThreatProtection         = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + mySqlFlexiblePublicNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mySqlInfraEncryption             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mySqlPublicNetworkAccess         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + mySqlSsl                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure MySQL is using secure encryption"
          + display_name                    = "Ensure MySQL is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure MySQL is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for MySQL"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure MySQL is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure MySQL is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure MySQL is not accessible over the public internet"
          + display_name                    = "Ensure MySQL is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mySqlSsl')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MySQL-SSL-Connection"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MySql-Ssl"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('mySQLMinimalTlsVersion')]"
                    }
                  + minimalTlsVersion = {
                      + value = "[parameters('mySQLMinimalTlsVersionSetting')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-MySQL-MinimalTlsVersion"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MySQL-MinimalTlsVersion"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mySqlPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d9844e8a-1437-4aeb-a32c-0c992f056095"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-MySql-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mySqlFlexiblePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c9299215-ae47-4f50-9c54-8a392f68a052"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-MySql-Flex-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mySqlAdvThreatProtection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/80ed5239-4122-41ed-b54a-6f1fa7552816"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-MySql-Adv-Threat-Protection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('mySqlInfraEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3a58212a-c829-4f13-9872-6371df2fd0b4"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-MySql-Infra-Encryption"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Network/AzurePolicySets/Compliant-Network.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Network and Networking services are compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Network and Networking services for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Network"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Network"
      + parameters          = jsonencode(
            {
              + afwEmptyIDPSBypassList                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + afwEnableAllIDPSSignatureRules                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + afwEnableIDPS                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + afwEnableTlsForAllAppRules                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + afwEnableTlsInspection                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appGwDiagnostics                                 = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + appGwLogAnalyticsWorkspaceId                     = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + appGwTlsVersion                                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + appGwWaf                                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + bastionDiagnostics                               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + bastionLogAnalyticsWorkspaceId                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + bastionLogCategories                             = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + ddosPlanResourceId                               = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + denyActionVnetPeeringAvnm                        = {
                  + defaultValue = "denyAction"
                  + type         = "string"
                }
              + denyActionVnetPlatform                           = {
                  + defaultValue = "denyAction"
                  + type         = "string"
                }
              + denyInboundInternet                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + denyRdpFromInternet                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + denySshFromInternet                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + erDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + erDiagnosticsLogAnalyticsWorkspaceId             = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + fdCdnDiagnostics                                 = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + fdCdnLogAnalyticsWorkpaceId                      = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + fdCdnLogCategories                               = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + fdDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + fdDiagnosticsLogAnalyticsWorkspaceId             = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + firewallWithoutPolicy                            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + fwDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + fwLogAnalyticsWorkspaceId                        = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + gwDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + gwLogAnalyticsWorkspaceId                        = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + gwLogCategories                                  = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + lbDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + lbDiagnosticsLogAnalyticsWorkspaceId             = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + modifyNsg                                        = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + modifyNsgRuleAccess                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + modifyNsgRuleDescription                         = {
                  + defaultValue = "Deny any outbound traffic to the Internet"
                  + type         = "string"
                }
              + modifyNsgRuleDestinationAddressPrefix            = {
                  + defaultValue = "Internet"
                  + type         = "string"
                }
              + modifyNsgRuleDestinationPortRange                = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + modifyNsgRuleDirection                           = {
                  + defaultValue = "Outbound"
                  + type         = "string"
                }
              + modifyNsgRuleName                                = {
                  + defaultValue = "DenyAnyInternetOutbound"
                  + type         = "string"
                }
              + modifyNsgRulePriority                            = {
                  + defaultValue = 1000
                  + type         = "integer"
                }
              + modifyNsgRuleProtocol                            = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + modifyNsgRuleSourceAddressPrefix                 = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + modifyNsgRuleSourcePortRange                     = {
                  + defaultValue = "*"
                  + type         = "string"
                }
              + modifyUdr                                        = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + modifyUdrAddressPrefix                           = {
                  + defaultValue = "0.0.0.0/0"
                  + type         = "string"
                }
              + modifyUdrNextHopIpAddress                        = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + modifyUdrNextHopType                             = {
                  + defaultValue = "None"
                  + type         = "string"
                }
              + nsgDiagnostics                                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + nsgLogAnalyticsWorkspaceId                       = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + p2sDiagnostics                                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + p2sLogAnalyticsWorkspaceId                       = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + p2sLogCategories                                 = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + pipDiagnostics                                   = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + pipLogAnalyticsWorkspaceId                       = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + pipLogCategories                                 = {
                  + defaultValue = "allLogs"
                  + type         = "string"
                }
              + publicIpAddressesUnusedResourcesCostOptimization = {
                  + defaultValue = "Audit"
                  + type         = "string"
                }
              + spokeVnetPrefix                                  = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + subnetNsg                                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + subnetServiceEndpoints                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + subnetUdr                                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + subnetWithoutPrivateEndpointNetworkPolicies      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + tmDiagnostics                                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + tmDiagnosticsLogAnalyticsWorkspaceId             = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + vnetDiagnostics                                  = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + vnetDiagnosticsLogAnalyticsWorkspaceId           = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + vnetModifyDdos                                   = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + vnetPeeringPrefix                                = {
                  + defaultValue = "AVNM_"
                  + type         = "string"
                }
              + vpnAzureAD                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + wafAfdEnabled                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + wafFwRules                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + wafMode                                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + wafModeAppGw                                     = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + wafModeAppGwRequirement                          = {
                  + defaultValue = "Prevention"
                  + type         = "string"
                }
              + wafModeRequirement                               = {
                  + defaultValue = "Prevention"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Cost Optimization"
          + description                     = "Policy to ensure Compute is cost optimized"
          + display_name                    = "Ensure Compute cost optimized"
          + name                            = "Cost"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Network is using secure protocols"
          + display_name                    = "Ensure Network is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Networking services are logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Networking services are logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Network is not accessible over the public internet"
          + display_name                    = "Ensure Network is securely configured and accessed"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/35f9c03a-cc27-418e-9c0c-539ff999d010"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Nsg-GW-subnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('vpnAzureAD')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/21a6bc25-125e-4d13-b82d-2e19b7208ab7"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-VPN-AzureAD"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('wafAfdEnabled')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/055aa869-bc98-4af8-bafc-23f1ab6ffe2c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Waf-Afd-Enabled"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('afwEnableIDPS')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6484db87-a62d-4327-9f07-80a2cbdf333a"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Waf-IDPS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('afwEnableAllIDPSSignatureRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/610b6183-5f00-4d68-86d2-4ab4cb3a67a5"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FW-AllIDPSS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('afwEmptyIDPSBypassList')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f516dc7a-4543-4d40-aad6-98f76a706b50"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FW-EmpIDPSBypass"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('afwEnableTlsInspection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/711c24bb-7f18-4578-b192-81a6161e1f17"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FW-TLS-Inspection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('afwEnableTlsForAllAppRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a58ac66d-92cb-409c-94b8-8e48d7a96596"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-FW-TLS-AllApp"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('p2sLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('p2sDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('p2sLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cac9e1c5-c3cb-47fa-8d4c-88b8559262d2"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-P2S"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('gwLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('gwDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('gwLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ed6ae75a-828f-4fea-88fd-dead1145f1dd"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Gw"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('pipLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('pipDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('pipLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1513498c-3091-461a-b321-e9b433218d28"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Pip"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('fdCdnLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('fdCdnDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('fdCdnLogAnalyticsWorkpaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6201aeb7-2b5c-4671-8ab4-5d3ba4d77f3b"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-FdCdn"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + categoryGroup = {
                      + value = "[parameters('bastionLogCategories')]"
                    }
                  + effect        = {
                      + value = "[parameters('bastionDiagnostics')]"
                    }
                  + logAnalytics  = {
                      + value = "[parameters('bastionLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f8352124-56fa-4f94-9441-425109cdc14b"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Bastion"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect          = {
                      + value = "[parameters('wafModeAppGw')]"
                    }
                  + modeRequirement = {
                      + value = "[parameters('wafModeAppGwRequirement')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/12430be1-6cc8-4527-a9a8-e3d38f250096"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Waf-AppGw-mode"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('wafFwRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/632d3993-e2c0-44ea-a7db-2eca131f356d"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Waf-Fw-rules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect          = {
                      + value = "[parameters('wafMode')]"
                    }
                  + modeRequirement = {
                      + value = "[parameters('wafModeRequirement')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/425bea59-a659-4cbb-8d31-34499bd030b8"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Waf-mode"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('nsgDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('nsgLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/98a2e215-5382-489e-bd29-32e7190a39ba"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Nsg-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + ddosPlan = {
                      + value = "[parameters('ddosPlanResourceId')]"
                    }
                  + effect   = {
                      + value = "[parameters('vnetModifyDdos')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Modify-vNet-DDoS"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/88c0b9da-ce96-4b03-9635-f29a937e2900"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Ip-Forwarding"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83a86a26-fd1f-447c-b59d-e51f44264114"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-vNic-Pip"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appGwWaf')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/564feb30-bf6a-4854-b4bb-0d2d2d1e6c66"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-AppGw-Without-Waf"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('subnetUdr')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-UDR"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Subnet-Without-UDR"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('subnetNsg')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-NSG"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Subnet-Without-NSG"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('denyInboundInternet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Inbound-Internet-All"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Inbound-Internet-All"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('lbDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('lbDiagnosticsLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-LoadBalancer"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-LoadBalancer"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('fdDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('fdDiagnosticsLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-FrontDoor"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-FrontDoor"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('tmDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('tmDiagnosticsLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-TrafficManager"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-TrafficManager"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('vnetDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('vnetDiagnosticsLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-Vnet"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Vnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('denyRdpFromInternet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Rdp-From-Internet"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Rdp-From-Internet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('denySshFromInternet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Ssh-From-Internet"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Ssh-From-Internet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('erDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('erDiagnosticsLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-ExpressRouteCircuit"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-ExpressRouteCircuit"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('appGwDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('appGwLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-ApplicationGateway"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-ApplicationGateway"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('appGwTlsVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGw-Without-Tls"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-AppGw-Without-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + addressPrefix    = {
                      + value = "[parameters('modifyUdrAddressPrefix')]"
                    }
                  + effect           = {
                      + value = "[parameters('modifyUdr')]"
                    }
                  + nextHopIpAddress = {
                      + value = "[parameters('modifyUdrNextHopIpAddress')]"
                    }
                  + nextHopType      = {
                      + value = "[parameters('modifyUdrNextHopType')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Modify-Udr"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Udr"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                          = {
                      + value = "[parameters('modifyNsg')]"
                    }
                  + nsgRuleAccess                   = {
                      + value = "[parameters('modifyNsgRuleAccess')]"
                    }
                  + nsgRuleDescription              = {
                      + value = "[parameters('modifyNsgRuleDescription')]"
                    }
                  + nsgRuleDestinationAddressPrefix = {
                      + value = "[parameters('modifyNsgRuleDestinationAddressPrefix')]"
                    }
                  + nsgRuleDestinationPortRange     = {
                      + value = "[parameters('modifyNsgRuleDestinationPortRange')]"
                    }
                  + nsgRuleDirection                = {
                      + value = "[parameters('modifyNsgRuleDirection')]"
                    }
                  + nsgRuleName                     = {
                      + value = "[parameters('modifyNsgRuleName')]"
                    }
                  + nsgRulePriority                 = {
                      + value = "[parameters('modifyNsgRulePriority')]"
                    }
                  + nsgRuleProtocol                 = {
                      + value = "[parameters('modifyNsgRuleProtocol')]"
                    }
                  + nsgRuleSourceAddressPrefix      = {
                      + value = "[parameters('modifyNsgRuleSourceAddressPrefix')]"
                    }
                  + nsgRuleSourcePortRange          = {
                      + value = "[parameters('modifyNsgRuleSourcePortRange')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Modify-Nsg"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Nsg"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('fwDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('fwLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-Firewall"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Firewall"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect          = {
                      + value = "[parameters('denyActionVnetPlatform')]"
                    }
                  + spokeVnetPrefix = {
                      + value = "[parameters('spokeVnetPrefix')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/DenyAction-Vnet-Platform"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "DenyAction-Vnet-Platform"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('denyActionVnetPeeringAvnm')]"
                    }
                  + vnetPeeringPrefix = {
                      + value = "[parameters('vnetPeeringPrefix')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/DenyAction-VnetPeerings-AVNM"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "DenyAction-VnetPeerings-AVNM"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('publicIpAddressesUnusedResourcesCostOptimization')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('firewallWithoutPolicy')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Firewall-WithoutPolicy"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Deny-Firewall-WithoutPolicy"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('subnetServiceEndpoints')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-ServiceEndpoints"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Deny-Subnet-ServiceEndpoints"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('subnetWithoutPrivateEndpointNetworkPolicies')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-PrivateEndpointNetworkPolicies"
          + policy_group_names   = [
              + "Cost",
            ]
          + reference_id         = "Deny-Subnet-Without-PrivateEndpointNetworkPolicies"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/PostgreSQL/AzurePolicySets/Compliant-PostgreSQL.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures PostgreSQL is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default PostgreSQL for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "PostgreSQL"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-PostgreSQL"
      + parameters          = jsonencode(
            {
              + postgreDiagnostics                    = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + postgreLogAnalyticsWorkspaceId        = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + postgreSqlAdvThreatProtection         = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + postgreSqlFlexiblePublicNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + postgreSqlMinimalTlsVersion           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + postgreSqlMinimalTlsVersionSetting    = {
                  + defaultValue = "TLS1_2"
                  + type         = "string"
                }
              + postgreSqlPublicNetworkAccess         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + postgreSqlSsl                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure PostgreSQL is using secure encryption"
          + display_name                    = "Ensure PostgreSQL is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure PostgreSQL is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for PostgreSQL"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure PostgreSQL is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure PostgreSQL is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure PostgreSQL is not accessible over the public internet"
          + display_name                    = "Ensure PostgreSQL is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('postgreSqlAdvThreatProtection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/db048e65-913c-49f9-bb5f-1084184671d3"
          + policy_group_names   = [
              + "Encryption",
              + "Logging",
            ]
          + reference_id         = "Dine-PostgreSql-Adv-Threat-Protection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('postgreSqlSsl')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-SSL"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-PostgreSql-SSL"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('postgreSqlMinimalTlsVersion')]"
                    }
                  + minimalTlsVersion = {
                      + value = "[parameters('postgreSqlMinimalTlsVersionSetting')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-PostgreSql-MinimalTlsVersion"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-PostgreSql-MinimalTlsVersion"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('postgreDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('postgreLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Diagnostics-PostgreSQL"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-PostgreSQL"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('postgreSqlPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b52376f7-9612-48a1-81cd-1ffe4b61032c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-PostgreSql-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('postgreSqlFlexiblePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5e1de0e3-42cb-4ebc-a86d-61d0c619ca48"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-PostgreSql-Flexible-Public-Network-Access"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/SQL/AzurePolicySets/Compliant-SQL.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures SQL and SQL Managed Instance is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default SQL and SQL Managed Instance for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "SQL"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Sql"
      + parameters          = jsonencode(
            {
              + modifySqlPublicNetworkAccess       = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + sqlAadOnly                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlAuditingSettings                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlDbAllDiagnostics                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlDbAllLogAnalyticsWorkspaceId    = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + sqlDbPublicNetworkAccess           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlDbServerDiagnostics             = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlDbServerLogAnalyticsWorkspaceId = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + sqlDbTls                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlManagedAadOnly                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlManagedCmk                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlManagedDefender                 = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlManagedPublicNetworkAccess      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlMiMinimalTlsVersion             = {
                  + defaultValue = "1.2"
                  + type         = "string"
                }
              + sqlMiMinimalTlsVersionEffect       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlMinimalTlsVersion               = {
                  + defaultValue = "1.2"
                  + type         = "string"
                }
              + sqlMinimalTlsVersionEffect         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlSecurityAlertPolicies           = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlServerCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + sqlServerDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + sqlServerLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + sqlTde                             = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for SQL and SQL Managed Instance"
          + display_name                    = "Ensure compliance for purge protection, soft delete, and key rotation"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure SQL is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for SQL"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure SQL and SQL Managed Instance is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure SQL and SQL Managed Instance is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure SQL and SQL Managed Instance is not accessible over the public internet"
          + display_name                    = "Ensure SQL and SQL Managed Instance is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('sqlDbAllDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('sqlDbAllLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b79fa14e-238a-4c2d-b376-442ce508fc84"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-SqlDbServerAll"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                  = {
                      + value = "[parameters('sqlDbServerDiagnostics')]"
                    }
                  + logAnalyticsWorkspaceId = {
                      + value = "[parameters('sqlDbServerLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7ea8a143-05e3-4553-abfe-f56bef8b0b70"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-SqlDbServer"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlManagedDefender')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c5a62eb0-c65a-4220-8a4d-f70dd4ca95dd"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-Managed-Defender"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlManagedCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ac01ad65-10e5-46df-bdd9-6b0cad13e1d2"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Sql-Managed-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlAadOnly')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/abda6d70-9778-44e7-84a8-06713e6db027"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Sql-Aad-Only"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('sqlMiMinimalTlsVersionEffect')]"
                    }
                  + minimalTlsVersion = {
                      + value = "[parameters('sqlMiMinimalTlsVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-SqlMi-MinimalTlsVersion"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-SqlMi-MinimalTlsVersion"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect            = {
                      + value = "[parameters('sqlMinimalTlsVersionEffect')]"
                    }
                  + minimalTlsVersion = {
                      + value = "[parameters('sqlMinimalTlsVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Sql-MinimalTlsVersion"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Sql-MinimalTlsVersion"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlAuditingSettings')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Sql-AuditingSettings"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-AuditingSettings"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlSecurityAlertPolicies')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Dine-Sql-SecurityAlertPolicies"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-SecurityAlertPolicies"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlManagedPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9dfea752-dd46-4766-aed1-c355fa93fb91"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Sql-Managed-Public-Endpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlTde')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Dine-Sql-Tde"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlManagedAadOnly')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/78215662-041e-49ed-a9dd-5385911b3a1f"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Sql-Managed-Aad-Only"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/36d49e87-48c4-4f2e-beed-ba4ed02b71f5"
          + policy_group_names   = [
              + "Encryption",
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-Defender"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode({})
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/6134c3db-786f-471e-87bc-8f479dc890f6"
          + policy_group_names   = [
              + "Encryption",
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-Adv-Data"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlDbTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/32e6bbec-16b6-44c2-be37-c5b672d103cf"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Sql-Db-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlServerCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0a370ff3-6cab-4e85-8995-295fd854c5b8"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-SQL-CMK"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('sqlDbPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/1b8ca024-1d5c-4dec-8995-b1a932b41780"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-SQL-Db-PublicNetworkAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                  = {
                      + value = "[parameters('sqlServerDiagnostics')]"
                    }
                  + logAnalyticsWorkspaceId = {
                      + value = "[parameters('sqlServerLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25da7dfb-0666-4a15-a8f5-402127efd8bb"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Sql-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('modifySqlPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/28b0b1e5-17ba-4963-a7a4-5a1ab4400a0b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Sql-PublicNetworkAccess"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/ServiceBus/AzurePolicySets/Compliant-ServiceBus.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Service Bus is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Service Bus for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Service Bus"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Service-Bus"
      + parameters          = jsonencode(
            {
              + ServiceBusLogAnalyticsEffect         = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "String"
                }
              + ServiceBusLogAnalyticsWorkspaceId    = {
                  + defaultValue = ""
                  + type         = "String"
                }
              + profileName                          = {
                  + defaultValue = "setByPolicy"
                  + type         = "string"
                }
              + serviceBusAuthzRules                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + serviceBusDenyCmk                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + serviceBusDenyDisabledLocalAuth      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + serviceBusDisablePublicNetworkAccess = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + serviceBusDoubleEncryption           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + serviceBusModifyDisableLocalAuth     = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Service Bus is using secure encryption"
          + display_name                    = "Ensure Service Bus is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Service Bus is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Service Bus"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Service Bus is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Service Bus is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Service Bus is not accessible over the public internet"
          + display_name                    = "Ensure Service Bus is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusAuthzRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a1817ec0-a368-432a-8057-8371e17ac6ee"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Sb-Authz-Rules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('ServiceBusLogAnalyticsEffect')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('ServiceBusLogAnalyticsWorkspaceId')]"
                    }
                  + profileName  = {
                      + value = "[parameters('profileName')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/04d53d87-841c-4f23-8a5b-21564380b55e"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Sb-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusDenyCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-ServiceBus-CMK"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Sb-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusDoubleEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/ebaf4f25-a4e8-415f-86a8-42d9155bef0b"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Sb-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cbd11fd3-3002-4907-b6c8-579f0e700e13"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Sb-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusDenyDisabledLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cfb11c26-f069-4c14-8e36-56c394dae5af"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Sb-LocalAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('serviceBusModifyDisableLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/910711a6-8aa2-4f15-ae62-1e5b2ed3ef9e"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-Sb-LocalAuth"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/StorageAccount/AzurePolicySets/Compliant-Storage.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Storage is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Storage Account for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Storage"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Storage"
      + parameters          = jsonencode(
            {
              + diagBlobMetrics                                       = {
                  + defaultValue = false
                  + type         = "boolean"
                }
              + diagFileMetrics                                       = {
                  + defaultValue = false
                  + type         = "boolean"
                }
              + diagQueueMetrics                                      = {
                  + defaultValue = false
                  + type         = "boolean"
                }
              + diagTableMetrics                                      = {
                  + defaultValue = false
                  + type         = "boolean"
                }
              + modifyStorageAccountPublicEndpoint                    = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + modifyStorageFileSyncPublicEndpoint                   = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + storageAccountNetworkRules                            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountRestrictNetworkRules                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountSecureTransfer                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountSharedKey                               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsAllowedCopyScope                       = {
                  + defaultValue = "AAD"
                  + type         = "string"
                }
              + storageAccountsCmk                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsCopyScope                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsCrossTenant                            = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsDiagnostics                            = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageAccountsDisablePublicNetworkAccess             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsDoubleEncryption                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsEncryptionCmk                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsInfraEncryption                        = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsLogAnalyticsWorkspaceId                = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageAccountsModifyDisablePublicNetworkAccess       = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + storageAccountsPublicAccess                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAccountsTls                                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAllowBlobPublicAccess                          = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageAllowedNetworkAclsBypass                       = {
                  + defaultValue = [
                      + "None",
                    ]
                  + type         = "array"
                }
              + storageBlobDiagnostics                                = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageBlobLogAnalyticsWorkspaceId                    = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageBlobPrivateDnsZone                             = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageBlobPrivateDnsZoneId                           = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageClassicToArm                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageContainerDeleteRetentionPolicy                 = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageCorsRules                                      = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageCustomDomain                                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageDfsPrivateDnsZone                              = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageDfsPrivateDnsZoneId                            = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageFileServicesAllowedSmbVersion                  = {
                  + defaultValue = "SMB3.1.1"
                  + type         = "string"
                }
              + storageFileServicesInsecureAuth                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageFileServicesInsecureKerberos                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageFileServicesInsecureSmbChannel                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageFileServicesInsecureSmbVersions                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageFileServicesNotAllowedAuthMethods              = {
                  + defaultValue = "NTLMv2"
                  + type         = "string"
                }
              + storageFileServicesNotAllowedChannelEncryption        = {
                  + defaultValue = "AES-128-CCM"
                  + type         = "string"
                }
              + storageFileServicesNotAllowedKerberosTicketEncryption = {
                  + defaultValue = "RC4-HMAC"
                  + type         = "string"
                }
              + storageFileSyncDiagnostics                            = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageFileSyncLogAnalyticsWorkspaceId                = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageFileSyncPublicEndpoint                         = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageKeysExipiration                                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageLocalUser                                      = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageMinContainerDeleteRetentionInDays              = {
                  + defaultValue = 7
                  + type         = "Integer"
                }
              + storageNetworkAclsBypass                              = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageNetworkAclsVirtualNetworkRules                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageQueueCmk                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageQueueDiagnostics                               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageQueueLogAnalyticsWorkspaceId                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageQueuePrivateDnsZone                            = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageQueuePrivateDnsZoneId                          = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageResourceAccessRulesResourceId                  = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageResourceAccessRulesTenantId                    = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageSecondaryBlobPrivateDnsZone                    = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageSecondaryBlobPrivateDnsZoneId                  = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageSecondaryDfsPrivateDnsZone                     = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageSecondaryDfsPrivateDnsZoneId                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageSecondaryQueuePrivateDnsZone                   = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageSecondaryQueuePrivateDnsZoneId                 = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageSecondaryWebPrivateDnsZone                     = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageSecondaryWebPrivateDnsZoneId                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageServicesEncryption                             = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageSftp                                           = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageTableCmk                                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + storageTableDiagnostics                               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageTableLogAnalyticsWorkspaceId                   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + storageThreatProtection                               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + storageWebPrivateDnsZone                              = {
                  + defaultValue = "Disabled"
                  + type         = "string"
                }
              + storageWebPrivateDnsZoneId                            = {
                  + defaultValue = ""
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure Storage Account is using secure encryption"
          + display_name                    = "Ensure Storage Account is using secure encryption"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Storage Account is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Storage Account"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Storage Account is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Storage Account is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Storage Account is not accessible over the public internet"
          + display_name                    = "Ensure Storage Account is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-Cmk"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedCopyScope = {
                      + value = "[parameters('storageAccountsAllowedCopyScope')]"
                    }
                  + effect           = {
                      + value = "[parameters('storageAccountsCopyScope')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CopyScope"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-CopyScope"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageServicesEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ServicesEncryption"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-ServicesEncryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageLocalUser')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-LocalUser"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-LocalUser"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageSftp')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-Sftp"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-Sftp"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedBypassOptions = {
                      + value = "[parameters('storageAllowedNetworkAclsBypass')]"
                    }
                  + effect               = {
                      + value = "[parameters('storageNetworkAclsBypass')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsBypass"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-NetworkAclsBypass"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageResourceAccessRulesTenantId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesTenantId"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-ResourceAccessRulesTenantId"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageResourceAccessRulesResourceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ResourceAccessRulesResourceId"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-ResourceAccessRulesResourceId"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageNetworkAclsVirtualNetworkRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-NetworkAclsVirtualNetworkRules"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-NetworkAclsVirtualNetworkRules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAllowBlobPublicAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-AllowBlobPublicAccess"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-AllowBlobPublicAccess"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                            = {
                      + value = "[parameters('storageContainerDeleteRetentionPolicy')]"
                    }
                  + minContainerDeleteRetentionInDays = {
                      + value = "[parameters('storageMinContainerDeleteRetentionInDays')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-ContainerDeleteRetentionPolicy"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-ContainerDeleteRetentionPolicy"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                = {
                      + value = "[parameters('storageFileServicesInsecureAuth')]"
                    }
                  + notAllowedAuthMethods = {
                      + value = "[parameters('storageFileServicesNotAllowedAuthMethods')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageFileServices-InsecureAuth"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-StorageFileServices-InsecureAuth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                             = {
                      + value = "[parameters('storageFileServicesInsecureKerberos')]"
                    }
                  + notAllowedKerberosTicketEncryption = {
                      + value = "[parameters('storageFileServicesNotAllowedKerberosTicketEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageFileServices-InsecureKerberos"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-StorageFileServices-InsecureKerberos"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                      = {
                      + value = "[parameters('storageFileServicesInsecureSmbChannel')]"
                    }
                  + notAllowedChannelEncryption = {
                      + value = "[parameters('storageFileServicesNotAllowedChannelEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageFileServices-InsecureSmbChannel"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-StorageFileServices-InsecureSmbChannel"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedSmbVersion = {
                      + value = "[parameters('storageFileServicesAllowedSmbVersion')]"
                    }
                  + effect            = {
                      + value = "[parameters('storageFileServicesInsecureSmbVersions')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-StorageFileServices-InsecureSmbVersions"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-StorageFileServices-InsecureSmbVersions"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageCorsRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CorsRules"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-CorsRules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageCustomDomain')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Storage-CustomDomain"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-CustomDomain"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect       = {
                      + value = "[parameters('storageBlobDiagnostics')]"
                    }
                  + logAnalytics = {
                      + value = "[parameters('storageBlobLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b4fe1a3b-0715-4c6c-a5ea-ffc33cf823cb"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Diagnostics-Storage-blob"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsEncryptionCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b5ec538c-daa0-4006-8596-35468b9148e8"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Encryption-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsTls')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/fe83a0eb-a853-422d-aac2-1bffd182c5d0"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Storage-Tls"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageQueueCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f0e5abd0-2554-4736-b7c0-4ffef23475ef"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-Queue-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsDoubleEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bfecdea6-31c4-4045-ad42-71b9dc87247d"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Account-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/b2982f36-99f2-4db5-8eff-283140c09693"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-Account-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsModifyDisablePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/a06d0189-92e8-4dba-b0c4-08d7669fce7d"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Storage-Account-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsCrossTenant')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/92a89a79-6c52-4a7e-a03f-61306fc49312"
          + policy_group_names   = [
              + "Encryption",
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-Cross-Tenant"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountSharedKey')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8c6a50c6-9ffd-4ae7-986f-5fa6111f9a54"
          + policy_group_names   = [
              + "Encryption",
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-Shared-Key"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageTableCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7c322315-e26d-4174-a99e-f49d351b4688"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Table-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect         = {
                      + value = "[parameters('storageQueueDiagnostics')]"
                    }
                  + logAnalytics   = {
                      + value = "[parameters('storageQueueLogAnalyticsWorkspaceId')]"
                    }
                  + metricsEnabled = {
                      + value = "[parameters('diagQueueMetrics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/7bd000e3-37c7-4928-9f31-86c4b77c5c45"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Storage-Queue-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageBlobPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageBlobPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/75973700-529f-4de2-b794-fb9b6781b6b0"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-Blob-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageSecondaryBlobPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageSecondaryBlobPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d847d34b-9337-4e2d-99a5-767e5ac9c582"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-SecondaryBlob-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageDfsPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageDfsPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/83c6fe0f-2316-444a-99a1-1ecd8a7872ca"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-Dfs-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageSecondaryDfsPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageSecondaryDfsPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/90bd4cb3-9f59-45f7-a6ca-f69db2726671"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-SecondaryDfs-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageQueuePrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageQueuePrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/bcff79fb-2b0d-47c9-97e5-3023479b00d1"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-Queue-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageSecondaryQueuePrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageSecondaryQueuePrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/da9b4ae8-5ddc-48c5-b9c0-25f8abf7a3d6"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-SecondaryQueue-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageWebPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageWebPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/9adab2a5-05ba-4fbd-831a-5bf958d04218"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-Web-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect           = {
                      + value = "[parameters('storageSecondaryWebPrivateDnsZone')]"
                    }
                  + privateDnsZoneId = {
                      + value = "[parameters('storageSecondaryWebPrivateDnsZoneId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/d19ae5f1-b303-4b82-9ca8-7682749faf0c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Dine-Storage-SecondaryWeb-PrivateDns"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect         = {
                      + value = "[parameters('storageAccountsDiagnostics')]"
                    }
                  + logAnalytics   = {
                      + value = "[parameters('storageAccountsLogAnalyticsWorkspaceId')]"
                    }
                  + metricsEnabled = {
                      + value = "[parameters('diagBlobMetrics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/59759c62-9a22-4cdf-ae64-074495983fef"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Storage-Accounts-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsPublicAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4fa4b6c0-31ca-4c0d-b10d-24b96f62a751"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-Public-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountsInfraEncryption')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/4733ea7b-a883-42fe-8cac-97454c2a9e4a"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Infra-Encryption"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountSecureTransfer')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/404c3081-a854-4457-ae30-26a93ef643f9"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-SecureTransfer"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageClassicToArm')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/37e0d2fe-28a5-43d6-a273-67d37d1f5606"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Storage-Classic"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageThreatProtection')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/361c2074-3595-4e5d-8cab-4f21dffc835c"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Storage-Threat-Protection"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountRestrictNetworkRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/34c877ad-507e-4c82-993e-3452a6e0ad3c"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-Restrict-NetworkRules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect         = {
                      + value = "[parameters('storageTableDiagnostics')]"
                    }
                  + logAnalytics   = {
                      + value = "[parameters('storageTableLogAnalyticsWorkspaceId')]"
                    }
                  + metricsEnabled = {
                      + value = "[parameters('diagTableMetrics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2fb86bf3-d221-43d1-96d1-2434af34eaa0"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Storage-Table-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageAccountNetworkRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2a1a9cdf-e04d-429a-8416-3bfb72a1b26f"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-NetworkRules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect         = {
                      + value = "[parameters('storageFileSyncDiagnostics')]"
                    }
                  + logAnalytics   = {
                      + value = "[parameters('storageFileSyncLogAnalyticsWorkspaceId')]"
                    }
                  + metricsEnabled = {
                      + value = "[parameters('diagFileMetrics')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/25a70cc8-2bd4-47f1-90b6-1478e4662c96"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Storage-FileSync-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageFileSyncPublicEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/21a8cd35-125e-4d13-b82d-2e19b7208bb7"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Storage-FileSync-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('modifyStorageAccountPublicEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/13502221-8df0-4414-9937-de9c5c4e396b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Blob-Storage-Account-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('modifyStorageFileSyncPublicEndpoint')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/0e07b2e9-6cd9-4c40-9ccb-52817b95133b"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Storage-FileSync-PublicEndpoint"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('storageKeysExipiration')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/044985bb-afe1-42cd-8a36-9d5d42424537"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Storage-Account-Keys-Expire"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_policy_set_definition.policy_set_definitions["../../definitions/Synapse/AzurePolicySets/Compliant-Synapse.json"] will be created
  + resource "azurerm_policy_set_definition" "policy_set_definitions" {
      + description         = "This policy initiative is a group of policies that ensures Synapse workspaces is compliant per regulated Landing Zones"
      + display_name        = "Enforce secure-by-default Synapse workspaces for regulated industries"
      + id                  = (known after apply)
      + management_group_id = (known after apply)
      + metadata            = jsonencode(
            {
              + category = "Synapse"
              + version  = "1.0.0"
            }
        )
      + name                = "Compliant-Synapse"
      + parameters          = jsonencode(
            {
              + synapseAllowedTenantIds          = {
                  + defaultValue = [
                      + "[subscription().tenantId]",
                    ]
                  + type         = "array"
                }
              + synapseCmk                       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseDataTraffic               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseDefender                  = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + synapseDiagnostics               = {
                  + defaultValue = "DeployIfNotExists"
                  + type         = "string"
                }
              + synapseFwRules                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseLocalAuth                 = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseLogAnalyticsWorkspaceId   = {
                  + defaultValue = ""
                  + type         = "string"
                }
              + synapseManagedVnet               = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseModifyLocalAuth           = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + synapseModifyPublicNetworkAccess = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + synapseModifyTlsVersion          = {
                  + defaultValue = "Modify"
                  + type         = "string"
                }
              + synapsePublicNetworkAccess       = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseTenants                   = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
              + synapseTlsVersion                = {
                  + defaultValue = "Deny"
                  + type         = "string"
                }
            }
        )
      + policy_type         = "Custom"

      + policy_definition_group {
          + category                        = "Data Protection"
          + description                     = "Policy to ensure data protection for Synapse workspaces"
          + display_name                    = "Ensure compliance for data encryption, protection, and recovery for Synapse workspaces"
          + name                            = "Encryption"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "DevOps Security"
          + description                     = "Policy to ensure Synapse workspaces is configured to use Git as source control"
          + display_name                    = "Ensure Synapse workspaces is is using Git as source control"
          + name                            = "DevOps"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Identity Management"
          + description                     = "Policy to ensure Synapse workspaces is not using local authorization"
          + display_name                    = "Ensure usage of centralized identity and auhtorization system for Synapse workspaces"
          + name                            = "Identity"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Logging and Threat Detection"
          + description                     = "Policy to ensure Synapse workspaces is logging all events to Log Analytics workspace"
          + display_name                    = "Ensure Synapse workspaces is logging all events to Log Analytics"
          + name                            = "Logging"
            # (1 unchanged attribute hidden)
        }
      + policy_definition_group {
          + category                        = "Network Security"
          + description                     = "Policy to ensure Synapse workspaces not accessible over the public internet"
          + display_name                    = "Ensure Synapse workspaces is not accessible over the public internet"
          + name                            = "Network"
            # (1 unchanged attribute hidden)
        }

      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect                  = {
                      + value = "[parameters('synapseDiagnostics')]"
                    }
                  + logAnalyticsWorkspaceId = {
                      + value = "[parameters('synapseLogAnalyticsWorkspaceId')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/32ba8d30-07c0-4136-ab18-9a11bf4a67b7"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Synapse-Diagnostics"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseDefender')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/951c1558-50a5-4ca3-abb6-a93e3e2367a6"
          + policy_group_names   = [
              + "Logging",
            ]
          + reference_id         = "Dine-Synapse-Defender"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseCmk')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/f7d52b2d-e161-4dfa-a82b-55e564167385"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Synapse-Cmk"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseTlsVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/cb3738a6-82a2-4a18-b87b-15217b9deff4"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Deny-Synapse-Tls-Version"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseModifyLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/c3624673-d2ff-48e0-b28c-5de1c6767c3c"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Modify-Synapse-Local-Auth"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseModifyTlsVersion')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/8b5c654c-fb07-471b-aa8f-15fea733f140"
          + policy_group_names   = [
              + "Encryption",
            ]
          + reference_id         = "Modify-Synapse-Tls-Version"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseModifyPublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/5c8cad01-ef30-4891-b230-652dadb4876a"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Modify-Synapse-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseFwRules')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Management/managementGroups/adia-adiav24/providers/Microsoft.Authorization/policyDefinitions/Deny-Synapse-Fw-Rules"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Synapse-Fw-Rules"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + allowedTenantIds = {
                      + value = "[parameters('synapseAllowedTenantIds')]"
                    }
                  + effect           = {
                      + value = "[parameters('synapseTenants')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3a003702-13d2-4679-941b-937e58c443f0"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Synapse-Tenant-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapsePublicNetworkAccess')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/38d8df46-cf4e-4073-8e03-48c24b29de0d"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Synapse-Public-Network-Access"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseDataTraffic')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/3484ce98-c0c5-4c83-994b-c5ac24785218"
          + policy_group_names   = [
              + "Encryption",
              + "Network",
            ]
          + reference_id         = "Deny-Synapse-Data-Traffic"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseManagedVnet')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2d9dbfa3-927b-4cf0-9d0f-08747f971650"
          + policy_group_names   = [
              + "Network",
            ]
          + reference_id         = "Deny-Synapse-Managed-Vnet"
          + version              = (known after apply)
        }
      + policy_definition_reference {
          + parameter_values     = jsonencode(
                {
                  + effect = {
                      + value = "[parameters('synapseLocalAuth')]"
                    }
                }
            )
          + policy_definition_id = "/providers/Microsoft.Authorization/policyDefinitions/2158ddbe-fefa-408e-b43f-d4faef8ff3b8"
          + policy_group_names   = [
              + "Identity",
            ]
          + reference_id         = "Deny-Synapse-Local-Auth"
          + version              = (known after apply)
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_role_definition.role_definitions["../../definitions/AzureCustomRoleDefinitions/LandingZoneSubscriptionOwner.json"] will be created
  + resource "azurerm_role_definition" "role_definitions" {
      + assignable_scopes           = [
          + "/providers/Microsoft.Management/managementGroups/adia-adiav24",
        ]
      + description                 = "Landing Zone Subscription Owner."
      + id                          = (known after apply)
      + name                        = "Landing Zone Subscription Owner-adia"
      + role_definition_id          = (known after apply)
      + role_definition_resource_id = (known after apply)
      + scope                       = (known after apply)

      + permissions {
          + actions     = [
              + "*",
            ]
          + not_actions = [
              + "Microsoft.Blueprint/blueprintAssignments/write",
              + "Microsoft.Blueprint/blueprintAssignments/delete",
              + "Microsoft.Network/vpnGateways/*",
              + "Microsoft.Network/expressRouteCircuits/*",
              + "Microsoft.Network/routeTables/write",
              + "Microsoft.Network/routeTables/delete",
              + "Microsoft.Network/routeTables/routes/write",
              + "Microsoft.Network/azurefirewalls/write",
              + "Microsoft.Network/azurefirewalls/delete",
              + "Microsoft.Network/firewallPolicies/write",
              + "Microsoft.Network/firewallPolicies/join/action",
              + "Microsoft.Network/firewallPolicies/delete",
              + "Microsoft.Network/firewallPolicies/ruleGroups/write",
              + "Microsoft.Network/firewallPolicies/ruleGroups/delete",
              + "Microsoft.Network/vpnSites/*",
              + "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/*",
              + "Microsoft.Network/networkSecurityGroups/securityRules/delete",
              + "Microsoft.Network/networkSecurityGroups/delete",
              + "Microsoft.Network/virtualNetworks/write",
              + "Microsoft.Network/virtualNetworks/delete",
            ]
        }
    }

  # module.file_new_tenant.module.artifacts_management_group_root.azurerm_role_definition.role_definitions["../../definitions/AzureCustomRoleDefinitions/PlatformContributor.json"] will be created
  + resource "azurerm_role_definition" "role_definitions" {
      + assignable_scopes           = [
          + "/providers/Microsoft.Management/managementGroups/adia-adiav24",
        ]
      + description                 = "Custom Role that grants full access to manage all Platform resources, but does not allow you to assign roles in Azure RBAC, manage assignments in Azure Blueprints, or share image galleries."
      + id                          = (known after apply)
      + name                        = "Platform Contributor-adia"
      + role_definition_id          = (known after apply)
      + role_definition_resource_id = (known after apply)
      + scope                       = (known after apply)

      + permissions {
          + actions     = [
              + "*",
            ]
          + not_actions = [
              + "Microsoft.Authorization/*/Delete",
              + "Microsoft.Authorization/*/Write",
              + "Microsoft.Authorization/elevateAccess/Action",
              + "Microsoft.Blueprint/blueprintAssignments/write",
              + "Microsoft.Blueprint/blueprintAssignments/delete",
              + "Microsoft.Compute/galleries/share/action",
            ]
        }
    }

Plan: 345 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + debug_environments_details       = {
      + westeurope-dev = {
          + address_space_azfw_management_subnet = "10.0.4.128/26"
          + azfw_sku                             = "Basic"
          + azure_region_name                    = "westeurope"
          + environment_name                     = "dev"
          + has_management_subnet                = true
          + management_subnet_raw                = "10.0.4.128/26"
          + network_keys                         = [
              + "address_space_allocated",
              + "address_space_azfw_management_subnet",
              + "address_space_azfw_subnet",
              + "address_space_dns_inbound_subnet",
              + "address_space_dns_outbound_subnet",
              + "address_space_gateway_subnet",
              + "address_space_network_hub",
              + "azfw_sku",
              + "azure_firewall_public_ip_count",
              + "azure_firewall_sku",
              + "dns_environment",
              + "enable_azure_firewall",
              + "enable_expressroute_gateway",
              + "enable_routing_intent",
              + "enable_virtual_wan",
              + "enable_vpn_gateway",
              + "ergw_sku",
              + "expressroute_scale_units",
              + "hub_routing_preference",
              + "subscription_id",
              + "virtual_hub_address_space",
              + "vpn_scale_units",
            ]
        }
    }
  + deployment_summary               = {
      + deployment_timestamp = (known after apply)
      + environment_count    = 0
      + geography_count      = 1
      + intent_layer_enabled = true
      + location             = "westeurope"
      + region_count         = 1
      + suffix               = "ADIA"
      + tenant_name          = "ADIAv24"
      + virtual_wan_enabled  = true
    }
  + environment_configurations       = {
      + traditional_hub_spoke = {}
    }
  + geo_platform_configurations      = {
      + EMEA = {
          + log_analytics_workspace_id   = (known after apply)
          + management_group_non_prod_id = (known after apply)
          + management_group_prod_id     = (known after apply)
        }
    }
  + intent_layer_azure_configuration = {
      + admin_rule_collection_id        = null
      + network_group_ids               = {}
      + rule_mappings                   = {}
      + security_admin_configuration_id = null
    }
  + intent_layer_summary             = {
      + aws_enabled     = false
      + aws_resources   = null
      + azure_enabled   = false
      + azure_resources = null
      + total_rules     = 4
    }
  + management_group_root_id         = (known after apply)
  + network_manager_deployments      = {
      + connectivity_deployed   = true
      + intent_layer_deployed   = false
      + security_admin_deployed = true
    }
  + network_manager_resource_id      = (known after apply)
  + regional_configurations          = {
      + westeurope = {
          + storage_account_id = (known after apply)
        }
    }
  + virtual_wan_configurations       = {
      + "0" = {
          + firewall_ids        = {
              + westeurope-dev = (known after apply)
            }
          + firewall_policy_ids = {
              + dev = (known after apply)
            }
          + virtual_hub_ids     = {
              + westeurope-dev = (known after apply)
            }
          + virtual_wan_id      = (known after apply)
        }
    }

ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇ

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

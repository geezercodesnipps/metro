# Parallel Multi-Cloud Pipeline for ADIA Metropolis
# Azure DevOps Pipeline Configuration - Azure and AWS in Parallel

parameters:
  - name: tenant
    displayName: 'Tenant'
    type: string
    default: 'Tenant001'
    values:
      - Tenant001
      - Tenant002
  - name: deploymentType
    displayName: 'Deployment Type'
    type: string
    default: 'platform'
    values:
      - platform
      - landing-zones
  - name: runAzure
    displayName: 'Deploy Azure Resources'
    type: boolean
    default: true
  - name: runAWS
    displayName: 'Deploy AWS Resources'
    type: boolean
    default: true
  - name: terraformAction
    displayName: 'Terraform Action'
    type: string
    default: 'plan'
    values:
      - validate
      - plan
      - apply
      - destroy
  - name: enableAzureIntent
    displayName: 'Enable Azure Intent Layer (AVNM Security Admin Rules)'
    type: boolean
    default: true
  - name: enableAwsIntent
    displayName: 'Enable AWS Intent Layer (Security Groups via AWS Firewall Manager)'
    type: boolean
    default: false
  - name: deploySecureHubs
    displayName: 'Deploy Secure Hubs (Azure Firewall in Virtual WAN Hubs)'
    type: boolean
    default: true
  - name: deployTipInfrastructure
    displayName: 'Deploy TiP - Test Infrastructure Provisioning (Test VMs)'
    type: boolean
    default: false
  - name: awsRegion
    displayName: 'AWS Region'
    type: string
    default: 'us-east-1'

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - infrastructure/**
      - config/**
      - pipelines/**

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - infrastructure/**
      - config/**

variables:
  - name: terraformVersion
    value: '1.7.5'
  - name: azureServiceConnection
    value: 'Adia_Deploy'
  # AWS credentials from existing variable group
  - group: adia-metropolis-aws-secrets
  # Note: Ensure snyk-security-variables variable group exists in Azure DevOps
  # - group: snyk-security-variables

pool:
  # Note: Update 'selfhosted' to match your Azure DevOps agent pool name
  name: 'selfhosted'

stages:
  # Stage 1: Security Scanning (runs first for both clouds) - TEMPORARILY DISABLED FOR FASTER TESTING
  # - stage: SecurityScan
  #   displayName: 'Security Scanning'
  #   jobs:
  #     - job: SnykScan
  #       displayName: 'Multi-Cloud Security Scan'
  #       steps:
  #         - template: templates/security-scan-template.yml
  #           parameters:
  #             cloudProvider: 'multicloud'
  #             scanPath: 'infrastructure/'
  #             failOnHighSeverity: true
  #             failOnMediumSeverity: false

  # Stage 2: Parallel Validation
  - stage: ParallelValidation
    displayName: 'Parallel Validation (Azure & AWS)'
    # dependsOn: SecurityScan  # DISABLED - Security scan stage commented out
    jobs:
      # Azure Validation Job
      - job: AzureValidation
        displayName: 'Azure Terraform Validation'
        condition: eq('${{ parameters.runAzure }}', true)
        steps:
          - template: templates/terraform-azure-template.yml
            parameters:
              terraformAction: 'validate'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: '${{ parameters.enableAzureIntent }}'
              enableAwsIntent: false  # Azure platform doesn't deploy AWS intent
              deploySecureHubs: '${{ parameters.deploySecureHubs }}'
              deployTipInfrastructure: '${{ parameters.deployTipInfrastructure }}'

      # AWS Validation Job (runs in parallel)
      - job: AWSValidation
        displayName: 'AWS Terraform Validation'
        condition: eq('${{ parameters.runAWS }}', true)
        steps:
          - template: templates/terraform-aws-template.yml
            parameters:
              terraformAction: 'validate'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: false  # AWS platform doesn't deploy Azure intent
              enableAwsIntent: '${{ parameters.enableAwsIntent }}'
              awsRegion: '${{ parameters.awsRegion }}'

  # Stage 3: Parallel Planning
  - stage: ParallelPlanning
    displayName: 'Parallel Planning (Azure & AWS)'
    dependsOn: ParallelValidation
    condition: and(succeeded(), in('${{ parameters.terraformAction }}', 'plan', 'apply'))
    jobs:
      # Azure Planning Job
      - job: AzurePlanning
        displayName: 'Azure Terraform Plan'
        condition: eq('${{ parameters.runAzure }}', true)
        steps:
          - template: templates/terraform-azure-template.yml
            parameters:
              terraformAction: 'plan'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: '${{ parameters.enableAzureIntent }}'
              enableAwsIntent: false  # Azure platform doesn't deploy AWS intent
              deploySecureHubs: '${{ parameters.deploySecureHubs }}'
              deployTipInfrastructure: '${{ parameters.deployTipInfrastructure }}'

      # AWS Planning Job (runs in parallel)
      - job: AWSPlanning
        displayName: 'AWS Terraform Plan'
        condition: eq('${{ parameters.runAWS }}', true)
        steps:
          - template: templates/terraform-aws-template.yml
            parameters:
              terraformAction: 'plan'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: false  # AWS platform doesn't deploy Azure intent
              enableAwsIntent: '${{ parameters.enableAwsIntent }}'
              awsRegion: '${{ parameters.awsRegion }}'

  # Stage 4: Parallel Deployment (only on main branch and if action is apply)
  - stage: ParallelDeployment
    displayName: 'Parallel Deployment (Azure & AWS)'
    dependsOn: ParallelPlanning
    condition: and(succeeded(), eq('${{ parameters.terraformAction }}', 'apply'))
    jobs:
      # Azure Deployment Job
      - job: AzureDeployment
        displayName: 'Azure Terraform Apply'
        timeoutInMinutes: 180
        condition: eq('${{ parameters.runAzure }}', true)
        steps:
          - template: templates/terraform-azure-template.yml
            parameters:
              terraformAction: 'apply'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: '${{ parameters.enableAzureIntent }}'
              enableAwsIntent: false  # Azure platform doesn't deploy AWS intent
              deploySecureHubs: '${{ parameters.deploySecureHubs }}'
              deployTipInfrastructure: '${{ parameters.deployTipInfrastructure }}'

      # AWS Deployment Job (runs in parallel)
      - job: AWSDeployment
        displayName: 'AWS Terraform Apply'
        timeoutInMinutes: 180
        condition: eq('${{ parameters.runAWS }}', true)
        steps:
          - template: templates/terraform-aws-template.yml
            parameters:
              terraformAction: 'apply'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: false  # AWS platform doesn't deploy Azure intent
              enableAwsIntent: '${{ parameters.enableAwsIntent }}'
              awsRegion: '${{ parameters.awsRegion }}'

  # Stage 5: Cross-Cloud Integration Tests (runs after planning or deployment)
  - stage: CrossCloudValidation
    displayName: 'Cross-Cloud Integration Tests'
    dependsOn: 
      - ParallelPlanning
    condition: succeededOrFailed('ParallelPlanning')
    jobs:
      - job: ConnectivityTests
        displayName: 'Cross-Cloud Connectivity Tests'
        steps:
          - task: PowerShell@2
            displayName: 'Cross-Cloud Integration Tests'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "🔗 Testing cross-cloud connectivity..."
                Write-Host "Azure resources deployed: ${{ parameters.runAzure }}"
                Write-Host "AWS resources deployed: ${{ parameters.runAWS }}"
                Write-Host "Azure Intent Layer enabled: ${{ parameters.enableAzureIntent }}"
                Write-Host "AWS Intent Layer enabled: ${{ parameters.enableAwsIntent }}"
                Write-Host "Secure Hubs deployed: ${{ parameters.deploySecureHubs }}"
                Write-Host "TiP Infrastructure deployed: ${{ parameters.deployTipInfrastructure }}"
                
                if ("${{ parameters.runAzure }}" -eq "true" -and "${{ parameters.runAWS }}" -eq "true") {
                  Write-Host "🧪 Running full cross-cloud connectivity tests"
                  Write-Host "- Testing VPN/ExpressRoute connectivity"
                  Write-Host "- Validating DNS resolution across clouds"
                  Write-Host "- Testing identity federation"
                  Write-Host "- Validating monitoring integration"
                  
                  if ("${{ parameters.deploySecureHubs }}" -eq "true") {
                    Write-Host "🔥 Testing Azure Firewall secure hub functionality"
                    Write-Host "- Validating firewall policies"
                    Write-Host "- Testing routing intent"
                    Write-Host "- Checking inter-hub connectivity"
                  } else {
                    Write-Host "📡 Testing standard hub connectivity (no Azure Firewall)"
                  }
                  
                  if ("${{ parameters.deployTipInfrastructure }}" -eq "true") {
                    Write-Host "🔧 Testing TiP Infrastructure"
                    Write-Host "- Validating test VM deployment"
                    Write-Host "- Testing cross-region connectivity"
                    Write-Host "- Running performance tests with iperf3"
                    Write-Host "- Testing SSH connectivity between regions"
                  }
                  
                } elseif ("${{ parameters.runAzure }}" -eq "true") {
                  Write-Host "🧪 Running Azure-only validation tests"
                  
                  if ("${{ parameters.deployTipInfrastructure }}" -eq "true") {
                    Write-Host "🔧 Testing Azure TiP Infrastructure"
                    Write-Host "- Validating test VM deployment in Virtual WAN"
                    Write-Host "- Testing hub-to-spoke connectivity"
                  }
                  
                } elseif ("${{ parameters.runAWS }}" -eq "true") {
                  Write-Host "🧪 Running AWS-only validation tests"
                } else {
                  Write-Host "⚠️ No cloud resources deployed to test"
                }
            # Note: Uncomment if AWS credentials are configured in Azure DevOps
            # env:
            #   AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            #   AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      - job: ReportGeneration
        displayName: 'Generate Deployment Report'
        dependsOn: ConnectivityTests
        steps:
          - task: PowerShell@2
            displayName: 'Generate Deployment Report'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "📊 Generating deployment report..."
                Write-Host "=================================="
                Write-Host "Tenant: ${{ parameters.tenant }}"
                Write-Host "Deployment Type: ${{ parameters.deploymentType }}"
                Write-Host "Terraform Action: ${{ parameters.terraformAction }}"
                Write-Host ""
                Write-Host "Cloud Deployment Status:"
                Write-Host "- Azure Deployed: ${{ parameters.runAzure }}"
                Write-Host "- AWS Deployed: ${{ parameters.runAWS }}"
                Write-Host ""
                Write-Host "Feature Configuration:"
                Write-Host "- Azure Intent Layer: ${{ parameters.enableAzureIntent }}"
                Write-Host "- AWS Intent Layer: ${{ parameters.enableAwsIntent }}"
                Write-Host "- Secure Hubs (Azure Firewall): ${{ parameters.deploySecureHubs }}"
                Write-Host "- TiP Infrastructure (Test VMs): ${{ parameters.deployTipInfrastructure }}"
                Write-Host ""
                Write-Host "Build Information:"
                Write-Host "- Build Number: $(Build.BuildNumber)"
                Write-Host "- Source Branch: $(Build.SourceBranch)"
                Write-Host "- Build Reason: $(Build.Reason)"
                Write-Host "=================================="

  # Stage 6: Parallel Cleanup (optional, for destroy operations)
  - stage: ParallelCleanup
    displayName: 'Parallel Cleanup (Azure & AWS)'
    # dependsOn: SecurityScan  # DISABLED - Security scan stage commented out
    condition: and(succeeded(), eq('${{ parameters.terraformAction }}', 'destroy'))
    jobs:
      # Azure Cleanup Job
      - job: AzureCleanup
        displayName: 'Azure Terraform Destroy'
        timeoutInMinutes: 180
        condition: eq('${{ parameters.runAzure }}', true)
        steps:
          - template: templates/terraform-azure-template.yml
            parameters:
              terraformAction: 'destroy'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: '${{ parameters.enableAzureIntent }}'
              enableAwsIntent: '${{ parameters.enableAwsIntent }}'
              deploySecureHubs: '${{ parameters.deploySecureHubs }}'
              deployTipInfrastructure: '${{ parameters.deployTipInfrastructure }}'

      # AWS Cleanup Job (runs in parallel)
      - job: AWSCleanup
        displayName: 'AWS Terraform Destroy'
        timeoutInMinutes: 180
        condition: eq('${{ parameters.runAWS }}', true)
        steps:
          - template: templates/terraform-aws-template.yml
            parameters:
              terraformAction: 'destroy'
              tenant: '${{ parameters.tenant }}'
              deploymentType: '${{ parameters.deploymentType }}'
              enableAzureIntent: '${{ parameters.enableAzureIntent }}'
              enableAwsIntent: '${{ parameters.enableAwsIntent }}'
              awsRegion: '${{ parameters.awsRegion }}'
